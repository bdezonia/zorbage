Examples
  Parsing all kinds of types
  Mandelbrot explorer
  Game of life
  
Other needs
  maven
  Multiplying together vectors, matrices, and tensors
  Fix and flesh out tensor classes
  Matrices: norm (more than one kind), det, invert
  Add more types:
    native long, short, byte, float32, plus complex32 and quat32 and oct32
    bit: 2, 4, 12, 20, 24, 128
    int types above as both signed and unsigned
  Add tests
  polynomials
  group ring, modules
  functions of a real variable as a vector space
  vector direct product creating tensors
  improve exp() and log() accuracy near 1.0 / - 1.0
  big decimal type needed?
  number bases: instead of zero and unity need faster ways to construct numbers besides strings
  find all TODOs in code and implement
  power<u> might not be in right place in hierarchy
  power(int, a, b): minimize number of multiplies via recursion. see boost hpp code for quats and octs.
    implement this for all numeric types. (Later note: i can't see how this is fewer multiplies)
  real/unreal as part of hierarchy. at least unreal.
  make sure all math ops can safely work if (a,b,c) params collide. use extra tmps and assign().
  check: IEEE 754 might specify that a num with one component inf and any nan might be considered inf. apache commons math4 copies my implementation.
    This affects complex, quat, and oct. Now I assume a nan overrides all.
  complex numbers: polar constructors
  quotient/remainder as well as div/mod
  there are numerous kinds of norms. can embed a default impl for some types. but should implement
    families of reusable norm implementations
  group hierarchy could be multithreaded
  must finish tensor classes
  must finish octonion classes
  must finish rmodule classes
  numerical algorithms put in place: matrix algebra, odes, pdes, interpolation, etc.
  underflow avoidance on sqrt calls
  bessel functions, legendre functions, airy functions, others
  some of the type classes rely on ArrayStorage. break this dependence to support huge math operations
  make vectors, rmodules, matrices use multidimaccessor
  apache commons math4 does a lot of things my code does
    it doesn't have all of algebra hierarchy and it doesn't have quats and octs
    and it doesn't handle huge datasets and it might be slow due to lots of memory allocation

Make FileStorage. Have an encoder that reads/writes from/to numeric types.
Then can have matrices with a FileStorage strategy rather than an array
storage stategy.
ComplexFloat64 file encoder:
  toStore:
    raf.writeDouble(v.r());
    raf.writeDouble(v.i());
  toValue
    v.setR(raf.readDouble());
    v.setI(raf.readDouble());
ComplexFloat64 array encoder
  toStore:
    array[index + 0] = v.r();
    array[index + 1] = v.i();
  toValue
    v.setR(array[index + 0];
    v.setI(array[index + 1];
Make an abstraction that assigns values and use it.
Use elementSize() as part of encoders to make them more generic and simplify FileStorage classes
Sparse vector/matrix/tensor storage
String constructors for numeric types: how about character stream constructors instead
Make more FileStorage classes for each type.
Remove much duplication in FileStorage classes and maybe data type/group classes
Support sparse allocation method
String constructors of numeric types default to DENSE ARRAY. Maybe allow mem storage params.
FileStorage classes only support float64s. expand to include ints, bools, etc.
The constructors for storage may duplicate others. Due to time lags this is not necessarily
  threadsafe. Obtain locks.
use vector/rmodule init() inside their own operations: c.init(targetSize). this is cuz vectors
  no longer autosize.
Investigate other libraries: Colt (java), Gnu sci lib, Imglib, boost, other fortran classics
  Boost headers for complex and quats can give valuable design ideas. Need a ref for octs.
  http://www.boost.org/doc/libs/1_65_1/boost/math/octonion.hpp
0^0 should be nan or throw an exception. right now it returns 1.
rmodules have right and left subtypes: see that AWchap3.pdf file I downloaded
are type oriented array storage not including last element when size is not evenly divisible into typeCount()
FileStorage has a non thread safe U reuse (in type) and on duplication it is made worse
check all array allocations that type.intCount() included
check ctor error messages for array storage that they say objects instead of signedint32 etc.
make arraybit support multibit value encodings
get rid of value.x(value) in storage code