/*
 * Zorbage: an algebraic data hierarchy for use in numeric processing.
 *
 * Copyright (c) 2016-2021 Barry DeZonia All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 * 
 * Neither the name of the <copyright holder> nor the names of its contributors may
 * be used to endorse or promote products derived from this software without specific
 * prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */
package nom.bdezonia.zorbage.type.universal;

import static org.junit.Assert.*;

import java.math.BigDecimal;

import org.junit.Test;

/**
 * 
 * @author Barry DeZonia
 *
 */
public class TestTensorStringRepresentation {

	@Test
	public void test0d() {
		TensorStringRepresentation a = new TensorStringRepresentation("1");
		assertArrayEquals(new long[] {1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.firstValue().r());
		assertEquals(BigDecimal.ZERO, a.firstValue().i());
		assertEquals(BigDecimal.ZERO, a.firstValue().j());
		assertEquals(BigDecimal.ZERO, a.firstValue().k());
		assertEquals(BigDecimal.ZERO, a.firstValue().l());
		assertEquals(BigDecimal.ZERO, a.firstValue().i0());
		assertEquals(BigDecimal.ZERO, a.firstValue().j0());
		assertEquals(BigDecimal.ZERO, a.firstValue().k0());

		TensorStringRepresentation b = new TensorStringRepresentation("{1}");
		assertArrayEquals(new long[] {1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.firstValue().r());
		assertEquals(BigDecimal.ZERO, b.firstValue().i());
		assertEquals(BigDecimal.ZERO, b.firstValue().j());
		assertEquals(BigDecimal.ZERO, b.firstValue().k());
		assertEquals(BigDecimal.ZERO, b.firstValue().l());
		assertEquals(BigDecimal.ZERO, b.firstValue().i0());
		assertEquals(BigDecimal.ZERO, b.firstValue().j0());
		assertEquals(BigDecimal.ZERO, b.firstValue().k0());

		TensorStringRepresentation c = new TensorStringRepresentation("{1,2}");
		assertArrayEquals(new long[] {1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), c.firstValue().i());
		assertEquals(BigDecimal.ZERO, c.firstValue().j());
		assertEquals(BigDecimal.ZERO, c.firstValue().k());
		assertEquals(BigDecimal.ZERO, c.firstValue().l());
		assertEquals(BigDecimal.ZERO, c.firstValue().i0());
		assertEquals(BigDecimal.ZERO, c.firstValue().j0());
		assertEquals(BigDecimal.ZERO, c.firstValue().k0());

		TensorStringRepresentation d = new TensorStringRepresentation("{1,2,3}");
		assertArrayEquals(new long[] {1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), d.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), d.firstValue().j());
		assertEquals(BigDecimal.ZERO, d.firstValue().k());
		assertEquals(BigDecimal.ZERO, d.firstValue().l());
		assertEquals(BigDecimal.ZERO, d.firstValue().i0());
		assertEquals(BigDecimal.ZERO, d.firstValue().j0());
		assertEquals(BigDecimal.ZERO, d.firstValue().k0());

		TensorStringRepresentation e = new TensorStringRepresentation("{1,2,3,4}");
		assertArrayEquals(new long[] {1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), e.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), e.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), e.firstValue().k());
		assertEquals(BigDecimal.ZERO, e.firstValue().l());
		assertEquals(BigDecimal.ZERO, e.firstValue().i0());
		assertEquals(BigDecimal.ZERO, e.firstValue().j0());
		assertEquals(BigDecimal.ZERO, e.firstValue().k0());

		TensorStringRepresentation f = new TensorStringRepresentation("{1,2,3,4,5}");
		assertArrayEquals(new long[] {1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), f.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), f.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), f.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), f.firstValue().l());
		assertEquals(BigDecimal.ZERO, f.firstValue().i0());
		assertEquals(BigDecimal.ZERO, f.firstValue().j0());
		assertEquals(BigDecimal.ZERO, f.firstValue().k0());

		TensorStringRepresentation g = new TensorStringRepresentation("{1,2,3,4,5,6}");
		assertArrayEquals(new long[] {1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), g.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), g.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), g.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), g.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), g.firstValue().i0());
		assertEquals(BigDecimal.ZERO, g.firstValue().j0());
		assertEquals(BigDecimal.ZERO, g.firstValue().k0());

		TensorStringRepresentation h = new TensorStringRepresentation("{1,2,3,4,5,6,7}");
		assertArrayEquals(new long[] {1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), h.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), h.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), h.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), h.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), h.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), h.firstValue().j0());
		assertEquals(BigDecimal.ZERO, h.firstValue().k0());

		TensorStringRepresentation i = new TensorStringRepresentation("{1,2,3,4,5,6,7,8}");
		assertArrayEquals(new long[] {1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), i.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), i.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), i.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), i.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), i.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), i.firstValue().j0());
		assertEquals(BigDecimal.valueOf(8), i.firstValue().k0());

		TensorStringRepresentation j = new TensorStringRepresentation("{1,2,3,4,5,6,7,8,9}");
		assertArrayEquals(new long[] {1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), j.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), j.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), j.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), j.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), j.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), j.firstValue().j0());
		assertEquals(BigDecimal.valueOf(8), j.firstValue().k0());
	}

	@Test
	public void test1dx1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[1]");
		assertArrayEquals(new long[] {1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.firstValue().r());
		assertEquals(BigDecimal.ZERO, a.firstValue().i());
		assertEquals(BigDecimal.ZERO, a.firstValue().j());
		assertEquals(BigDecimal.ZERO, a.firstValue().k());
		assertEquals(BigDecimal.ZERO, a.firstValue().l());
		assertEquals(BigDecimal.ZERO, a.firstValue().i0());
		assertEquals(BigDecimal.ZERO, a.firstValue().j0());
		assertEquals(BigDecimal.ZERO, a.firstValue().k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[{1}]");
		assertArrayEquals(new long[] {1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.firstValue().r());
		assertEquals(BigDecimal.ZERO, b.firstValue().i());
		assertEquals(BigDecimal.ZERO, b.firstValue().j());
		assertEquals(BigDecimal.ZERO, b.firstValue().k());
		assertEquals(BigDecimal.ZERO, b.firstValue().l());
		assertEquals(BigDecimal.ZERO, b.firstValue().i0());
		assertEquals(BigDecimal.ZERO, b.firstValue().j0());
		assertEquals(BigDecimal.ZERO, b.firstValue().k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[{1,2}]");
		assertArrayEquals(new long[] {1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), c.firstValue().i());
		assertEquals(BigDecimal.ZERO, c.firstValue().j());
		assertEquals(BigDecimal.ZERO, c.firstValue().k());
		assertEquals(BigDecimal.ZERO, c.firstValue().l());
		assertEquals(BigDecimal.ZERO, c.firstValue().i0());
		assertEquals(BigDecimal.ZERO, c.firstValue().j0());
		assertEquals(BigDecimal.ZERO, c.firstValue().k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[{1,2,3}]");
		assertArrayEquals(new long[] {1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), d.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), d.firstValue().j());
		assertEquals(BigDecimal.ZERO, d.firstValue().k());
		assertEquals(BigDecimal.ZERO, d.firstValue().l());
		assertEquals(BigDecimal.ZERO, d.firstValue().i0());
		assertEquals(BigDecimal.ZERO, d.firstValue().j0());
		assertEquals(BigDecimal.ZERO, d.firstValue().k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[{1,2,3,4}]");
		assertArrayEquals(new long[] {1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), e.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), e.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), e.firstValue().k());
		assertEquals(BigDecimal.ZERO, e.firstValue().l());
		assertEquals(BigDecimal.ZERO, e.firstValue().i0());
		assertEquals(BigDecimal.ZERO, e.firstValue().j0());
		assertEquals(BigDecimal.ZERO, e.firstValue().k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[{1,2,3,4,5}]");
		assertArrayEquals(new long[] {1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), f.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), f.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), f.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), f.firstValue().l());
		assertEquals(BigDecimal.ZERO, f.firstValue().i0());
		assertEquals(BigDecimal.ZERO, f.firstValue().j0());
		assertEquals(BigDecimal.ZERO, f.firstValue().k0());
		
		TensorStringRepresentation g = new TensorStringRepresentation("[{1,2,3,4,5,6}]");
		assertArrayEquals(new long[] {1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), g.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), g.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), g.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), g.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), g.firstValue().i0());
		assertEquals(BigDecimal.ZERO, g.firstValue().j0());
		assertEquals(BigDecimal.ZERO, g.firstValue().k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[{1,2,3,4,5,6,7}]");
		assertArrayEquals(new long[] {1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), h.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), h.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), h.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), h.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), h.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), h.firstValue().j0());
		assertEquals(BigDecimal.ZERO, h.firstValue().k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[{1,2,3,4,5,6,7,8}]");
		assertArrayEquals(new long[] {1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), i.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), i.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), i.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), i.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), i.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), i.firstValue().j0());
		assertEquals(BigDecimal.valueOf(8), i.firstValue().k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[{1,2,3,4,5,6,7,8,9}]");
		assertArrayEquals(new long[] {1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), j.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), j.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), j.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), j.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), j.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), j.firstValue().j0());
		assertEquals(BigDecimal.valueOf(8), j.firstValue().k0());
	}

	@Test
	public void test1dx2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[1,2]");
		assertArrayEquals(new long[] {2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[{1},{2}]");
		assertArrayEquals(new long[] {2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		
		TensorStringRepresentation c = new TensorStringRepresentation("[{1,2},{3,4}]");
		assertArrayEquals(new long[] {2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[{1,2,3},{4,5,6}]");
		assertArrayEquals(new long[] {2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[{1,2,3,4},{5,6,7,8}]");
		assertArrayEquals(new long[] {2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[{1,2,3,4,5},{6,7,8,9,10}]");
		assertArrayEquals(new long[] {2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[{1,2,3,4,5,6},{7,8,9,10,11,12}]");
		assertArrayEquals(new long[] {2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}]");
		assertArrayEquals(new long[] {2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}]");
		assertArrayEquals(new long[] {2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}]");
		assertArrayEquals(new long[] {2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
	}

	@Test
	public void test1dx3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[1,2,3]");
		assertArrayEquals(new long[] {3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[{1},{2},{3}]");
		assertArrayEquals(new long[] {3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[{1,2},{3,4},{5,6}]");
		assertArrayEquals(new long[] {3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[{1,2,3},{4,5,6},{7,8,9}]");
		assertArrayEquals(new long[] {3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[{1,2,3,4},{5,6,7,8},{9,10,11,12}]");
		assertArrayEquals(new long[] {3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}]");
		assertArrayEquals(new long[] {3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}]");
		assertArrayEquals(new long[] {3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}]");
		assertArrayEquals(new long[] {3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}]");
		assertArrayEquals(new long[] {3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}]");
		assertArrayEquals(new long[] {3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
	}

	@Test
	public void test2d1x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1]]");
		assertArrayEquals(new long[] {1,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		
		TensorStringRepresentation b = new TensorStringRepresentation("[[{1}]]");
		assertArrayEquals(new long[] {1,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		
		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2}]]");
		assertArrayEquals(new long[] {1,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		
		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3}]]");
		assertArrayEquals(new long[] {1,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		
		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4}]]");
		assertArrayEquals(new long[] {1,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		
		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5}]]");
		assertArrayEquals(new long[] {1,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		
		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6}]]");
		assertArrayEquals(new long[] {1,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		
		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7}]]");
		assertArrayEquals(new long[] {1,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		
		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8}]]");
		assertArrayEquals(new long[] {1,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		
		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9}]]");
		assertArrayEquals(new long[] {1,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
	}

	@Test
	public void test2d1x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1,2]]");
		assertArrayEquals(new long[] {2,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[{1},{2}]]");
		assertArrayEquals(new long[] {2,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2},{3,4}]]");
		assertArrayEquals(new long[] {2,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3},{4,5,6}]]");
		assertArrayEquals(new long[] {2,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4},{5,6,7,8}]]");
		assertArrayEquals(new long[] {2,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5},{6,7,8,9,10}]]");
		assertArrayEquals(new long[] {2,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6},{7,8,9,10,11,12}]]");
		assertArrayEquals(new long[] {2,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}]]");
		assertArrayEquals(new long[] {2,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}]]");
		assertArrayEquals(new long[] {2,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}]]");
		assertArrayEquals(new long[] {2,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
	}

	@Test
	public void test2d1x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1,2,3]]");
		assertArrayEquals(new long[] {3,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[{1},{2},{3}]]");
		assertArrayEquals(new long[] {3,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2},{3,4},{5,6}]]");
		assertArrayEquals(new long[] {3,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3},{4,5,6},{7,8,9}]]");
		assertArrayEquals(new long[] {3,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4},{5,6,7,8},{9,10,11,12}]]");
		assertArrayEquals(new long[] {3,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}]]");
		assertArrayEquals(new long[] {3,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}]]");
		assertArrayEquals(new long[] {3,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}]]");
		assertArrayEquals(new long[] {3,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}]]");
		assertArrayEquals(new long[] {3,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}]]");
		assertArrayEquals(new long[] {3,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
	}

	@Test
	public void test2d2x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1][2]]");
		assertArrayEquals(new long[] {1,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[{1}][{2}]]");
		assertArrayEquals(new long[] {1,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2}][{3,4}]]");
		assertArrayEquals(new long[] {1,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3}][{4,5,6}]]");
		assertArrayEquals(new long[] {1,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4}][{5,6,7,8}]]");
		assertArrayEquals(new long[] {1,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5}][{6,7,8,9,10}]]");
		assertArrayEquals(new long[] {1,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6}][{7,8,9,10,11,12}]]");
		assertArrayEquals(new long[] {1,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}]]");
		assertArrayEquals(new long[] {1,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}]]");
		assertArrayEquals(new long[] {1,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}]]");
		assertArrayEquals(new long[] {1,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
	}

	@Test
	public void test2d2x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1,2][3,4]]");
		assertArrayEquals(new long[] {2,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[{1},{2}][{3},{4}]]") ;
		assertArrayEquals(new long[] {2,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2},{3,4}][{5,6},{7,8}]]");
		assertArrayEquals(new long[] {2,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}]]");
		assertArrayEquals(new long[] {2,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}]]");
		assertArrayEquals(new long[] {2,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}]]");
		assertArrayEquals(new long[] {2,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}]]");
		assertArrayEquals(new long[] {2,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}]]");
		assertArrayEquals(new long[] {2,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}]]");
		assertArrayEquals(new long[] {2,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}]]");
		assertArrayEquals(new long[] {2,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
	}

	@Test
	public void test2d2x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1,2,3][4,5,6]]");
		assertArrayEquals(new long[] {3,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[{1},{2},{3}][{4},{5},{6}]]") ;
		assertArrayEquals(new long[] {3,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}]]");
		assertArrayEquals(new long[] {3,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}]]");
		assertArrayEquals(new long[] {3,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}]]");
		assertArrayEquals(new long[] {3,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}]]");
		assertArrayEquals(new long[] {3,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}]]");
		assertArrayEquals(new long[] {3,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]]");
		assertArrayEquals(new long[] {3,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]]");
		assertArrayEquals(new long[] {3,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]]");
		assertArrayEquals(new long[] {3,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test2d3x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1][2][3]]");
		assertArrayEquals(new long[] {1,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[{1}][{2}][{3}]]");
		assertArrayEquals(new long[] {1,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2}][{3,4}][{5,6}]]");
		assertArrayEquals(new long[] {1,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3}][{4,5,6}][{7,8,9}]]");
		assertArrayEquals(new long[] {1,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4}][{5,6,7,8}][{9,10,11,12}]]");
		assertArrayEquals(new long[] {1,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5}][{6,7,8,9,10}][{11,12,13,14,15}]]");
		assertArrayEquals(new long[] {1,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6}][{7,8,9,10,11,12}][{13,14,15,16,17,18}]]");
		assertArrayEquals(new long[] {1,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21}]]");
		assertArrayEquals(new long[] {1,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24}]]");
		assertArrayEquals(new long[] {1,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27}]]");
		assertArrayEquals(new long[] {1,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
	}

	@Test
	public void test2d3x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1,2][3,4][5,6]]");
		assertArrayEquals(new long[] {2,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[{1},{2}][{3},{4}][{5},{6}]]") ;
		assertArrayEquals(new long[] {2,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2},{3,4}][{5,6},{7,8}][{9,10},{11,12}]]");
		assertArrayEquals(new long[] {2,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}][{13,14,15},{16,17,18}]]");
		assertArrayEquals(new long[] {2,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}][{17,18,19,20},{21,22,23,24}]]");
		assertArrayEquals(new long[] {2,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}][{21,22,23,24,25},{26,27,28,29,30}]]");
		assertArrayEquals(new long[] {2,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}][{25,26,27,28,29,30},{31,32,33,34,35,36}]]");
		assertArrayEquals(new long[] {2,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}][{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]]");
		assertArrayEquals(new long[] {2,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}][{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]]");
		assertArrayEquals(new long[] {2,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}][{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]]");
		assertArrayEquals(new long[] {2,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test2d3x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[1,2,3][4,5,6][7,8,9]]");
		assertArrayEquals(new long[] {3,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		
		TensorStringRepresentation b = new TensorStringRepresentation("[[{1},{2},{3}][{4},{5},{6}][{7},{8},{9}]]") ;
		assertArrayEquals(new long[] {3,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		
		TensorStringRepresentation c = new TensorStringRepresentation("[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}][{13,14},{15,16},{17,18}]]");
		assertArrayEquals(new long[] {3,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		
		TensorStringRepresentation d = new TensorStringRepresentation("[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}][{19,20,21},{22,23,24},{25,26,27}]]");
		assertArrayEquals(new long[] {3,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		
		TensorStringRepresentation e = new TensorStringRepresentation("[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}][{25,26,27,28},{29,30,31,32},{33,34,35,36}]]");
		assertArrayEquals(new long[] {3,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		
		TensorStringRepresentation f = new TensorStringRepresentation("[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}][{31,32,33,34,35},{36,37,38,39,40},{41,42,43,44,45}]]");
		assertArrayEquals(new long[] {3,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		
		TensorStringRepresentation g = new TensorStringRepresentation("[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}][{37,38,39,40,41,42},{43,44,45,46,47,48},{49,50,51,52,53,54}]]");
		assertArrayEquals(new long[] {3,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		
		TensorStringRepresentation h = new TensorStringRepresentation("[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}][{43,44,45,46,47,48,49},{50,51,52,53,54,55,56},{57,58,59,60,61,62,63}]]");
		assertArrayEquals(new long[] {3,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		
		TensorStringRepresentation i = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}][{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64},{65,66,67,68,69,70,71,72}]]");
		assertArrayEquals(new long[] {3,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		
		TensorStringRepresentation j = new TensorStringRepresentation("[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}][{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81}]]");
		assertArrayEquals(new long[] {3,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
	}

	@Test
	public void test3d1x1x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1]]]");
		assertArrayEquals(new long[] {1,1,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.firstValue().r());
		assertEquals(BigDecimal.ZERO, a.firstValue().i());
		assertEquals(BigDecimal.ZERO, a.firstValue().j());
		assertEquals(BigDecimal.ZERO, a.firstValue().k());
		assertEquals(BigDecimal.ZERO, a.firstValue().l());
		assertEquals(BigDecimal.ZERO, a.firstValue().i0());
		assertEquals(BigDecimal.ZERO, a.firstValue().j0());
		assertEquals(BigDecimal.ZERO, a.firstValue().k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}]]]");
		assertArrayEquals(new long[] {1,1,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.firstValue().r());
		assertEquals(BigDecimal.ZERO, b.firstValue().i());
		assertEquals(BigDecimal.ZERO, b.firstValue().j());
		assertEquals(BigDecimal.ZERO, b.firstValue().k());
		assertEquals(BigDecimal.ZERO, b.firstValue().l());
		assertEquals(BigDecimal.ZERO, b.firstValue().i0());
		assertEquals(BigDecimal.ZERO, b.firstValue().j0());
		assertEquals(BigDecimal.ZERO, b.firstValue().k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}]]]");
		assertArrayEquals(new long[] {1,1,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), c.firstValue().i());
		assertEquals(BigDecimal.ZERO, c.firstValue().j());
		assertEquals(BigDecimal.ZERO, c.firstValue().k());
		assertEquals(BigDecimal.ZERO, c.firstValue().l());
		assertEquals(BigDecimal.ZERO, c.firstValue().i0());
		assertEquals(BigDecimal.ZERO, c.firstValue().j0());
		assertEquals(BigDecimal.ZERO, c.firstValue().k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}]]]");
		assertArrayEquals(new long[] {1,1,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), d.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), d.firstValue().j());
		assertEquals(BigDecimal.ZERO, d.firstValue().k());
		assertEquals(BigDecimal.ZERO, d.firstValue().l());
		assertEquals(BigDecimal.ZERO, d.firstValue().i0());
		assertEquals(BigDecimal.ZERO, d.firstValue().j0());
		assertEquals(BigDecimal.ZERO, d.firstValue().k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}]]]");
		assertArrayEquals(new long[] {1,1,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), e.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), e.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), e.firstValue().k());
		assertEquals(BigDecimal.ZERO, e.firstValue().l());
		assertEquals(BigDecimal.ZERO, e.firstValue().i0());
		assertEquals(BigDecimal.ZERO, e.firstValue().j0());
		assertEquals(BigDecimal.ZERO, e.firstValue().k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}]]]");
		assertArrayEquals(new long[] {1,1,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), f.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), f.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), f.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), f.firstValue().l());
		assertEquals(BigDecimal.ZERO, f.firstValue().i0());
		assertEquals(BigDecimal.ZERO, f.firstValue().j0());
		assertEquals(BigDecimal.ZERO, f.firstValue().k0());
		
		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}]]]");
		assertArrayEquals(new long[] {1,1,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), g.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), g.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), g.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), g.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), g.firstValue().i0());
		assertEquals(BigDecimal.ZERO, g.firstValue().j0());
		assertEquals(BigDecimal.ZERO, g.firstValue().k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}]]]");
		assertArrayEquals(new long[] {1,1,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), h.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), h.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), h.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), h.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), h.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), h.firstValue().j0());
		assertEquals(BigDecimal.ZERO, h.firstValue().k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}]]]");
		assertArrayEquals(new long[] {1,1,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), i.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), i.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), i.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), i.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), i.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), i.firstValue().j0());
		assertEquals(BigDecimal.valueOf(8), i.firstValue().k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}]]]");
		assertArrayEquals(new long[] {1,1,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.firstValue().r());
		assertEquals(BigDecimal.valueOf(2), j.firstValue().i());
		assertEquals(BigDecimal.valueOf(3), j.firstValue().j());
		assertEquals(BigDecimal.valueOf(4), j.firstValue().k());
		assertEquals(BigDecimal.valueOf(5), j.firstValue().l());
		assertEquals(BigDecimal.valueOf(6), j.firstValue().i0());
		assertEquals(BigDecimal.valueOf(7), j.firstValue().j0());
		assertEquals(BigDecimal.valueOf(8), j.firstValue().k0());
	}

	@Test
	public void test3d1x1x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2]]]");
		assertArrayEquals(new long[] {2,1,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}]]]");
		assertArrayEquals(new long[] {2,1,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}]]]");
		assertArrayEquals(new long[] {2,1,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}]]]");
		assertArrayEquals(new long[] {2,1,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}]]]");
		assertArrayEquals(new long[] {2,1,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}]]]");
		assertArrayEquals(new long[] {2,1,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}]]]");
		assertArrayEquals(new long[] {2,1,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}]]]");
		assertArrayEquals(new long[] {2,1,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}]]]");
		assertArrayEquals(new long[] {2,1,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}]]]");
		assertArrayEquals(new long[] {2,1,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
	}

	@Test
	public void test3d1x1x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3]]]");
		assertArrayEquals(new long[] {3,1,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}]]]");
		assertArrayEquals(new long[] {3,1,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}]]]");
		assertArrayEquals(new long[] {3,1,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}]]]");
		assertArrayEquals(new long[] {3,1,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}]]]");
		assertArrayEquals(new long[] {3,1,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}]]]");
		assertArrayEquals(new long[] {3,1,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}]]]");
		assertArrayEquals(new long[] {3,1,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}]]]");
		assertArrayEquals(new long[] {3,1,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}]]]");
		assertArrayEquals(new long[] {3,1,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}]]]");
		assertArrayEquals(new long[] {3,1,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
	}

	@Test
	public void test3d1x2x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1][2]]]");
		assertArrayEquals(new long[] {1,2,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}][{2}]]]");
		assertArrayEquals(new long[] {1,2,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}][{3,4}]]]");
		assertArrayEquals(new long[] {1,2,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}][{4,5,6}]]]");
		assertArrayEquals(new long[] {1,2,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}][{5,6,7,8}]]]");
		assertArrayEquals(new long[] {1,2,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}][{6,7,8,9,10}]]]");
		assertArrayEquals(new long[] {1,2,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}][{7,8,9,10,11,12}]]]");
		assertArrayEquals(new long[] {1,2,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}]]]");
		assertArrayEquals(new long[] {1,2,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}]]]");
		assertArrayEquals(new long[] {1,2,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}]]]");
		assertArrayEquals(new long[] {1,2,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
	}

	@Test
	public void test3d1x2x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2][3,4]]]");
		assertArrayEquals(new long[] {2,2,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}][{3},{4}]]]");
		assertArrayEquals(new long[] {2,2,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}][{5,6},{7,8}]]]");
		assertArrayEquals(new long[] {2,2,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}]]]");
		assertArrayEquals(new long[] {2,2,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}]]]");
		assertArrayEquals(new long[] {2,2,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}]]]");
		assertArrayEquals(new long[] {2,2,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}]]]");
		assertArrayEquals(new long[] {2,2,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}]]]");
		assertArrayEquals(new long[] {2,2,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}]]]");
		assertArrayEquals(new long[] {2,2,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {2,2,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
	}

	@Test
	public void test3d1x2x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3][4,5,6]]]");
		assertArrayEquals(new long[] {3,2,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}][{4},{5},{6}]]]");
		assertArrayEquals(new long[] {3,2,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}]]]");
		assertArrayEquals(new long[] {3,2,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}]]]");
		assertArrayEquals(new long[] {3,2,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}]]]");
		assertArrayEquals(new long[] {3,2,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}]]]");
		assertArrayEquals(new long[] {3,2,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {3,2,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]]]");
		assertArrayEquals(new long[] {3,2,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]]]");
		assertArrayEquals(new long[] {3,2,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {3,2,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test3d1x3x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1][2][3]]]");
		assertArrayEquals(new long[] {1,3,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}][{2}][{3}]]]");
		assertArrayEquals(new long[] {1,3,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}][{3,4}][{5,6}]]]");
		assertArrayEquals(new long[] {1,3,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}][{4,5,6}][{7,8,9}]]]");
		assertArrayEquals(new long[] {1,3,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}][{5,6,7,8}][{9,10,11,12}]]]");
		assertArrayEquals(new long[] {1,3,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}][{6,7,8,9,10}][{11,12,13,14,15}]]]");
		assertArrayEquals(new long[] {1,3,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}][{7,8,9,10,11,12}][{13,14,15,16,17,18}]]]");
		assertArrayEquals(new long[] {1,3,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21}]]]");
		assertArrayEquals(new long[] {1,3,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24}]]]");
		assertArrayEquals(new long[] {1,3,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27}]]]");
		assertArrayEquals(new long[] {1,3,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
	}

	@Test
	public void test3d1x3x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2][3,4][5,6]]]");
		assertArrayEquals(new long[] {2,3,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}][{3},{4}][{5},{6}]]]");
		assertArrayEquals(new long[] {2,3,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}][{5,6},{7,8}][{9,10},{11,12}]]]");
		assertArrayEquals(new long[] {2,3,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}][{13,14,15},{16,17,18}]]]");
		assertArrayEquals(new long[] {2,3,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}][{17,18,19,20},{21,22,23,24}]]]");
		assertArrayEquals(new long[] {2,3,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}][{21,22,23,24,25},{26,27,28,29,30}]]]");
		assertArrayEquals(new long[] {2,3,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}][{25,26,27,28,29,30},{31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {2,3,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}][{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]]]");
		assertArrayEquals(new long[] {2,3,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}][{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]]]");
		assertArrayEquals(new long[] {2,3,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}][{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {2,3,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test3d1x3x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3][4,5,6][7,8,9]]]");
		assertArrayEquals(new long[] {3,3,1}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		
		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}][{4},{5},{6}][{7},{8},{9}]]]");
		assertArrayEquals(new long[] {3,3,1}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		
		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}][{13,14},{15,16},{17,18}]]]");
		assertArrayEquals(new long[] {3,3,1}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		
		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}][{19,20,21},{22,23,24},{25,26,27}]]]");
		assertArrayEquals(new long[] {3,3,1}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		
		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}][{25,26,27,28},{29,30,31,32},{33,34,35,36}]]]");
		assertArrayEquals(new long[] {3,3,1}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		
		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}][{31,32,33,34,35},{36,37,38,39,40},{41,42,43,44,45}]]]");
		assertArrayEquals(new long[] {3,3,1}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		
		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}][{37,38,39,40,41,42},{43,44,45,46,47,48},{49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {3,3,1}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		
		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}][{43,44,45,46,47,48,49},{50,51,52,53,54,55,56},{57,58,59,60,61,62,63}]]]");
		assertArrayEquals(new long[] {3,3,1}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		
		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}][{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64},{65,66,67,68,69,70,71,72}]]]");
		assertArrayEquals(new long[] {3,3,1}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		
		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}][{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81}]]]");
		assertArrayEquals(new long[] {3,3,1}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
	}

	@Test
	public void test3d2x1x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1]][[2]]]");
		assertArrayEquals(new long[] {1,1,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}]][[{2}]]]");
		assertArrayEquals(new long[] {1,1,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}]][[{3,4}]]]");
		assertArrayEquals(new long[] {1,1,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}]][[{4,5,6}]]]");
		assertArrayEquals(new long[] {1,1,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}]][[{5,6,7,8}]]]");
		assertArrayEquals(new long[] {1,1,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}]][[{6,7,8,9,10}]]]");
		assertArrayEquals(new long[] {1,1,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}]][[{7,8,9,10,11,12}]]]");
		assertArrayEquals(new long[] {1,1,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}]][[{8,9,10,11,12,13,14}]]]");
		assertArrayEquals(new long[] {1,1,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}]][[{9,10,11,12,13,14,15,16}]]]");
		assertArrayEquals(new long[] {1,1,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}]][[{10,11,12,13,14,15,16,17,18}]]]");
		assertArrayEquals(new long[] {1,1,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
	}

	@Test
	public void test3d2x1x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2]][[3,4]]]");
		assertArrayEquals(new long[] {2,1,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}]][[{3},{4}]]]");
		assertArrayEquals(new long[] {2,1,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}]][[{5,6},{7,8}]]]");
		assertArrayEquals(new long[] {2,1,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}]][[{7,8,9},{10,11,12}]]]");
		assertArrayEquals(new long[] {2,1,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}]][[{9,10,11,12},{13,14,15,16}]]]");
		assertArrayEquals(new long[] {2,1,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}]][[{11,12,13,14,15},{16,17,18,19,20}]]]");
		assertArrayEquals(new long[] {2,1,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}]][[{13,14,15,16,17,18},{19,20,21,22,23,24}]]]");
		assertArrayEquals(new long[] {2,1,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}]][[{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}]]]");
		assertArrayEquals(new long[] {2,1,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}]][[{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}]]]");
		assertArrayEquals(new long[] {2,1,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}]][[{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {2,1,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
	}

	@Test
	public void test3d2x1x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3]][[4,5,6]]]");
		assertArrayEquals(new long[] {3,1,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}]][[{4},{5},{6}]]]");
		assertArrayEquals(new long[] {3,1,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}]][[{7,8},{9,10},{11,12}]]]");
		assertArrayEquals(new long[] {3,1,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}]][[{10,11,12},{13,14,15},{16,17,18}]]]");
		assertArrayEquals(new long[] {3,1,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}]][[{13,14,15,16},{17,18,19,20},{21,22,23,24}]]]");
		assertArrayEquals(new long[] {3,1,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}]][[{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}]]]");
		assertArrayEquals(new long[] {3,1,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}]][[{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {3,1,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}]][[{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]]]");
		assertArrayEquals(new long[] {3,1,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}]][[{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]]]");
		assertArrayEquals(new long[] {3,1,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}]][[{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {3,1,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test3d2x2x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1][2]][[3][4]]]");
		assertArrayEquals(new long[] {1,2,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}][{2}]][[{3}][{4}]]]");
		assertArrayEquals(new long[] {1,2,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}][{3,4}]][[{5,6}][{7,8}]]]");
		assertArrayEquals(new long[] {1,2,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}][{4,5,6}]][[{7,8,9}][{10,11,12}]]]");
		assertArrayEquals(new long[] {1,2,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}][{5,6,7,8}]][[{9,10,11,12}][{13,14,15,16}]]]");
		assertArrayEquals(new long[] {1,2,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}][{6,7,8,9,10}]][[{11,12,13,14,15}][{16,17,18,19,20}]]]");
		assertArrayEquals(new long[] {1,2,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}][{7,8,9,10,11,12}]][[{13,14,15,16,17,18}][{19,20,21,22,23,24}]]]");
		assertArrayEquals(new long[] {1,2,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}]][[{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28}]]]");
		assertArrayEquals(new long[] {1,2,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}]][[{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32}]]]");
		assertArrayEquals(new long[] {1,2,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}]][[{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {1,2,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
	}

	@Test
	public void test3d2x2x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2][3,4]][[5,6][7,8]]]");
		assertArrayEquals(new long[] {2,2,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}][{3},{4}]][[{5},{6}][{7},{8}]]]");
		assertArrayEquals(new long[] {2,2,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}][{5,6},{7,8}]][[{9,10},{11,12}][{13,14},{15,16}]]]");
		assertArrayEquals(new long[] {2,2,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}]][[{13,14,15},{16,17,18}][{19,20,21},{22,23,24}]]]");
		assertArrayEquals(new long[] {2,2,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}]][[{17,18,19,20},{21,22,23,24}][{25,26,27,28},{29,30,31,32}]]]");
		assertArrayEquals(new long[] {2,2,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}]][[{21,22,23,24,25},{26,27,28,29,30}][{31,32,33,34,35},{36,37,38,39,40}]]]");
		assertArrayEquals(new long[] {2,2,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}]][[{25,26,27,28,29,30},{31,32,33,34,35,36}][{37,38,39,40,41,42},{43,44,45,46,47,48}]]]");
		assertArrayEquals(new long[] {2,2,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}]][[{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}][{43,44,45,46,47,48,49},{50,51,52,53,54,55,56}]]]");
		assertArrayEquals(new long[] {2,2,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}]][[{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}][{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64}]]]");
		assertArrayEquals(new long[] {2,2,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}]][[{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}][{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72}]]]");
		assertArrayEquals(new long[] {2,2,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
	}

	@Test
	public void test3d2x2x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3][4,5,6]][[7,8,9][10,11,12]]]");
		assertArrayEquals(new long[] {3,2,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}][{4},{5},{6}]][[{7},{8},{9}][{10},{11},{12}]]]");
		assertArrayEquals(new long[] {3,2,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}]][[{13,14},{15,16},{17,18}][{19,20},{21,22},{23,24}]]]");
		assertArrayEquals(new long[] {3,2,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}]][[{19,20,21},{22,23,24},{25,26,27}][{28,29,30},{31,32,33},{34,35,36}]]]");
		assertArrayEquals(new long[] {3,2,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}]][[{25,26,27,28},{29,30,31,32},{33,34,35,36}][{37,38,39,40},{41,42,43,44},{45,46,47,48}]]]");
		assertArrayEquals(new long[] {3,2,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}]][[{31,32,33,34,35},{36,37,38,39,40},{41,42,43,44,45}][{46,47,48,49,50},{51,52,53,54,55},{56,57,58,59,60}]]]");
		assertArrayEquals(new long[] {3,2,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}]][[{37,38,39,40,41,42},{43,44,45,46,47,48},{49,50,51,52,53,54}][{55,56,57,58,59,60},{61,62,63,64,65,66},{67,68,69,70,71,72}]]]");
		assertArrayEquals(new long[] {3,2,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]][[{43,44,45,46,47,48,49},{50,51,52,53,54,55,56},{57,58,59,60,61,62,63}][{64,65,66,67,68,69,70},{71,72,73,74,75,76,77},{78,79,80,81,82,83,84}]]]");
		assertArrayEquals(new long[] {3,2,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]][[{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64},{65,66,67,68,69,70,71,72}][{73,74,75,76,77,78,79,80},{81,82,83,84,85,86,87,88},{89,90,91,92,93,94,95,96}]]]");
		assertArrayEquals(new long[] {3,2,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]][[{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81}][{82,83,84,85,86,87,88,89,90},{91,92,93,94,95,96,97,98,99},{100,101,102,103,104,105,106,107,108}]]]");
		assertArrayEquals(new long[] {3,2,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
	}

	@Test
	public void test3d2x3x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1][2][3]][[4][5][6]]]");
		assertArrayEquals(new long[] {1,3,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}][{2}][{3}]][[{4}][{5}][{6}]]]");
		assertArrayEquals(new long[] {1,3,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}][{3,4}][{5,6}]][[{7,8}][{9,10}][{11,12}]]]");
		assertArrayEquals(new long[] {1,3,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}][{4,5,6}][{7,8,9}]][[{10,11,12}][{13,14,15}][{16,17,18}]]]");
		assertArrayEquals(new long[] {1,3,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}][{5,6,7,8}][{9,10,11,12}]][[{13,14,15,16}][{17,18,19,20}][{21,22,23,24}]]]");
		assertArrayEquals(new long[] {1,3,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}][{6,7,8,9,10}][{11,12,13,14,15}]][[{16,17,18,19,20}][{21,22,23,24,25}][{26,27,28,29,30}]]]");
		assertArrayEquals(new long[] {1,3,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}][{7,8,9,10,11,12}][{13,14,15,16,17,18}]][[{19,20,21,22,23,24}][{25,26,27,28,29,30}][{31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {1,3,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21}]][[{22,23,24,25,26,27,28}][{29,30,31,32,33,34,35}][{36,37,38,39,40,41,42}]]]");
		assertArrayEquals(new long[] {1,3,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24}]][[{25,26,27,28,29,30,31,32}][{33,34,35,36,37,38,39,40}][{41,42,43,44,45,46,47,48}]]]");
		assertArrayEquals(new long[] {1,3,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27}]][[{28,29,30,31,32,33,34,35,36}][{37,38,39,40,41,42,43,44,45}][{46,47,48,49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {1,3,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test3d2x3x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2][3,4][5,6]][[7,8][9,10][11,12]]]");
		assertArrayEquals(new long[] {2,3,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}][{3},{4}][{5},{6}]][[{7},{8}][{9},{10}][{11},{12}]]]");
		assertArrayEquals(new long[] {2,3,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}][{5,6},{7,8}][{9,10},{11,12}]][[{13,14},{15,16}][{17,18},{19,20}][{21,22},{23,24}]]]");
		assertArrayEquals(new long[] {2,3,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}][{13,14,15},{16,17,18}]][[{19,20,21},{22,23,24}][{25,26,27},{28,29,30}][{31,32,33},{34,35,36}]]]");
		assertArrayEquals(new long[] {2,3,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}][{17,18,19,20},{21,22,23,24]][[{25,26,27,28},{29,30,31,32}][{33,34,35,36},{37,38,39,40}][{41,42,43,44},{45,46,47,48}]]]");
		assertArrayEquals(new long[] {2,3,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}][{21,22,23,24,25},{26,27,28,29,30}]][[{31,32,33,34,35},{36,37,38,39,40}][{41,42,43,44,45},{46,47,48,49,50}][{51,52,53,54,55},{56,57,58,59,60}]]]");
		assertArrayEquals(new long[] {2,3,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}][{25,26,27,28,29,30},{31,32,33,34,35,36}]][[{37,38,39,40,41,42},{43,44,45,46,47,48}][{49,50,51,52,53,54},{55,56,57,58,59,60}][{61,62,63,64,65,66},{67,68,69,70,71,72}]]]");
		assertArrayEquals(new long[] {2,3,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}][{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]][[{43,44,45,46,47,48,49},{50,51,52,53,54,55,56}][{57,58,59,60,61,62,63},{64,65,66,67,68,69,70}][{71,72,73,74,75,76,77},{78,79,80,81,82,83,84}]]]");
		assertArrayEquals(new long[] {2,3,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}][{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]][[{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64}][{65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80}][{81,82,83,84,85,86,87,88},{89,90,91,92,93,94,95,96}]]]");
		assertArrayEquals(new long[] {2,3,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}][{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]][[{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72}][{73,74,75,76,77,78,79,80,81},{82,83,84,85,86,87,88,89,90}][{91,92,93,94,95,96,97,98,99},{100,101,102,103,104,105,106,107,108}]]]");
		assertArrayEquals(new long[] {2,3,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
	}

	@Test
	public void test3d2x3x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3][4,5,6][7,8,9]][[10,11,12][13,14,15][16,17,18]]]");
		assertArrayEquals(new long[] {3,3,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), a.values().get(12).r());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k());
		assertEquals(BigDecimal.ZERO, a.values().get(12).l());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), a.values().get(13).r());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k());
		assertEquals(BigDecimal.ZERO, a.values().get(13).l());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), a.values().get(14).r());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k());
		assertEquals(BigDecimal.ZERO, a.values().get(14).l());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), a.values().get(15).r());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k());
		assertEquals(BigDecimal.ZERO, a.values().get(15).l());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), a.values().get(16).r());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k());
		assertEquals(BigDecimal.ZERO, a.values().get(16).l());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), a.values().get(17).r());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k());
		assertEquals(BigDecimal.ZERO, a.values().get(17).l());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}][{4},{5},{6}][{7},{8},{9}]][[{10},{11},{12}][{13},{14},{15}][{16},{17},{18}]]]");
		assertArrayEquals(new long[] {3,3,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), b.values().get(12).r());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k());
		assertEquals(BigDecimal.ZERO, b.values().get(12).l());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), b.values().get(13).r());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k());
		assertEquals(BigDecimal.ZERO, b.values().get(13).l());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), b.values().get(14).r());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k());
		assertEquals(BigDecimal.ZERO, b.values().get(14).l());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), b.values().get(15).r());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k());
		assertEquals(BigDecimal.ZERO, b.values().get(15).l());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), b.values().get(16).r());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k());
		assertEquals(BigDecimal.ZERO, b.values().get(16).l());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), b.values().get(17).r());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k());
		assertEquals(BigDecimal.ZERO, b.values().get(17).l());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}][{13,14},{15,16},{17,18}]][[{19,20},{21,22},{23,24}][{25,26},{27,28},{29,30}][{31,32},{33,34},{35,36}]]]");
		assertArrayEquals(new long[] {3,3,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(25), c.values().get(12).r());
		assertEquals(BigDecimal.valueOf(26), c.values().get(12).i());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k());
		assertEquals(BigDecimal.ZERO, c.values().get(12).l());
		assertEquals(BigDecimal.ZERO, c.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(27), c.values().get(13).r());
		assertEquals(BigDecimal.valueOf(28), c.values().get(13).i());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k());
		assertEquals(BigDecimal.ZERO, c.values().get(13).l());
		assertEquals(BigDecimal.ZERO, c.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(29), c.values().get(14).r());
		assertEquals(BigDecimal.valueOf(30), c.values().get(14).i());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k());
		assertEquals(BigDecimal.ZERO, c.values().get(14).l());
		assertEquals(BigDecimal.ZERO, c.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(31), c.values().get(15).r());
		assertEquals(BigDecimal.valueOf(32), c.values().get(15).i());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k());
		assertEquals(BigDecimal.ZERO, c.values().get(15).l());
		assertEquals(BigDecimal.ZERO, c.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(33), c.values().get(16).r());
		assertEquals(BigDecimal.valueOf(34), c.values().get(16).i());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k());
		assertEquals(BigDecimal.ZERO, c.values().get(16).l());
		assertEquals(BigDecimal.ZERO, c.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(35), c.values().get(17).r());
		assertEquals(BigDecimal.valueOf(36), c.values().get(17).i());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k());
		assertEquals(BigDecimal.ZERO, c.values().get(17).l());
		assertEquals(BigDecimal.ZERO, c.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}][{19,20,21},{22,23,24},{25,26,27}]][[{28,29,30},{31,32,33},{34,35,36}][{37,38,39},{40,41,42},{43,44,45}][{46,47,48},{49,50,51},{52,53,54}]]]");
		assertArrayEquals(new long[] {3,3,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(37), d.values().get(12).r());
		assertEquals(BigDecimal.valueOf(38), d.values().get(12).i());
		assertEquals(BigDecimal.valueOf(39), d.values().get(12).j());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k());
		assertEquals(BigDecimal.ZERO, d.values().get(12).l());
		assertEquals(BigDecimal.ZERO, d.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(40), d.values().get(13).r());
		assertEquals(BigDecimal.valueOf(41), d.values().get(13).i());
		assertEquals(BigDecimal.valueOf(42), d.values().get(13).j());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k());
		assertEquals(BigDecimal.ZERO, d.values().get(13).l());
		assertEquals(BigDecimal.ZERO, d.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(43), d.values().get(14).r());
		assertEquals(BigDecimal.valueOf(44), d.values().get(14).i());
		assertEquals(BigDecimal.valueOf(45), d.values().get(14).j());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k());
		assertEquals(BigDecimal.ZERO, d.values().get(14).l());
		assertEquals(BigDecimal.ZERO, d.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(46), d.values().get(15).r());
		assertEquals(BigDecimal.valueOf(47), d.values().get(15).i());
		assertEquals(BigDecimal.valueOf(48), d.values().get(15).j());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k());
		assertEquals(BigDecimal.ZERO, d.values().get(15).l());
		assertEquals(BigDecimal.ZERO, d.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(49), d.values().get(16).r());
		assertEquals(BigDecimal.valueOf(50), d.values().get(16).i());
		assertEquals(BigDecimal.valueOf(51), d.values().get(16).j());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k());
		assertEquals(BigDecimal.ZERO, d.values().get(16).l());
		assertEquals(BigDecimal.ZERO, d.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(52), d.values().get(17).r());
		assertEquals(BigDecimal.valueOf(53), d.values().get(17).i());
		assertEquals(BigDecimal.valueOf(54), d.values().get(17).j());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k());
		assertEquals(BigDecimal.ZERO, d.values().get(17).l());
		assertEquals(BigDecimal.ZERO, d.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}][{25,26,27,28},{29,30,31,32},{33,34,35,36}]][[{37,38,39,40},{41,42,43,44},{45,46,47,48}][{49,50,51,52},{53,54,55,56},{57,58,59,60}][{61,62,63,64},{65,66,67,68},{69,70,71,72}]]]");
		assertArrayEquals(new long[] {3,3,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(49), e.values().get(12).r());
		assertEquals(BigDecimal.valueOf(50), e.values().get(12).i());
		assertEquals(BigDecimal.valueOf(51), e.values().get(12).j());
		assertEquals(BigDecimal.valueOf(52), e.values().get(12).k());
		assertEquals(BigDecimal.ZERO, e.values().get(12).l());
		assertEquals(BigDecimal.ZERO, e.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(53), e.values().get(13).r());
		assertEquals(BigDecimal.valueOf(54), e.values().get(13).i());
		assertEquals(BigDecimal.valueOf(55), e.values().get(13).j());
		assertEquals(BigDecimal.valueOf(56), e.values().get(13).k());
		assertEquals(BigDecimal.ZERO, e.values().get(13).l());
		assertEquals(BigDecimal.ZERO, e.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(57), e.values().get(14).r());
		assertEquals(BigDecimal.valueOf(58), e.values().get(14).i());
		assertEquals(BigDecimal.valueOf(59), e.values().get(14).j());
		assertEquals(BigDecimal.valueOf(60), e.values().get(14).k());
		assertEquals(BigDecimal.ZERO, e.values().get(14).l());
		assertEquals(BigDecimal.ZERO, e.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(61), e.values().get(15).r());
		assertEquals(BigDecimal.valueOf(62), e.values().get(15).i());
		assertEquals(BigDecimal.valueOf(63), e.values().get(15).j());
		assertEquals(BigDecimal.valueOf(64), e.values().get(15).k());
		assertEquals(BigDecimal.ZERO, e.values().get(15).l());
		assertEquals(BigDecimal.ZERO, e.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(65), e.values().get(16).r());
		assertEquals(BigDecimal.valueOf(66), e.values().get(16).i());
		assertEquals(BigDecimal.valueOf(67), e.values().get(16).j());
		assertEquals(BigDecimal.valueOf(68), e.values().get(16).k());
		assertEquals(BigDecimal.ZERO, e.values().get(16).l());
		assertEquals(BigDecimal.ZERO, e.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(69), e.values().get(17).r());
		assertEquals(BigDecimal.valueOf(70), e.values().get(17).i());
		assertEquals(BigDecimal.valueOf(71), e.values().get(17).j());
		assertEquals(BigDecimal.valueOf(72), e.values().get(17).k());
		assertEquals(BigDecimal.ZERO, e.values().get(17).l());
		assertEquals(BigDecimal.ZERO, e.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}][{31,32,33,34,35},{36,37,38,39,40},{41,42,43,44,45}]][[{46,47,48,49,50},{51,52,53,54,55},{56,57,58,59,60}][{61,62,63,64,65},{66,67,68,69,70},{71,72,73,74,75}][{76,77,78,79,80},{81,82,83,84,85},{86,87,88,89,90}]]]");
		assertArrayEquals(new long[] {3,3,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(61), f.values().get(12).r());
		assertEquals(BigDecimal.valueOf(62), f.values().get(12).i());
		assertEquals(BigDecimal.valueOf(63), f.values().get(12).j());
		assertEquals(BigDecimal.valueOf(64), f.values().get(12).k());
		assertEquals(BigDecimal.valueOf(65), f.values().get(12).l());
		assertEquals(BigDecimal.ZERO, f.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(66), f.values().get(13).r());
		assertEquals(BigDecimal.valueOf(67), f.values().get(13).i());
		assertEquals(BigDecimal.valueOf(68), f.values().get(13).j());
		assertEquals(BigDecimal.valueOf(69), f.values().get(13).k());
		assertEquals(BigDecimal.valueOf(70), f.values().get(13).l());
		assertEquals(BigDecimal.ZERO, f.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(71), f.values().get(14).r());
		assertEquals(BigDecimal.valueOf(72), f.values().get(14).i());
		assertEquals(BigDecimal.valueOf(73), f.values().get(14).j());
		assertEquals(BigDecimal.valueOf(74), f.values().get(14).k());
		assertEquals(BigDecimal.valueOf(75), f.values().get(14).l());
		assertEquals(BigDecimal.ZERO, f.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(76), f.values().get(15).r());
		assertEquals(BigDecimal.valueOf(77), f.values().get(15).i());
		assertEquals(BigDecimal.valueOf(78), f.values().get(15).j());
		assertEquals(BigDecimal.valueOf(79), f.values().get(15).k());
		assertEquals(BigDecimal.valueOf(80), f.values().get(15).l());
		assertEquals(BigDecimal.ZERO, f.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(81), f.values().get(16).r());
		assertEquals(BigDecimal.valueOf(82), f.values().get(16).i());
		assertEquals(BigDecimal.valueOf(83), f.values().get(16).j());
		assertEquals(BigDecimal.valueOf(84), f.values().get(16).k());
		assertEquals(BigDecimal.valueOf(85), f.values().get(16).l());
		assertEquals(BigDecimal.ZERO, f.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(86), f.values().get(17).r());
		assertEquals(BigDecimal.valueOf(87), f.values().get(17).i());
		assertEquals(BigDecimal.valueOf(88), f.values().get(17).j());
		assertEquals(BigDecimal.valueOf(89), f.values().get(17).k());
		assertEquals(BigDecimal.valueOf(90), f.values().get(17).l());
		assertEquals(BigDecimal.ZERO, f.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}][{37,38,39,40,41,42},{43,44,45,46,47,48}],{49,50,51,52,53,54}][[{55,56,57,58,59,60},{61,62,63,64,65,66},{67,68,69,70,71,72}][{73,74,75,76,77,78},{79,80,81,82,83,84},{85,86,87,88,89,90}][{91,92,93,94,95,96},{97,98,99,100,101,102},{103,104,105,106,107,108}]]]");
		assertArrayEquals(new long[] {3,3,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(73), g.values().get(12).r());
		assertEquals(BigDecimal.valueOf(74), g.values().get(12).i());
		assertEquals(BigDecimal.valueOf(75), g.values().get(12).j());
		assertEquals(BigDecimal.valueOf(76), g.values().get(12).k());
		assertEquals(BigDecimal.valueOf(77), g.values().get(12).l());
		assertEquals(BigDecimal.valueOf(78), g.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(79), g.values().get(13).r());
		assertEquals(BigDecimal.valueOf(80), g.values().get(13).i());
		assertEquals(BigDecimal.valueOf(81), g.values().get(13).j());
		assertEquals(BigDecimal.valueOf(82), g.values().get(13).k());
		assertEquals(BigDecimal.valueOf(83), g.values().get(13).l());
		assertEquals(BigDecimal.valueOf(84), g.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(85), g.values().get(14).r());
		assertEquals(BigDecimal.valueOf(86), g.values().get(14).i());
		assertEquals(BigDecimal.valueOf(87), g.values().get(14).j());
		assertEquals(BigDecimal.valueOf(88), g.values().get(14).k());
		assertEquals(BigDecimal.valueOf(89), g.values().get(14).l());
		assertEquals(BigDecimal.valueOf(90), g.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(91), g.values().get(15).r());
		assertEquals(BigDecimal.valueOf(92), g.values().get(15).i());
		assertEquals(BigDecimal.valueOf(93), g.values().get(15).j());
		assertEquals(BigDecimal.valueOf(94), g.values().get(15).k());
		assertEquals(BigDecimal.valueOf(95), g.values().get(15).l());
		assertEquals(BigDecimal.valueOf(96), g.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(97), g.values().get(16).r());
		assertEquals(BigDecimal.valueOf(98), g.values().get(16).i());
		assertEquals(BigDecimal.valueOf(99), g.values().get(16).j());
		assertEquals(BigDecimal.valueOf(100), g.values().get(16).k());
		assertEquals(BigDecimal.valueOf(101), g.values().get(16).l());
		assertEquals(BigDecimal.valueOf(102), g.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(103), g.values().get(17).r());
		assertEquals(BigDecimal.valueOf(104), g.values().get(17).i());
		assertEquals(BigDecimal.valueOf(105), g.values().get(17).j());
		assertEquals(BigDecimal.valueOf(106), g.values().get(17).k());
		assertEquals(BigDecimal.valueOf(107), g.values().get(17).l());
		assertEquals(BigDecimal.valueOf(108), g.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}][{43,44,45,46,47,48,49},{50,51,52,53,54,55,56},{57,58,59,60,61,62,63}]][[{64,65,66,67,68,69,70},{71,72,73,74,75,76,77},{78,79,80,81,82,83,84}][{85,86,87,88,89,90,91},{92,93,94,95,96,97,98},{99,100,101,102,103,104,105}][{106,107,108,109,110,111,112},{113,114,115,116,117,118,119},{120,121,122,123,124,125,126}]]]");
		assertArrayEquals(new long[] {3,3,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(85), h.values().get(12).r());
		assertEquals(BigDecimal.valueOf(86), h.values().get(12).i());
		assertEquals(BigDecimal.valueOf(87), h.values().get(12).j());
		assertEquals(BigDecimal.valueOf(88), h.values().get(12).k());
		assertEquals(BigDecimal.valueOf(89), h.values().get(12).l());
		assertEquals(BigDecimal.valueOf(90), h.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(91), h.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(92), h.values().get(13).r());
		assertEquals(BigDecimal.valueOf(93), h.values().get(13).i());
		assertEquals(BigDecimal.valueOf(94), h.values().get(13).j());
		assertEquals(BigDecimal.valueOf(95), h.values().get(13).k());
		assertEquals(BigDecimal.valueOf(96), h.values().get(13).l());
		assertEquals(BigDecimal.valueOf(97), h.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(98), h.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(99), h.values().get(14).r());
		assertEquals(BigDecimal.valueOf(100), h.values().get(14).i());
		assertEquals(BigDecimal.valueOf(101), h.values().get(14).j());
		assertEquals(BigDecimal.valueOf(102), h.values().get(14).k());
		assertEquals(BigDecimal.valueOf(103), h.values().get(14).l());
		assertEquals(BigDecimal.valueOf(104), h.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(105), h.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(106), h.values().get(15).r());
		assertEquals(BigDecimal.valueOf(107), h.values().get(15).i());
		assertEquals(BigDecimal.valueOf(108), h.values().get(15).j());
		assertEquals(BigDecimal.valueOf(109), h.values().get(15).k());
		assertEquals(BigDecimal.valueOf(110), h.values().get(15).l());
		assertEquals(BigDecimal.valueOf(111), h.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(112), h.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(113), h.values().get(16).r());
		assertEquals(BigDecimal.valueOf(114), h.values().get(16).i());
		assertEquals(BigDecimal.valueOf(115), h.values().get(16).j());
		assertEquals(BigDecimal.valueOf(116), h.values().get(16).k());
		assertEquals(BigDecimal.valueOf(117), h.values().get(16).l());
		assertEquals(BigDecimal.valueOf(118), h.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(119), h.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(120), h.values().get(17).r());
		assertEquals(BigDecimal.valueOf(121), h.values().get(17).i());
		assertEquals(BigDecimal.valueOf(122), h.values().get(17).j());
		assertEquals(BigDecimal.valueOf(123), h.values().get(17).k());
		assertEquals(BigDecimal.valueOf(124), h.values().get(17).l());
		assertEquals(BigDecimal.valueOf(125), h.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(126), h.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(17).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}][{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64},{65,66,67,68,69,70,71,72}]][[{73,74,75,76,77,78,79,80},{81,82,83,84,85,86,87,88},{89,90,91,92,93,94,95,96}][{97,98,99,100,101,102,103,104},{105,106,107,108,109,110,111,112},{113,114,115,116,117,118,119,120}][{121,122,123,124,125,126,127,128},{129,130,131,132,133,134,135,136},{137,138,139,140,141,142,143,144}]]]");
		assertArrayEquals(new long[] {3,3,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(97), i.values().get(12).r());
		assertEquals(BigDecimal.valueOf(98), i.values().get(12).i());
		assertEquals(BigDecimal.valueOf(99), i.values().get(12).j());
		assertEquals(BigDecimal.valueOf(100), i.values().get(12).k());
		assertEquals(BigDecimal.valueOf(101), i.values().get(12).l());
		assertEquals(BigDecimal.valueOf(102), i.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(103), i.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(104), i.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(105), i.values().get(13).r());
		assertEquals(BigDecimal.valueOf(106), i.values().get(13).i());
		assertEquals(BigDecimal.valueOf(107), i.values().get(13).j());
		assertEquals(BigDecimal.valueOf(108), i.values().get(13).k());
		assertEquals(BigDecimal.valueOf(109), i.values().get(13).l());
		assertEquals(BigDecimal.valueOf(110), i.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(111), i.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(112), i.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(113), i.values().get(14).r());
		assertEquals(BigDecimal.valueOf(114), i.values().get(14).i());
		assertEquals(BigDecimal.valueOf(115), i.values().get(14).j());
		assertEquals(BigDecimal.valueOf(116), i.values().get(14).k());
		assertEquals(BigDecimal.valueOf(117), i.values().get(14).l());
		assertEquals(BigDecimal.valueOf(118), i.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(119), i.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(120), i.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(121), i.values().get(15).r());
		assertEquals(BigDecimal.valueOf(122), i.values().get(15).i());
		assertEquals(BigDecimal.valueOf(123), i.values().get(15).j());
		assertEquals(BigDecimal.valueOf(124), i.values().get(15).k());
		assertEquals(BigDecimal.valueOf(125), i.values().get(15).l());
		assertEquals(BigDecimal.valueOf(126), i.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(127), i.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(128), i.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(129), i.values().get(16).r());
		assertEquals(BigDecimal.valueOf(130), i.values().get(16).i());
		assertEquals(BigDecimal.valueOf(131), i.values().get(16).j());
		assertEquals(BigDecimal.valueOf(132), i.values().get(16).k());
		assertEquals(BigDecimal.valueOf(133), i.values().get(16).l());
		assertEquals(BigDecimal.valueOf(134), i.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(135), i.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(136), i.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(137), i.values().get(17).r());
		assertEquals(BigDecimal.valueOf(138), i.values().get(17).i());
		assertEquals(BigDecimal.valueOf(139), i.values().get(17).j());
		assertEquals(BigDecimal.valueOf(140), i.values().get(17).k());
		assertEquals(BigDecimal.valueOf(141), i.values().get(17).l());
		assertEquals(BigDecimal.valueOf(142), i.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(143), i.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(144), i.values().get(17).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}][{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81}]][[{82,83,84,85,86,87,88,89,90},{91,92,93,94,95,96,97,98,99},{100,101,102,103,104,105,106,107,108}][{109,110,111,112,113,114,115,116,117},{118,119,120,121,122,123,124,125,126},{127,128,129,130,131,132,133,134,135}][{136,137,138,139,140,141,142,143,144},{145,146,147,148,149,150,151,152,153},{154,155,156,157,158,159,160,161,162}]]]");
		assertArrayEquals(new long[] {3,3,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(109), j.values().get(12).r());
		assertEquals(BigDecimal.valueOf(110), j.values().get(12).i());
		assertEquals(BigDecimal.valueOf(111), j.values().get(12).j());
		assertEquals(BigDecimal.valueOf(112), j.values().get(12).k());
		assertEquals(BigDecimal.valueOf(113), j.values().get(12).l());
		assertEquals(BigDecimal.valueOf(114), j.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(115), j.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(116), j.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(118), j.values().get(13).r());
		assertEquals(BigDecimal.valueOf(119), j.values().get(13).i());
		assertEquals(BigDecimal.valueOf(120), j.values().get(13).j());
		assertEquals(BigDecimal.valueOf(121), j.values().get(13).k());
		assertEquals(BigDecimal.valueOf(122), j.values().get(13).l());
		assertEquals(BigDecimal.valueOf(123), j.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(124), j.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(125), j.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(127), j.values().get(14).r());
		assertEquals(BigDecimal.valueOf(128), j.values().get(14).i());
		assertEquals(BigDecimal.valueOf(129), j.values().get(14).j());
		assertEquals(BigDecimal.valueOf(130), j.values().get(14).k());
		assertEquals(BigDecimal.valueOf(131), j.values().get(14).l());
		assertEquals(BigDecimal.valueOf(132), j.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(133), j.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(134), j.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(136), j.values().get(15).r());
		assertEquals(BigDecimal.valueOf(137), j.values().get(15).i());
		assertEquals(BigDecimal.valueOf(138), j.values().get(15).j());
		assertEquals(BigDecimal.valueOf(139), j.values().get(15).k());
		assertEquals(BigDecimal.valueOf(140), j.values().get(15).l());
		assertEquals(BigDecimal.valueOf(141), j.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(142), j.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(143), j.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(145), j.values().get(16).r());
		assertEquals(BigDecimal.valueOf(146), j.values().get(16).i());
		assertEquals(BigDecimal.valueOf(147), j.values().get(16).j());
		assertEquals(BigDecimal.valueOf(148), j.values().get(16).k());
		assertEquals(BigDecimal.valueOf(149), j.values().get(16).l());
		assertEquals(BigDecimal.valueOf(150), j.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(151), j.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(152), j.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(154), j.values().get(17).r());
		assertEquals(BigDecimal.valueOf(155), j.values().get(17).i());
		assertEquals(BigDecimal.valueOf(156), j.values().get(17).j());
		assertEquals(BigDecimal.valueOf(157), j.values().get(17).k());
		assertEquals(BigDecimal.valueOf(158), j.values().get(17).l());
		assertEquals(BigDecimal.valueOf(159), j.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(160), j.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(161), j.values().get(17).k0());
	}

	@Test
	public void test3d3x1x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1]][[2]][[3]]]");
		assertArrayEquals(new long[] {1,1,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}]][[{2}]][[{3}]]]");
		assertArrayEquals(new long[] {1,1,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}]][[{3,4}]][[{5,6}]]]");
		assertArrayEquals(new long[] {1,1,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}]][[{4,5,6}]][[{7,8,9}]]]");
		assertArrayEquals(new long[] {1,1,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}]][[{5,6,7,8}]][[{9,10,11,12}]]]");
		assertArrayEquals(new long[] {1,1,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}]][[{6,7,8,9,10}]][[{11,12,13,14,15}]]]");
		assertArrayEquals(new long[] {1,1,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}]][[{7,8,9,10,11,12}]][[{13,14,15,16,17,18}]]]");
		assertArrayEquals(new long[] {1,1,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}]][[{8,9,10,11,12,13,14}]][[{15,16,17,18,19,20,21}]]]");
		assertArrayEquals(new long[] {1,1,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}]][[{9,10,11,12,13,14,15,16}]][[{17,18,19,20,21,22,23,24}]]]");
		assertArrayEquals(new long[] {1,1,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}]][[{10,11,12,13,14,15,16,17,18}]][[{19,20,21,22,23,24,25,26,27}]]]");
		assertArrayEquals(new long[] {1,1,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
	}

	@Test
	public void test3d3x1x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2]][[3,4]][[5,6]]]");
		assertArrayEquals(new long[] {2,1,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}]][[{3},{4}]][[{5},{6}]]]");
		assertArrayEquals(new long[] {2,1,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}]][[{5,6},{7,8}]][[{9,10},{11,12}]]]");
		assertArrayEquals(new long[] {2,1,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}]][[{7,8,9},{10,11,12}]][[{13,14,15},{16,17,18}]]]");
		assertArrayEquals(new long[] {2,1,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}]][[{9,10,11,12},{13,14,15,16}]][[{17,18,19,20},{21,22,23,24}]]]");
		assertArrayEquals(new long[] {2,1,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}]][[{11,12,13,14,15},{16,17,18,19,20}]][[{21,22,23,24,25},{26,27,28,29,30}]]]");
		assertArrayEquals(new long[] {2,1,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}]][[{13,14,15,16,17,18},{19,20,21,22,23,24}]][[{25,26,27,28,29,30},{31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {2,1,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}]][[{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}]][[{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]]]");
		assertArrayEquals(new long[] {2,1,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}]][[{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}]][[{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]]]");
		assertArrayEquals(new long[] {2,1,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}]][[{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}]][[{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {2,1,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test3d3x1x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3]][[4,5,6]][[7,8,9]]]");
		assertArrayEquals(new long[] {3,1,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		
		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}]][[{4},{5},{6}]][[{7},{8},{9}]]]");
		assertArrayEquals(new long[] {3,1,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		
		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}]][[{7,8},{9,10},{11,12}]][[{13,14},{15,16},{17,18}]]]");
		assertArrayEquals(new long[] {3,1,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		
		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}]][[{10,11,12},{13,14,15},{16,17,18}]][[{19,20,21},{22,23,24},{25,26,27}]]]");
		assertArrayEquals(new long[] {3,1,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		
		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}]][[{13,14,15,16},{17,18,19,20},{21,22,23,24}]][[{25,26,27,28},{29,30,31,32},{33,34,35,36}]]]");
		assertArrayEquals(new long[] {3,1,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		
		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}]][[{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}]][[{31,32,33,34,35},{36,37,38,39,40},{41,42,43,44,45}]]]");
		assertArrayEquals(new long[] {3,1,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		
		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}]][[{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}]][[{37,38,39,40,41,42},{43,44,45,46,47,48},{49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {3,1,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		
		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}]][[{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]][[{43,44,45,46,47,48,49},{50,51,52,53,54,55,56},{57,58,59,60,61,62,63}]]]");
		assertArrayEquals(new long[] {3,1,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		
		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}]][[{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]][[{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64},{65,66,67,68,69,70,71,72}]]]");
		assertArrayEquals(new long[] {3,1,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		
		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}]][[{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]][[{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81}]]]");
		assertArrayEquals(new long[] {3,1,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
	}

	@Test
	public void test3d3x2x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1][2]][[3][4]][[5][6]]]");
		assertArrayEquals(new long[] {1,2,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}][{2}]][[{3}][{4}]][[{5}][{6}]]]");
		assertArrayEquals(new long[] {1,2,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}][{3,4}]][[{5,6}][{7,8}]][[{9,10}][{11,12}]]]");
		assertArrayEquals(new long[] {1,2,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}][{4,5,6}]][[{7,8,9}][{10,11,12}]][[{13,14,15}][{16,17,18}]]]");
		assertArrayEquals(new long[] {1,2,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}][{5,6,7,8}]][[{9,10,11,12}][{13,14,15,16}]][[{17,18,19,20}][{21,22,23,24}]]]");
		assertArrayEquals(new long[] {1,2,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}][{6,7,8,9,10}]][[{11,12,13,14,15}][{16,17,18,19,20}]][[{21,22,23,24,25}][{26,27,28,29,30}]]]");
		assertArrayEquals(new long[] {1,2,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}][{7,8,9,10,11,12}]][[{13,14,15,16,17,18}][{19,20,21,22,23,24}]][[{25,26,27,28,29,30}][{31,32,33,34,35,36}]]]");
		assertArrayEquals(new long[] {1,2,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}]][[{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28}]][[{29,30,31,32,33,34,35}][{36,37,38,39,40,41,42}]]]");
		assertArrayEquals(new long[] {1,2,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}]][[{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32}]][[{33,34,35,36,37,38,39,40}][{41,42,43,44,45,46,47,48}]]]");
		assertArrayEquals(new long[] {1,2,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}]][[{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36}]][[{37,38,39,40,41,42,43,44,45}][{46,47,48,49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {1,2,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
	}

	@Test
	public void test3d3x2x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2][3,4]][[5,6][7,8]][[9,10][11,12]]]");
		assertArrayEquals(new long[] {2,2,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}][{3},{4}]][[{5},{6}][{7},{8}]][[{9},{10}][{11},{12}]]]");
		assertArrayEquals(new long[] {2,2,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}][{5,6},{7,8}]][[{9,10},{11,12}][{13,14},{15,16}]][[{17,18},{19,20}][{21,22},{23,24}]]]");
		assertArrayEquals(new long[] {2,2,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}]][[{13,14,15},{16,17,18}][{19,20,21},{22,23,24}]][[{25,26,27},{28,29,30}][{31,32,33},{34,35,36}]]]");
		assertArrayEquals(new long[] {2,2,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}]][[{17,18,19,20},{21,22,23,24}][{25,26,27,28},{29,30,31,32}]][[{33,34,35,36},{37,38,39,40}][{41,42,43,44},{45,46,47,48}]]]");
		assertArrayEquals(new long[] {2,2,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}]][[{21,22,23,24,25},{26,27,28,29,30}][{31,32,33,34,35},{36,37,38,39,40}]][[{41,42,43,44,45},{46,47,48,49,50}][{51,52,53,54,55},{56,57,58,59,60}]]]");
		assertArrayEquals(new long[] {2,2,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}]][[{25,26,27,28,29,30},{31,32,33,34,35,36}][{37,38,39,40,41,42},{43,44,45,46,47,48}]][[{49,50,51,52,53,54},{55,56,57,58,59,60}][{61,62,63,64,65,66},{67,68,69,70,71,72}]]]");
		assertArrayEquals(new long[] {2,2,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}]][[{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}][{43,44,45,46,47,48,49},{50,51,52,53,54,55,56}]][[{57,58,59,60,61,62,63},{64,65,66,67,68,69,70}][{71,72,73,74,75,76,77},{78,79,80,81,82,83,84}]]]");
		assertArrayEquals(new long[] {2,2,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}]][[{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}][{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64}]][[{65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80}][{81,82,83,84,85,86,87,88},{89,90,91,92,93,94,95,96}]]]");
		assertArrayEquals(new long[] {2,2,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}]][[{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}][{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72}]][[{73,74,75,76,77,78,79,80,81},{82,83,84,85,86,87,88,89,90}][{91,92,93,94,95,96,97,98,99},{100,101,102,103,104,105,106,107,108}]]]");
		assertArrayEquals(new long[] {2,2,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
	}

	@Test
	public void test3d3x2x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3][4,5,6]][[7,8,9][10,11,12]][[13,14,15][16,17,18]]]");
		assertArrayEquals(new long[] {3,2,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), a.values().get(12).r());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k());
		assertEquals(BigDecimal.ZERO, a.values().get(12).l());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), a.values().get(13).r());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k());
		assertEquals(BigDecimal.ZERO, a.values().get(13).l());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), a.values().get(14).r());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k());
		assertEquals(BigDecimal.ZERO, a.values().get(14).l());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), a.values().get(15).r());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k());
		assertEquals(BigDecimal.ZERO, a.values().get(15).l());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), a.values().get(16).r());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k());
		assertEquals(BigDecimal.ZERO, a.values().get(16).l());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), a.values().get(17).r());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k());
		assertEquals(BigDecimal.ZERO, a.values().get(17).l());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}][{4},{5},{6}]][[{7},{8},{9}][{10},{11},{12}]][[{13},{14},{15}][{16},{17},{18}]]]");
		assertArrayEquals(new long[] {3,2,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), b.values().get(12).r());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k());
		assertEquals(BigDecimal.ZERO, b.values().get(12).l());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), b.values().get(13).r());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k());
		assertEquals(BigDecimal.ZERO, b.values().get(13).l());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), b.values().get(14).r());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k());
		assertEquals(BigDecimal.ZERO, b.values().get(14).l());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), b.values().get(15).r());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k());
		assertEquals(BigDecimal.ZERO, b.values().get(15).l());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), b.values().get(16).r());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k());
		assertEquals(BigDecimal.ZERO, b.values().get(16).l());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), b.values().get(17).r());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k());
		assertEquals(BigDecimal.ZERO, b.values().get(17).l());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}]][[{13,14},{15,16},{17,18}][{19,20},{21,22},{23,24}]][[{25,26},{27,28},{29,30}][{31,32},{33,34},{35,36}]]]");
		assertArrayEquals(new long[] {3,2,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(25), c.values().get(12).r());
		assertEquals(BigDecimal.valueOf(26), c.values().get(12).i());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k());
		assertEquals(BigDecimal.ZERO, c.values().get(12).l());
		assertEquals(BigDecimal.ZERO, c.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(27), c.values().get(13).r());
		assertEquals(BigDecimal.valueOf(28), c.values().get(13).i());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k());
		assertEquals(BigDecimal.ZERO, c.values().get(13).l());
		assertEquals(BigDecimal.ZERO, c.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(29), c.values().get(14).r());
		assertEquals(BigDecimal.valueOf(30), c.values().get(14).i());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k());
		assertEquals(BigDecimal.ZERO, c.values().get(14).l());
		assertEquals(BigDecimal.ZERO, c.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(31), c.values().get(15).r());
		assertEquals(BigDecimal.valueOf(32), c.values().get(15).i());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k());
		assertEquals(BigDecimal.ZERO, c.values().get(15).l());
		assertEquals(BigDecimal.ZERO, c.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(33), c.values().get(16).r());
		assertEquals(BigDecimal.valueOf(34), c.values().get(16).i());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k());
		assertEquals(BigDecimal.ZERO, c.values().get(16).l());
		assertEquals(BigDecimal.ZERO, c.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(35), c.values().get(17).r());
		assertEquals(BigDecimal.valueOf(36), c.values().get(17).i());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k());
		assertEquals(BigDecimal.ZERO, c.values().get(17).l());
		assertEquals(BigDecimal.ZERO, c.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}]][[{19,20,21},{22,23,24},{25,26,27}][{28,29,30},{31,32,33},{34,35,36}]][[{37,38,39},{40,41,42},{43,44,45}][{46,47,48},{49,50,51},{52,53,54}]]]");
		assertArrayEquals(new long[] {3,2,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(37), d.values().get(12).r());
		assertEquals(BigDecimal.valueOf(38), d.values().get(12).i());
		assertEquals(BigDecimal.valueOf(39), d.values().get(12).j());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k());
		assertEquals(BigDecimal.ZERO, d.values().get(12).l());
		assertEquals(BigDecimal.ZERO, d.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(40), d.values().get(13).r());
		assertEquals(BigDecimal.valueOf(41), d.values().get(13).i());
		assertEquals(BigDecimal.valueOf(42), d.values().get(13).j());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k());
		assertEquals(BigDecimal.ZERO, d.values().get(13).l());
		assertEquals(BigDecimal.ZERO, d.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(43), d.values().get(14).r());
		assertEquals(BigDecimal.valueOf(44), d.values().get(14).i());
		assertEquals(BigDecimal.valueOf(45), d.values().get(14).j());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k());
		assertEquals(BigDecimal.ZERO, d.values().get(14).l());
		assertEquals(BigDecimal.ZERO, d.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(46), d.values().get(15).r());
		assertEquals(BigDecimal.valueOf(47), d.values().get(15).i());
		assertEquals(BigDecimal.valueOf(48), d.values().get(15).j());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k());
		assertEquals(BigDecimal.ZERO, d.values().get(15).l());
		assertEquals(BigDecimal.ZERO, d.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(49), d.values().get(16).r());
		assertEquals(BigDecimal.valueOf(50), d.values().get(16).i());
		assertEquals(BigDecimal.valueOf(51), d.values().get(16).j());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k());
		assertEquals(BigDecimal.ZERO, d.values().get(16).l());
		assertEquals(BigDecimal.ZERO, d.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(52), d.values().get(17).r());
		assertEquals(BigDecimal.valueOf(53), d.values().get(17).i());
		assertEquals(BigDecimal.valueOf(54), d.values().get(17).j());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k());
		assertEquals(BigDecimal.ZERO, d.values().get(17).l());
		assertEquals(BigDecimal.ZERO, d.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}]][[{25,26,27,28},{29,30,31,32},{33,34,35,36}][{37,38,39,40},{41,42,43,44},{45,46,47,48}]][[{49,50,51,52},{53,54,55,56},{57,58,59,60}][{61,62,63,64},{65,66,67,68},{69,70,71,72}]]]");
		assertArrayEquals(new long[] {3,2,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(49), e.values().get(12).r());
		assertEquals(BigDecimal.valueOf(50), e.values().get(12).i());
		assertEquals(BigDecimal.valueOf(51), e.values().get(12).j());
		assertEquals(BigDecimal.valueOf(52), e.values().get(12).k());
		assertEquals(BigDecimal.ZERO, e.values().get(12).l());
		assertEquals(BigDecimal.ZERO, e.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(53), e.values().get(13).r());
		assertEquals(BigDecimal.valueOf(54), e.values().get(13).i());
		assertEquals(BigDecimal.valueOf(55), e.values().get(13).j());
		assertEquals(BigDecimal.valueOf(56), e.values().get(13).k());
		assertEquals(BigDecimal.ZERO, e.values().get(13).l());
		assertEquals(BigDecimal.ZERO, e.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(57), e.values().get(14).r());
		assertEquals(BigDecimal.valueOf(58), e.values().get(14).i());
		assertEquals(BigDecimal.valueOf(59), e.values().get(14).j());
		assertEquals(BigDecimal.valueOf(60), e.values().get(14).k());
		assertEquals(BigDecimal.ZERO, e.values().get(14).l());
		assertEquals(BigDecimal.ZERO, e.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(61), e.values().get(15).r());
		assertEquals(BigDecimal.valueOf(62), e.values().get(15).i());
		assertEquals(BigDecimal.valueOf(63), e.values().get(15).j());
		assertEquals(BigDecimal.valueOf(64), e.values().get(15).k());
		assertEquals(BigDecimal.ZERO, e.values().get(15).l());
		assertEquals(BigDecimal.ZERO, e.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(65), e.values().get(16).r());
		assertEquals(BigDecimal.valueOf(66), e.values().get(16).i());
		assertEquals(BigDecimal.valueOf(67), e.values().get(16).j());
		assertEquals(BigDecimal.valueOf(68), e.values().get(16).k());
		assertEquals(BigDecimal.ZERO, e.values().get(16).l());
		assertEquals(BigDecimal.ZERO, e.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(69), e.values().get(17).r());
		assertEquals(BigDecimal.valueOf(70), e.values().get(17).i());
		assertEquals(BigDecimal.valueOf(71), e.values().get(17).j());
		assertEquals(BigDecimal.valueOf(72), e.values().get(17).k());
		assertEquals(BigDecimal.ZERO, e.values().get(17).l());
		assertEquals(BigDecimal.ZERO, e.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}]][[{31,32,33,34,35},{36,37,38,39,40},{41,42,43,44,45}][{46,47,48,49,50},{51,52,53,54,55},{56,57,58,59,60}]][[{61,62,63,64,65},{66,67,68,69,70},{71,72,73,74,75}][{76,77,78,79,80},{81,82,83,84,85},{86,87,88,89,90}]]]");
		assertArrayEquals(new long[] {3,2,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(61), f.values().get(12).r());
		assertEquals(BigDecimal.valueOf(62), f.values().get(12).i());
		assertEquals(BigDecimal.valueOf(63), f.values().get(12).j());
		assertEquals(BigDecimal.valueOf(64), f.values().get(12).k());
		assertEquals(BigDecimal.valueOf(65), f.values().get(12).l());
		assertEquals(BigDecimal.ZERO, f.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(66), f.values().get(13).r());
		assertEquals(BigDecimal.valueOf(67), f.values().get(13).i());
		assertEquals(BigDecimal.valueOf(68), f.values().get(13).j());
		assertEquals(BigDecimal.valueOf(69), f.values().get(13).k());
		assertEquals(BigDecimal.valueOf(70), f.values().get(13).l());
		assertEquals(BigDecimal.ZERO, f.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(71), f.values().get(14).r());
		assertEquals(BigDecimal.valueOf(72), f.values().get(14).i());
		assertEquals(BigDecimal.valueOf(73), f.values().get(14).j());
		assertEquals(BigDecimal.valueOf(74), f.values().get(14).k());
		assertEquals(BigDecimal.valueOf(75), f.values().get(14).l());
		assertEquals(BigDecimal.ZERO, f.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(76), f.values().get(15).r());
		assertEquals(BigDecimal.valueOf(77), f.values().get(15).i());
		assertEquals(BigDecimal.valueOf(78), f.values().get(15).j());
		assertEquals(BigDecimal.valueOf(79), f.values().get(15).k());
		assertEquals(BigDecimal.valueOf(80), f.values().get(15).l());
		assertEquals(BigDecimal.ZERO, f.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(81), f.values().get(16).r());
		assertEquals(BigDecimal.valueOf(82), f.values().get(16).i());
		assertEquals(BigDecimal.valueOf(83), f.values().get(16).j());
		assertEquals(BigDecimal.valueOf(84), f.values().get(16).k());
		assertEquals(BigDecimal.valueOf(85), f.values().get(16).l());
		assertEquals(BigDecimal.ZERO, f.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(86), f.values().get(17).r());
		assertEquals(BigDecimal.valueOf(87), f.values().get(17).i());
		assertEquals(BigDecimal.valueOf(88), f.values().get(17).j());
		assertEquals(BigDecimal.valueOf(89), f.values().get(17).k());
		assertEquals(BigDecimal.valueOf(90), f.values().get(17).l());
		assertEquals(BigDecimal.ZERO, f.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}]][[{37,38,39,40,41,42},{43,44,45,46,47,48},{49,50,51,52,53,54}][{55,56,57,58,59,60},{61,62,63,64,65,66},{67,68,69,70,71,72}]][[{73,74,75,76,77,78},{79,80,81,82,83,84},{85,86,87,88,89,90}][{91,92,93,94,95,96},{97,98,99,100,101,102},{103,104,105,106,107,108}]]]");
		assertArrayEquals(new long[] {3,2,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(73), g.values().get(12).r());
		assertEquals(BigDecimal.valueOf(74), g.values().get(12).i());
		assertEquals(BigDecimal.valueOf(75), g.values().get(12).j());
		assertEquals(BigDecimal.valueOf(76), g.values().get(12).k());
		assertEquals(BigDecimal.valueOf(77), g.values().get(12).l());
		assertEquals(BigDecimal.valueOf(78), g.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(79), g.values().get(13).r());
		assertEquals(BigDecimal.valueOf(80), g.values().get(13).i());
		assertEquals(BigDecimal.valueOf(81), g.values().get(13).j());
		assertEquals(BigDecimal.valueOf(82), g.values().get(13).k());
		assertEquals(BigDecimal.valueOf(83), g.values().get(13).l());
		assertEquals(BigDecimal.valueOf(84), g.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(85), g.values().get(14).r());
		assertEquals(BigDecimal.valueOf(86), g.values().get(14).i());
		assertEquals(BigDecimal.valueOf(87), g.values().get(14).j());
		assertEquals(BigDecimal.valueOf(88), g.values().get(14).k());
		assertEquals(BigDecimal.valueOf(89), g.values().get(14).l());
		assertEquals(BigDecimal.valueOf(90), g.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(91), g.values().get(15).r());
		assertEquals(BigDecimal.valueOf(92), g.values().get(15).i());
		assertEquals(BigDecimal.valueOf(93), g.values().get(15).j());
		assertEquals(BigDecimal.valueOf(94), g.values().get(15).k());
		assertEquals(BigDecimal.valueOf(95), g.values().get(15).l());
		assertEquals(BigDecimal.valueOf(96), g.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(97), g.values().get(16).r());
		assertEquals(BigDecimal.valueOf(98), g.values().get(16).i());
		assertEquals(BigDecimal.valueOf(99), g.values().get(16).j());
		assertEquals(BigDecimal.valueOf(100), g.values().get(16).k());
		assertEquals(BigDecimal.valueOf(101), g.values().get(16).l());
		assertEquals(BigDecimal.valueOf(102), g.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(103), g.values().get(17).r());
		assertEquals(BigDecimal.valueOf(104), g.values().get(17).i());
		assertEquals(BigDecimal.valueOf(105), g.values().get(17).j());
		assertEquals(BigDecimal.valueOf(106), g.values().get(17).k());
		assertEquals(BigDecimal.valueOf(107), g.values().get(17).l());
		assertEquals(BigDecimal.valueOf(108), g.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]][[{43,44,45,46,47,48,49},{50,51,52,53,54,55,56},{57,58,59,60,61,62,63}][{64,65,66,67,68,69,70},{71,72,73,74,75,76,77},{78,79,80,81,82,83,84}]][[{85,86,87,88,89,90,91},{92,93,94,95,96,97,98},{99,100,101,102,103,104,105}][{106,107,108,109,110,111,112},{113,114,115,116,117,118,119},{120,121,122,123,124,125,126}]]]");
		assertArrayEquals(new long[] {3,2,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(85), h.values().get(12).r());
		assertEquals(BigDecimal.valueOf(86), h.values().get(12).i());
		assertEquals(BigDecimal.valueOf(87), h.values().get(12).j());
		assertEquals(BigDecimal.valueOf(88), h.values().get(12).k());
		assertEquals(BigDecimal.valueOf(89), h.values().get(12).l());
		assertEquals(BigDecimal.valueOf(90), h.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(91), h.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(92), h.values().get(13).r());
		assertEquals(BigDecimal.valueOf(93), h.values().get(13).i());
		assertEquals(BigDecimal.valueOf(94), h.values().get(13).j());
		assertEquals(BigDecimal.valueOf(95), h.values().get(13).k());
		assertEquals(BigDecimal.valueOf(96), h.values().get(13).l());
		assertEquals(BigDecimal.valueOf(97), h.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(98), h.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(99), h.values().get(14).r());
		assertEquals(BigDecimal.valueOf(100), h.values().get(14).i());
		assertEquals(BigDecimal.valueOf(101), h.values().get(14).j());
		assertEquals(BigDecimal.valueOf(102), h.values().get(14).k());
		assertEquals(BigDecimal.valueOf(103), h.values().get(14).l());
		assertEquals(BigDecimal.valueOf(104), h.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(105), h.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(106), h.values().get(15).r());
		assertEquals(BigDecimal.valueOf(107), h.values().get(15).i());
		assertEquals(BigDecimal.valueOf(108), h.values().get(15).j());
		assertEquals(BigDecimal.valueOf(109), h.values().get(15).k());
		assertEquals(BigDecimal.valueOf(110), h.values().get(15).l());
		assertEquals(BigDecimal.valueOf(111), h.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(112), h.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(113), h.values().get(16).r());
		assertEquals(BigDecimal.valueOf(114), h.values().get(16).i());
		assertEquals(BigDecimal.valueOf(115), h.values().get(16).j());
		assertEquals(BigDecimal.valueOf(116), h.values().get(16).k());
		assertEquals(BigDecimal.valueOf(117), h.values().get(16).l());
		assertEquals(BigDecimal.valueOf(118), h.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(119), h.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(120), h.values().get(17).r());
		assertEquals(BigDecimal.valueOf(121), h.values().get(17).i());
		assertEquals(BigDecimal.valueOf(122), h.values().get(17).j());
		assertEquals(BigDecimal.valueOf(123), h.values().get(17).k());
		assertEquals(BigDecimal.valueOf(124), h.values().get(17).l());
		assertEquals(BigDecimal.valueOf(125), h.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(126), h.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(17).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]][[{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64},{65,66,67,68,69,70,71,72}][{73,74,75,76,77,78,79,80},{81,82,83,84,85,86,87,88},{89,90,91,92,93,94,95,96}]][[{97,98,99,100,101,102,103,104},{105,106,107,108,109,110,111,112},{113,114,115,116,117,118,119,120}][{121,122,123,124,125,126,127,128},{129,130,131,132,133,134,135,136},{137,138,139,140,141,142,143,144}]]]");
		assertArrayEquals(new long[] {3,2,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(97), i.values().get(12).r());
		assertEquals(BigDecimal.valueOf(98), i.values().get(12).i());
		assertEquals(BigDecimal.valueOf(99), i.values().get(12).j());
		assertEquals(BigDecimal.valueOf(100), i.values().get(12).k());
		assertEquals(BigDecimal.valueOf(101), i.values().get(12).l());
		assertEquals(BigDecimal.valueOf(102), i.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(103), i.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(104), i.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(105), i.values().get(13).r());
		assertEquals(BigDecimal.valueOf(106), i.values().get(13).i());
		assertEquals(BigDecimal.valueOf(107), i.values().get(13).j());
		assertEquals(BigDecimal.valueOf(108), i.values().get(13).k());
		assertEquals(BigDecimal.valueOf(109), i.values().get(13).l());
		assertEquals(BigDecimal.valueOf(110), i.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(111), i.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(112), i.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(113), i.values().get(14).r());
		assertEquals(BigDecimal.valueOf(114), i.values().get(14).i());
		assertEquals(BigDecimal.valueOf(115), i.values().get(14).j());
		assertEquals(BigDecimal.valueOf(116), i.values().get(14).k());
		assertEquals(BigDecimal.valueOf(117), i.values().get(14).l());
		assertEquals(BigDecimal.valueOf(118), i.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(119), i.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(120), i.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(121), i.values().get(15).r());
		assertEquals(BigDecimal.valueOf(122), i.values().get(15).i());
		assertEquals(BigDecimal.valueOf(123), i.values().get(15).j());
		assertEquals(BigDecimal.valueOf(124), i.values().get(15).k());
		assertEquals(BigDecimal.valueOf(125), i.values().get(15).l());
		assertEquals(BigDecimal.valueOf(126), i.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(127), i.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(128), i.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(129), i.values().get(16).r());
		assertEquals(BigDecimal.valueOf(130), i.values().get(16).i());
		assertEquals(BigDecimal.valueOf(131), i.values().get(16).j());
		assertEquals(BigDecimal.valueOf(132), i.values().get(16).k());
		assertEquals(BigDecimal.valueOf(133), i.values().get(16).l());
		assertEquals(BigDecimal.valueOf(134), i.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(135), i.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(136), i.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(137), i.values().get(17).r());
		assertEquals(BigDecimal.valueOf(138), i.values().get(17).i());
		assertEquals(BigDecimal.valueOf(139), i.values().get(17).j());
		assertEquals(BigDecimal.valueOf(140), i.values().get(17).k());
		assertEquals(BigDecimal.valueOf(141), i.values().get(17).l());
		assertEquals(BigDecimal.valueOf(142), i.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(143), i.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(144), i.values().get(17).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]][[{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81}][{82,83,84,85,86,87,88,89,90},{91,92,93,94,95,96,97,98,99},{100,101,102,103,104,105,106,107,108}]][[{109,110,111,112,113,114,115,116,117},{118,119,120,121,122,123,124,125,126},{127,128,129,130,131,132,133,134,135}][{136,137,138,139,140,141,142,143,144},{145,146,147,148,149,150,151,152,153},{154,155,156,157,158,159,160,161,162}]]]");
		assertArrayEquals(new long[] {3,2,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(109), j.values().get(12).r());
		assertEquals(BigDecimal.valueOf(110), j.values().get(12).i());
		assertEquals(BigDecimal.valueOf(111), j.values().get(12).j());
		assertEquals(BigDecimal.valueOf(112), j.values().get(12).k());
		assertEquals(BigDecimal.valueOf(113), j.values().get(12).l());
		assertEquals(BigDecimal.valueOf(114), j.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(115), j.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(116), j.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(118), j.values().get(13).r());
		assertEquals(BigDecimal.valueOf(119), j.values().get(13).i());
		assertEquals(BigDecimal.valueOf(120), j.values().get(13).j());
		assertEquals(BigDecimal.valueOf(121), j.values().get(13).k());
		assertEquals(BigDecimal.valueOf(122), j.values().get(13).l());
		assertEquals(BigDecimal.valueOf(123), j.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(124), j.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(125), j.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(127), j.values().get(14).r());
		assertEquals(BigDecimal.valueOf(128), j.values().get(14).i());
		assertEquals(BigDecimal.valueOf(129), j.values().get(14).j());
		assertEquals(BigDecimal.valueOf(130), j.values().get(14).k());
		assertEquals(BigDecimal.valueOf(131), j.values().get(14).l());
		assertEquals(BigDecimal.valueOf(132), j.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(133), j.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(134), j.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(136), j.values().get(15).r());
		assertEquals(BigDecimal.valueOf(137), j.values().get(15).i());
		assertEquals(BigDecimal.valueOf(138), j.values().get(15).j());
		assertEquals(BigDecimal.valueOf(139), j.values().get(15).k());
		assertEquals(BigDecimal.valueOf(140), j.values().get(15).l());
		assertEquals(BigDecimal.valueOf(141), j.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(142), j.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(143), j.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(145), j.values().get(16).r());
		assertEquals(BigDecimal.valueOf(146), j.values().get(16).i());
		assertEquals(BigDecimal.valueOf(147), j.values().get(16).j());
		assertEquals(BigDecimal.valueOf(148), j.values().get(16).k());
		assertEquals(BigDecimal.valueOf(149), j.values().get(16).l());
		assertEquals(BigDecimal.valueOf(150), j.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(151), j.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(152), j.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(154), j.values().get(17).r());
		assertEquals(BigDecimal.valueOf(155), j.values().get(17).i());
		assertEquals(BigDecimal.valueOf(156), j.values().get(17).j());
		assertEquals(BigDecimal.valueOf(157), j.values().get(17).k());
		assertEquals(BigDecimal.valueOf(158), j.values().get(17).l());
		assertEquals(BigDecimal.valueOf(159), j.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(160), j.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(161), j.values().get(17).k0());
	}

	@Test
	public void test3d3x3x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1][2][3]][[4][5][6]][[7][8][9]]]");
		assertArrayEquals(new long[] {1,3,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		
		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1}][{2}][{3}]][[{4}][{5}][{6}]][[{7}][{8}][{9}]]]");
		assertArrayEquals(new long[] {1,3,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		
		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2}][{3,4}][{5,6}]][[{7,8}][{9,10}][{11,12}]][[{13,14}][{15,16}][{17,18}]]]");
		assertArrayEquals(new long[] {1,3,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		
		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3}][{4,5,6}][{7,8,9}]][[{10,11,12}][{13,14,15}][{16,17,18}]][[{19,20,21}][{22,23,24}][{25,26,27}]]]");
		assertArrayEquals(new long[] {1,3,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		
		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4}][{5,6,7,8}][{9,10,11,12}]][[{13,14,15,16}][{17,18,19,20}][{21,22,23,24}]][[{25,26,27,28}][{29,30,31,32}][{33,34,35,36}]]]");
		assertArrayEquals(new long[] {1,3,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		
		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5}][{6,7,8,9,10}][{11,12,13,14,15}]][[{16,17,18,19,20}][{21,22,23,24,25}][{26,27,28,29,30}]][[{31,32,33,34,35}][{36,37,38,39,40}][{41,42,43,44,45}]]]");
		assertArrayEquals(new long[] {1,3,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		
		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6}][{7,8,9,10,11,12}][{13,14,15,16,17,18}]][[{19,20,21,22,23,24}][{25,26,27,28,29,30}][{31,32,33,34,35,36}]][[{37,38,39,40,41,42}][{43,44,45,46,47,48}][{49,50,51,52,53,54}]]]");
		assertArrayEquals(new long[] {1,3,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		
		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21}]][[{22,23,24,25,26,27,28}][{29,30,31,32,33,34,35}][{36,37,38,39,40,41,42}]][[{43,44,45,46,47,48,49}][{50,51,52,53,54,55,56}][{57,58,59,60,61,62,63}]]]");
		assertArrayEquals(new long[] {1,3,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		
		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24}]][[{25,26,27,28,29,30,31,32}][{33,34,35,36,37,38,39,40}][{41,42,43,44,45,46,47,48}]][[{49,50,51,52,53,54,55,56}][{57,58,59,60,61,62,63,64}][{65,66,67,68,69,70,71,72}]]]");
		assertArrayEquals(new long[] {1,3,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		
		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27}]][[{28,29,30,31,32,33,34,35,36}][{37,38,39,40,41,42,43,44,45}][{46,47,48,49,50,51,52,53,54}]][[{55,56,57,58,59,60,61,62,63}][{64,65,66,67,68,69,70,71,72}][{73,74,75,76,77,78,79,80,81}]]]");
		assertArrayEquals(new long[] {1,3,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
	}

	@Test
	public void test3d3x3x2() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2][3,4][5,6]][[7,8][9,10][11,12]][[13,14][15,16][17,18]]]");
		assertArrayEquals(new long[] {2,3,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), a.values().get(12).r());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k());
		assertEquals(BigDecimal.ZERO, a.values().get(12).l());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), a.values().get(13).r());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k());
		assertEquals(BigDecimal.ZERO, a.values().get(13).l());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), a.values().get(14).r());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k());
		assertEquals(BigDecimal.ZERO, a.values().get(14).l());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), a.values().get(15).r());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k());
		assertEquals(BigDecimal.ZERO, a.values().get(15).l());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), a.values().get(16).r());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k());
		assertEquals(BigDecimal.ZERO, a.values().get(16).l());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), a.values().get(17).r());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k());
		assertEquals(BigDecimal.ZERO, a.values().get(17).l());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k0());

		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2}][{3},{4}][{5},{6}]][[{7},{8}][{9},{10}][{11},{12}]][[{13},{14}][{15},{16}][{17},{18}]]]");
		assertArrayEquals(new long[] {2,3,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), b.values().get(12).r());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k());
		assertEquals(BigDecimal.ZERO, b.values().get(12).l());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), b.values().get(13).r());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k());
		assertEquals(BigDecimal.ZERO, b.values().get(13).l());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), b.values().get(14).r());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k());
		assertEquals(BigDecimal.ZERO, b.values().get(14).l());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), b.values().get(15).r());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k());
		assertEquals(BigDecimal.ZERO, b.values().get(15).l());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), b.values().get(16).r());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k());
		assertEquals(BigDecimal.ZERO, b.values().get(16).l());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), b.values().get(17).r());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k());
		assertEquals(BigDecimal.ZERO, b.values().get(17).l());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4}][{5,6},{7,8}][{9,10},{11,12}]][[{13,14},{15,16}][{17,18},{19,20}][{21,22},{23,24}]][[{25,26},{27,28}][{29,30},{31,32}][{33,34},{35,36}]]]");
		assertArrayEquals(new long[] {2,3,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(25), c.values().get(12).r());
		assertEquals(BigDecimal.valueOf(26), c.values().get(12).i());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k());
		assertEquals(BigDecimal.ZERO, c.values().get(12).l());
		assertEquals(BigDecimal.ZERO, c.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(27), c.values().get(13).r());
		assertEquals(BigDecimal.valueOf(28), c.values().get(13).i());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k());
		assertEquals(BigDecimal.ZERO, c.values().get(13).l());
		assertEquals(BigDecimal.ZERO, c.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(29), c.values().get(14).r());
		assertEquals(BigDecimal.valueOf(30), c.values().get(14).i());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k());
		assertEquals(BigDecimal.ZERO, c.values().get(14).l());
		assertEquals(BigDecimal.ZERO, c.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(31), c.values().get(15).r());
		assertEquals(BigDecimal.valueOf(32), c.values().get(15).i());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k());
		assertEquals(BigDecimal.ZERO, c.values().get(15).l());
		assertEquals(BigDecimal.ZERO, c.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(33), c.values().get(16).r());
		assertEquals(BigDecimal.valueOf(34), c.values().get(16).i());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k());
		assertEquals(BigDecimal.ZERO, c.values().get(16).l());
		assertEquals(BigDecimal.ZERO, c.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(35), c.values().get(17).r());
		assertEquals(BigDecimal.valueOf(36), c.values().get(17).i());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k());
		assertEquals(BigDecimal.ZERO, c.values().get(17).l());
		assertEquals(BigDecimal.ZERO, c.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6}][{7,8,9},{10,11,12}][{13,14,15},{16,17,18}]][[{19,20,21},{22,23,24}][{25,26,27},{28,29,30}][{31,32,33},{34,35,36}]][[{37,38,39},{40,41,42}][{43,44,45},{46,47,48}][{49,50,51},{52,53,54}]]]");
		assertArrayEquals(new long[] {2,3,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(37), d.values().get(12).r());
		assertEquals(BigDecimal.valueOf(38), d.values().get(12).i());
		assertEquals(BigDecimal.valueOf(39), d.values().get(12).j());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k());
		assertEquals(BigDecimal.ZERO, d.values().get(12).l());
		assertEquals(BigDecimal.ZERO, d.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(40), d.values().get(13).r());
		assertEquals(BigDecimal.valueOf(41), d.values().get(13).i());
		assertEquals(BigDecimal.valueOf(42), d.values().get(13).j());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k());
		assertEquals(BigDecimal.ZERO, d.values().get(13).l());
		assertEquals(BigDecimal.ZERO, d.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(43), d.values().get(14).r());
		assertEquals(BigDecimal.valueOf(44), d.values().get(14).i());
		assertEquals(BigDecimal.valueOf(45), d.values().get(14).j());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k());
		assertEquals(BigDecimal.ZERO, d.values().get(14).l());
		assertEquals(BigDecimal.ZERO, d.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(46), d.values().get(15).r());
		assertEquals(BigDecimal.valueOf(47), d.values().get(15).i());
		assertEquals(BigDecimal.valueOf(48), d.values().get(15).j());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k());
		assertEquals(BigDecimal.ZERO, d.values().get(15).l());
		assertEquals(BigDecimal.ZERO, d.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(49), d.values().get(16).r());
		assertEquals(BigDecimal.valueOf(50), d.values().get(16).i());
		assertEquals(BigDecimal.valueOf(51), d.values().get(16).j());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k());
		assertEquals(BigDecimal.ZERO, d.values().get(16).l());
		assertEquals(BigDecimal.ZERO, d.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(52), d.values().get(17).r());
		assertEquals(BigDecimal.valueOf(53), d.values().get(17).i());
		assertEquals(BigDecimal.valueOf(54), d.values().get(17).j());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k());
		assertEquals(BigDecimal.ZERO, d.values().get(17).l());
		assertEquals(BigDecimal.ZERO, d.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8}][{9,10,11,12},{13,14,15,16}][{17,18,19,20},{21,22,23,24}]][[{25,26,27,28},{29,30,31,32}][{33,34,35,36},{37,38,39,40}][{41,42,43,44},{45,46,47,48}]][[{49,50,51,52},{53,54,55,56}][{57,58,59,60},{61,62,63,64}][{65,66,67,68},{69,70,71,72}]]]");
		assertArrayEquals(new long[] {2,3,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(49), e.values().get(12).r());
		assertEquals(BigDecimal.valueOf(50), e.values().get(12).i());
		assertEquals(BigDecimal.valueOf(51), e.values().get(12).j());
		assertEquals(BigDecimal.valueOf(52), e.values().get(12).k());
		assertEquals(BigDecimal.ZERO, e.values().get(12).l());
		assertEquals(BigDecimal.ZERO, e.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(53), e.values().get(13).r());
		assertEquals(BigDecimal.valueOf(54), e.values().get(13).i());
		assertEquals(BigDecimal.valueOf(55), e.values().get(13).j());
		assertEquals(BigDecimal.valueOf(56), e.values().get(13).k());
		assertEquals(BigDecimal.ZERO, e.values().get(13).l());
		assertEquals(BigDecimal.ZERO, e.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(57), e.values().get(14).r());
		assertEquals(BigDecimal.valueOf(58), e.values().get(14).i());
		assertEquals(BigDecimal.valueOf(59), e.values().get(14).j());
		assertEquals(BigDecimal.valueOf(60), e.values().get(14).k());
		assertEquals(BigDecimal.ZERO, e.values().get(14).l());
		assertEquals(BigDecimal.ZERO, e.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(61), e.values().get(15).r());
		assertEquals(BigDecimal.valueOf(62), e.values().get(15).i());
		assertEquals(BigDecimal.valueOf(63), e.values().get(15).j());
		assertEquals(BigDecimal.valueOf(64), e.values().get(15).k());
		assertEquals(BigDecimal.ZERO, e.values().get(15).l());
		assertEquals(BigDecimal.ZERO, e.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(65), e.values().get(16).r());
		assertEquals(BigDecimal.valueOf(66), e.values().get(16).i());
		assertEquals(BigDecimal.valueOf(67), e.values().get(16).j());
		assertEquals(BigDecimal.valueOf(68), e.values().get(16).k());
		assertEquals(BigDecimal.ZERO, e.values().get(16).l());
		assertEquals(BigDecimal.ZERO, e.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(69), e.values().get(17).r());
		assertEquals(BigDecimal.valueOf(70), e.values().get(17).i());
		assertEquals(BigDecimal.valueOf(71), e.values().get(17).j());
		assertEquals(BigDecimal.valueOf(72), e.values().get(17).k());
		assertEquals(BigDecimal.ZERO, e.values().get(17).l());
		assertEquals(BigDecimal.ZERO, e.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10}][{11,12,13,14,15},{16,17,18,19,20}][{21,22,23,24,25},{26,27,28,29,30}]][[{31,32,33,34,35},{36,37,38,39,40}][{41,42,43,44,45},{46,47,48,49,50}][{51,52,53,54,55},{56,57,58,59,60}]][[{61,62,63,64,65},{66,67,68,69,70}][{71,72,73,74,75},{76,77,78,79,80}][{81,82,83,84,85},{86,87,88,89,90}]]]");
		assertArrayEquals(new long[] {2,3,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(61), f.values().get(12).r());
		assertEquals(BigDecimal.valueOf(62), f.values().get(12).i());
		assertEquals(BigDecimal.valueOf(63), f.values().get(12).j());
		assertEquals(BigDecimal.valueOf(64), f.values().get(12).k());
		assertEquals(BigDecimal.valueOf(65), f.values().get(12).l());
		assertEquals(BigDecimal.ZERO, f.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(66), f.values().get(13).r());
		assertEquals(BigDecimal.valueOf(67), f.values().get(13).i());
		assertEquals(BigDecimal.valueOf(68), f.values().get(13).j());
		assertEquals(BigDecimal.valueOf(69), f.values().get(13).k());
		assertEquals(BigDecimal.valueOf(70), f.values().get(13).l());
		assertEquals(BigDecimal.ZERO, f.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(71), f.values().get(14).r());
		assertEquals(BigDecimal.valueOf(72), f.values().get(14).i());
		assertEquals(BigDecimal.valueOf(73), f.values().get(14).j());
		assertEquals(BigDecimal.valueOf(74), f.values().get(14).k());
		assertEquals(BigDecimal.valueOf(75), f.values().get(14).l());
		assertEquals(BigDecimal.ZERO, f.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(76), f.values().get(15).r());
		assertEquals(BigDecimal.valueOf(77), f.values().get(15).i());
		assertEquals(BigDecimal.valueOf(78), f.values().get(15).j());
		assertEquals(BigDecimal.valueOf(79), f.values().get(15).k());
		assertEquals(BigDecimal.valueOf(80), f.values().get(15).l());
		assertEquals(BigDecimal.ZERO, f.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(81), f.values().get(16).r());
		assertEquals(BigDecimal.valueOf(82), f.values().get(16).i());
		assertEquals(BigDecimal.valueOf(83), f.values().get(16).j());
		assertEquals(BigDecimal.valueOf(84), f.values().get(16).k());
		assertEquals(BigDecimal.valueOf(85), f.values().get(16).l());
		assertEquals(BigDecimal.ZERO, f.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(86), f.values().get(17).r());
		assertEquals(BigDecimal.valueOf(87), f.values().get(17).i());
		assertEquals(BigDecimal.valueOf(88), f.values().get(17).j());
		assertEquals(BigDecimal.valueOf(89), f.values().get(17).k());
		assertEquals(BigDecimal.valueOf(90), f.values().get(17).l());
		assertEquals(BigDecimal.ZERO, f.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12}][{13,14,15,16,17,18},{19,20,21,22,23,24}][{25,26,27,28,29,30},{31,32,33,34,35,36}]][[{37,38,39,40,41,42},{43,44,45,46,47,48}][{49,50,51,52,53,54},{55,56,57,58,59,60}][{61,62,63,64,65,66},{67,68,69,70,71,72}]][[{73,74,75,76,77,78},{79,80,81,82,83,84}][{85,86,87,88,89,90},{91,92,93,94,95,96}][{97,98,99,100,101,102},{103,104,105,106,107,108}]]]");
		assertArrayEquals(new long[] {2,3,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(73), g.values().get(12).r());
		assertEquals(BigDecimal.valueOf(74), g.values().get(12).i());
		assertEquals(BigDecimal.valueOf(75), g.values().get(12).j());
		assertEquals(BigDecimal.valueOf(76), g.values().get(12).k());
		assertEquals(BigDecimal.valueOf(77), g.values().get(12).l());
		assertEquals(BigDecimal.valueOf(78), g.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(79), g.values().get(13).r());
		assertEquals(BigDecimal.valueOf(80), g.values().get(13).i());
		assertEquals(BigDecimal.valueOf(81), g.values().get(13).j());
		assertEquals(BigDecimal.valueOf(82), g.values().get(13).k());
		assertEquals(BigDecimal.valueOf(83), g.values().get(13).l());
		assertEquals(BigDecimal.valueOf(84), g.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(85), g.values().get(14).r());
		assertEquals(BigDecimal.valueOf(86), g.values().get(14).i());
		assertEquals(BigDecimal.valueOf(87), g.values().get(14).j());
		assertEquals(BigDecimal.valueOf(88), g.values().get(14).k());
		assertEquals(BigDecimal.valueOf(89), g.values().get(14).l());
		assertEquals(BigDecimal.valueOf(90), g.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(91), g.values().get(15).r());
		assertEquals(BigDecimal.valueOf(92), g.values().get(15).i());
		assertEquals(BigDecimal.valueOf(93), g.values().get(15).j());
		assertEquals(BigDecimal.valueOf(94), g.values().get(15).k());
		assertEquals(BigDecimal.valueOf(95), g.values().get(15).l());
		assertEquals(BigDecimal.valueOf(96), g.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(97), g.values().get(16).r());
		assertEquals(BigDecimal.valueOf(98), g.values().get(16).i());
		assertEquals(BigDecimal.valueOf(99), g.values().get(16).j());
		assertEquals(BigDecimal.valueOf(100), g.values().get(16).k());
		assertEquals(BigDecimal.valueOf(101), g.values().get(16).l());
		assertEquals(BigDecimal.valueOf(102), g.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(103), g.values().get(17).r());
		assertEquals(BigDecimal.valueOf(104), g.values().get(17).i());
		assertEquals(BigDecimal.valueOf(105), g.values().get(17).j());
		assertEquals(BigDecimal.valueOf(106), g.values().get(17).k());
		assertEquals(BigDecimal.valueOf(107), g.values().get(17).l());
		assertEquals(BigDecimal.valueOf(108), g.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21},{22,23,24,25,26,27,28}][{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}]][[{43,44,45,46,47,48,49},{50,51,52,53,54,55,56}][{57,58,59,60,61,62,63},{64,65,66,67,68,69,70}][{71,72,73,74,75,76,77},{78,79,80,81,82,83,84}]][[{85,86,87,88,89,90,91},{92,93,94,95,96,97,98}][{99,100,101,102,103,104,105},{106,107,108,109,110,111,112}][{113,114,115,116,117,118,119},{120,121,122,123,124,125,126}]]]");
		assertArrayEquals(new long[] {2,3,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(85), h.values().get(12).r());
		assertEquals(BigDecimal.valueOf(86), h.values().get(12).i());
		assertEquals(BigDecimal.valueOf(87), h.values().get(12).j());
		assertEquals(BigDecimal.valueOf(88), h.values().get(12).k());
		assertEquals(BigDecimal.valueOf(89), h.values().get(12).l());
		assertEquals(BigDecimal.valueOf(90), h.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(91), h.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(92), h.values().get(13).r());
		assertEquals(BigDecimal.valueOf(93), h.values().get(13).i());
		assertEquals(BigDecimal.valueOf(94), h.values().get(13).j());
		assertEquals(BigDecimal.valueOf(95), h.values().get(13).k());
		assertEquals(BigDecimal.valueOf(96), h.values().get(13).l());
		assertEquals(BigDecimal.valueOf(97), h.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(98), h.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(99), h.values().get(14).r());
		assertEquals(BigDecimal.valueOf(100), h.values().get(14).i());
		assertEquals(BigDecimal.valueOf(101), h.values().get(14).j());
		assertEquals(BigDecimal.valueOf(102), h.values().get(14).k());
		assertEquals(BigDecimal.valueOf(103), h.values().get(14).l());
		assertEquals(BigDecimal.valueOf(104), h.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(105), h.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(106), h.values().get(15).r());
		assertEquals(BigDecimal.valueOf(107), h.values().get(15).i());
		assertEquals(BigDecimal.valueOf(108), h.values().get(15).j());
		assertEquals(BigDecimal.valueOf(109), h.values().get(15).k());
		assertEquals(BigDecimal.valueOf(110), h.values().get(15).l());
		assertEquals(BigDecimal.valueOf(111), h.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(112), h.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(113), h.values().get(16).r());
		assertEquals(BigDecimal.valueOf(114), h.values().get(16).i());
		assertEquals(BigDecimal.valueOf(115), h.values().get(16).j());
		assertEquals(BigDecimal.valueOf(116), h.values().get(16).k());
		assertEquals(BigDecimal.valueOf(117), h.values().get(16).l());
		assertEquals(BigDecimal.valueOf(118), h.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(119), h.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(120), h.values().get(17).r());
		assertEquals(BigDecimal.valueOf(121), h.values().get(17).i());
		assertEquals(BigDecimal.valueOf(122), h.values().get(17).j());
		assertEquals(BigDecimal.valueOf(123), h.values().get(17).k());
		assertEquals(BigDecimal.valueOf(124), h.values().get(17).l());
		assertEquals(BigDecimal.valueOf(125), h.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(126), h.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(17).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24},{25,26,27,28,29,30,31,32}][{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}]][[{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64}][{65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80}][{81,82,83,84,85,86,87,88},{89,90,91,92,93,94,95,96}]][[{97,98,99,100,101,102,103,104},{105,106,107,108,109,110,111,112}][{113,114,115,116,117,118,119,120},{121,122,123,124,125,126,127,128}][{129,130,131,132,133,134,135,136},{137,138,139,140,141,142,143,144}]]]");
		assertArrayEquals(new long[] {2,3,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(97), i.values().get(12).r());
		assertEquals(BigDecimal.valueOf(98), i.values().get(12).i());
		assertEquals(BigDecimal.valueOf(99), i.values().get(12).j());
		assertEquals(BigDecimal.valueOf(100), i.values().get(12).k());
		assertEquals(BigDecimal.valueOf(101), i.values().get(12).l());
		assertEquals(BigDecimal.valueOf(102), i.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(103), i.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(104), i.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(105), i.values().get(13).r());
		assertEquals(BigDecimal.valueOf(106), i.values().get(13).i());
		assertEquals(BigDecimal.valueOf(107), i.values().get(13).j());
		assertEquals(BigDecimal.valueOf(108), i.values().get(13).k());
		assertEquals(BigDecimal.valueOf(109), i.values().get(13).l());
		assertEquals(BigDecimal.valueOf(110), i.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(111), i.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(112), i.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(113), i.values().get(14).r());
		assertEquals(BigDecimal.valueOf(114), i.values().get(14).i());
		assertEquals(BigDecimal.valueOf(115), i.values().get(14).j());
		assertEquals(BigDecimal.valueOf(116), i.values().get(14).k());
		assertEquals(BigDecimal.valueOf(117), i.values().get(14).l());
		assertEquals(BigDecimal.valueOf(118), i.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(119), i.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(120), i.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(121), i.values().get(15).r());
		assertEquals(BigDecimal.valueOf(122), i.values().get(15).i());
		assertEquals(BigDecimal.valueOf(123), i.values().get(15).j());
		assertEquals(BigDecimal.valueOf(124), i.values().get(15).k());
		assertEquals(BigDecimal.valueOf(125), i.values().get(15).l());
		assertEquals(BigDecimal.valueOf(126), i.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(127), i.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(128), i.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(129), i.values().get(16).r());
		assertEquals(BigDecimal.valueOf(130), i.values().get(16).i());
		assertEquals(BigDecimal.valueOf(131), i.values().get(16).j());
		assertEquals(BigDecimal.valueOf(132), i.values().get(16).k());
		assertEquals(BigDecimal.valueOf(133), i.values().get(16).l());
		assertEquals(BigDecimal.valueOf(134), i.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(135), i.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(136), i.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(137), i.values().get(17).r());
		assertEquals(BigDecimal.valueOf(138), i.values().get(17).i());
		assertEquals(BigDecimal.valueOf(139), i.values().get(17).j());
		assertEquals(BigDecimal.valueOf(140), i.values().get(17).k());
		assertEquals(BigDecimal.valueOf(141), i.values().get(17).l());
		assertEquals(BigDecimal.valueOf(142), i.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(143), i.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(144), i.values().get(17).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27},{28,29,30,31,32,33,34,35,36}][{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}]][[{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72}][{73,74,75,76,77,78,79,80,81},{82,83,84,85,86,87,88,89,90}][{91,92,93,94,95,96,97,98,99},{100,101,102,103,104,105,106,107,108}]][[{109,110,111,112,113,114,115,116,117},{118,119,120,121,122,123,124,125,126}][{127,128,129,130,131,132,133,134,135},{136,137,138,139,140,141,142,143,144}][{145,146,147,148,149,150,151,152,153},{154,155,156,157,158,159,160,161,162}]]]");
		assertArrayEquals(new long[] {2,3,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(109), j.values().get(12).r());
		assertEquals(BigDecimal.valueOf(110), j.values().get(12).i());
		assertEquals(BigDecimal.valueOf(111), j.values().get(12).j());
		assertEquals(BigDecimal.valueOf(112), j.values().get(12).k());
		assertEquals(BigDecimal.valueOf(113), j.values().get(12).l());
		assertEquals(BigDecimal.valueOf(114), j.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(115), j.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(116), j.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(118), j.values().get(13).r());
		assertEquals(BigDecimal.valueOf(119), j.values().get(13).i());
		assertEquals(BigDecimal.valueOf(120), j.values().get(13).j());
		assertEquals(BigDecimal.valueOf(121), j.values().get(13).k());
		assertEquals(BigDecimal.valueOf(122), j.values().get(13).l());
		assertEquals(BigDecimal.valueOf(123), j.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(124), j.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(125), j.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(127), j.values().get(14).r());
		assertEquals(BigDecimal.valueOf(128), j.values().get(14).i());
		assertEquals(BigDecimal.valueOf(129), j.values().get(14).j());
		assertEquals(BigDecimal.valueOf(130), j.values().get(14).k());
		assertEquals(BigDecimal.valueOf(131), j.values().get(14).l());
		assertEquals(BigDecimal.valueOf(132), j.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(133), j.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(134), j.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(136), j.values().get(15).r());
		assertEquals(BigDecimal.valueOf(137), j.values().get(15).i());
		assertEquals(BigDecimal.valueOf(138), j.values().get(15).j());
		assertEquals(BigDecimal.valueOf(139), j.values().get(15).k());
		assertEquals(BigDecimal.valueOf(140), j.values().get(15).l());
		assertEquals(BigDecimal.valueOf(141), j.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(142), j.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(143), j.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(145), j.values().get(16).r());
		assertEquals(BigDecimal.valueOf(146), j.values().get(16).i());
		assertEquals(BigDecimal.valueOf(147), j.values().get(16).j());
		assertEquals(BigDecimal.valueOf(148), j.values().get(16).k());
		assertEquals(BigDecimal.valueOf(149), j.values().get(16).l());
		assertEquals(BigDecimal.valueOf(150), j.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(151), j.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(152), j.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(154), j.values().get(17).r());
		assertEquals(BigDecimal.valueOf(155), j.values().get(17).i());
		assertEquals(BigDecimal.valueOf(156), j.values().get(17).j());
		assertEquals(BigDecimal.valueOf(157), j.values().get(17).k());
		assertEquals(BigDecimal.valueOf(158), j.values().get(17).l());
		assertEquals(BigDecimal.valueOf(159), j.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(160), j.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(161), j.values().get(17).k0());
	}

	@Test
	public void test3d3x3x3() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[1,2,3][4,5,6][7,8,9]][[10,11,12][13,14,15][16,17,18]][[19,20,21][22,23,24][25,26,27]]]");
		assertArrayEquals(new long[] {3,3,3}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), a.values().get(12).r());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k());
		assertEquals(BigDecimal.ZERO, a.values().get(12).l());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), a.values().get(13).r());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k());
		assertEquals(BigDecimal.ZERO, a.values().get(13).l());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), a.values().get(14).r());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k());
		assertEquals(BigDecimal.ZERO, a.values().get(14).l());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), a.values().get(15).r());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k());
		assertEquals(BigDecimal.ZERO, a.values().get(15).l());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), a.values().get(16).r());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k());
		assertEquals(BigDecimal.ZERO, a.values().get(16).l());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), a.values().get(17).r());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k());
		assertEquals(BigDecimal.ZERO, a.values().get(17).l());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(19), a.values().get(18).r());
		assertEquals(BigDecimal.ZERO, a.values().get(18).i());
		assertEquals(BigDecimal.ZERO, a.values().get(18).j());
		assertEquals(BigDecimal.ZERO, a.values().get(18).k());
		assertEquals(BigDecimal.ZERO, a.values().get(18).l());
		assertEquals(BigDecimal.ZERO, a.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(20), a.values().get(19).r());
		assertEquals(BigDecimal.ZERO, a.values().get(19).i());
		assertEquals(BigDecimal.ZERO, a.values().get(19).j());
		assertEquals(BigDecimal.ZERO, a.values().get(19).k());
		assertEquals(BigDecimal.ZERO, a.values().get(19).l());
		assertEquals(BigDecimal.ZERO, a.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(21), a.values().get(20).r());
		assertEquals(BigDecimal.ZERO, a.values().get(20).i());
		assertEquals(BigDecimal.ZERO, a.values().get(20).j());
		assertEquals(BigDecimal.ZERO, a.values().get(20).k());
		assertEquals(BigDecimal.ZERO, a.values().get(20).l());
		assertEquals(BigDecimal.ZERO, a.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(22), a.values().get(21).r());
		assertEquals(BigDecimal.ZERO, a.values().get(21).i());
		assertEquals(BigDecimal.ZERO, a.values().get(21).j());
		assertEquals(BigDecimal.ZERO, a.values().get(21).k());
		assertEquals(BigDecimal.ZERO, a.values().get(21).l());
		assertEquals(BigDecimal.ZERO, a.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(23), a.values().get(22).r());
		assertEquals(BigDecimal.ZERO, a.values().get(22).i());
		assertEquals(BigDecimal.ZERO, a.values().get(22).j());
		assertEquals(BigDecimal.ZERO, a.values().get(22).k());
		assertEquals(BigDecimal.ZERO, a.values().get(22).l());
		assertEquals(BigDecimal.ZERO, a.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(24), a.values().get(23).r());
		assertEquals(BigDecimal.ZERO, a.values().get(23).i());
		assertEquals(BigDecimal.ZERO, a.values().get(23).j());
		assertEquals(BigDecimal.ZERO, a.values().get(23).k());
		assertEquals(BigDecimal.ZERO, a.values().get(23).l());
		assertEquals(BigDecimal.ZERO, a.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(25), a.values().get(24).r());
		assertEquals(BigDecimal.ZERO, a.values().get(24).i());
		assertEquals(BigDecimal.ZERO, a.values().get(24).j());
		assertEquals(BigDecimal.ZERO, a.values().get(24).k());
		assertEquals(BigDecimal.ZERO, a.values().get(24).l());
		assertEquals(BigDecimal.ZERO, a.values().get(24).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(26), a.values().get(25).r());
		assertEquals(BigDecimal.ZERO, a.values().get(25).i());
		assertEquals(BigDecimal.ZERO, a.values().get(25).j());
		assertEquals(BigDecimal.ZERO, a.values().get(25).k());
		assertEquals(BigDecimal.ZERO, a.values().get(25).l());
		assertEquals(BigDecimal.ZERO, a.values().get(25).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(27), a.values().get(26).r());
		assertEquals(BigDecimal.ZERO, a.values().get(26).i());
		assertEquals(BigDecimal.ZERO, a.values().get(26).j());
		assertEquals(BigDecimal.ZERO, a.values().get(26).k());
		assertEquals(BigDecimal.ZERO, a.values().get(26).l());
		assertEquals(BigDecimal.ZERO, a.values().get(26).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(26).k0());
		
		TensorStringRepresentation b = new TensorStringRepresentation("[[[{1},{2},{3}][{4},{5},{6}][{7},{8},{9}]][[{10},{11},{12}][{13},{14},{15}][{16},{17},{18}]][[{19},{20},{21}][{22},{23},{24}][{25},{26},{27}]]]");
		assertArrayEquals(new long[] {3,3,3}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), b.values().get(12).r());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k());
		assertEquals(BigDecimal.ZERO, b.values().get(12).l());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), b.values().get(13).r());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k());
		assertEquals(BigDecimal.ZERO, b.values().get(13).l());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), b.values().get(14).r());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k());
		assertEquals(BigDecimal.ZERO, b.values().get(14).l());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), b.values().get(15).r());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k());
		assertEquals(BigDecimal.ZERO, b.values().get(15).l());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), b.values().get(16).r());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k());
		assertEquals(BigDecimal.ZERO, b.values().get(16).l());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), b.values().get(17).r());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k());
		assertEquals(BigDecimal.ZERO, b.values().get(17).l());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(19), b.values().get(18).r());
		assertEquals(BigDecimal.ZERO, b.values().get(18).i());
		assertEquals(BigDecimal.ZERO, b.values().get(18).j());
		assertEquals(BigDecimal.ZERO, b.values().get(18).k());
		assertEquals(BigDecimal.ZERO, b.values().get(18).l());
		assertEquals(BigDecimal.ZERO, b.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(20), b.values().get(19).r());
		assertEquals(BigDecimal.ZERO, b.values().get(19).i());
		assertEquals(BigDecimal.ZERO, b.values().get(19).j());
		assertEquals(BigDecimal.ZERO, b.values().get(19).k());
		assertEquals(BigDecimal.ZERO, b.values().get(19).l());
		assertEquals(BigDecimal.ZERO, b.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(21), b.values().get(20).r());
		assertEquals(BigDecimal.ZERO, b.values().get(20).i());
		assertEquals(BigDecimal.ZERO, b.values().get(20).j());
		assertEquals(BigDecimal.ZERO, b.values().get(20).k());
		assertEquals(BigDecimal.ZERO, b.values().get(20).l());
		assertEquals(BigDecimal.ZERO, b.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(22), b.values().get(21).r());
		assertEquals(BigDecimal.ZERO, b.values().get(21).i());
		assertEquals(BigDecimal.ZERO, b.values().get(21).j());
		assertEquals(BigDecimal.ZERO, b.values().get(21).k());
		assertEquals(BigDecimal.ZERO, b.values().get(21).l());
		assertEquals(BigDecimal.ZERO, b.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(23), b.values().get(22).r());
		assertEquals(BigDecimal.ZERO, b.values().get(22).i());
		assertEquals(BigDecimal.ZERO, b.values().get(22).j());
		assertEquals(BigDecimal.ZERO, b.values().get(22).k());
		assertEquals(BigDecimal.ZERO, b.values().get(22).l());
		assertEquals(BigDecimal.ZERO, b.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(24), b.values().get(23).r());
		assertEquals(BigDecimal.ZERO, b.values().get(23).i());
		assertEquals(BigDecimal.ZERO, b.values().get(23).j());
		assertEquals(BigDecimal.ZERO, b.values().get(23).k());
		assertEquals(BigDecimal.ZERO, b.values().get(23).l());
		assertEquals(BigDecimal.ZERO, b.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(25), b.values().get(24).r());
		assertEquals(BigDecimal.ZERO, b.values().get(24).i());
		assertEquals(BigDecimal.ZERO, b.values().get(24).j());
		assertEquals(BigDecimal.ZERO, b.values().get(24).k());
		assertEquals(BigDecimal.ZERO, b.values().get(24).l());
		assertEquals(BigDecimal.ZERO, b.values().get(24).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(26), b.values().get(25).r());
		assertEquals(BigDecimal.ZERO, b.values().get(25).i());
		assertEquals(BigDecimal.ZERO, b.values().get(25).j());
		assertEquals(BigDecimal.ZERO, b.values().get(25).k());
		assertEquals(BigDecimal.ZERO, b.values().get(25).l());
		assertEquals(BigDecimal.ZERO, b.values().get(25).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(27), b.values().get(26).r());
		assertEquals(BigDecimal.ZERO, b.values().get(26).i());
		assertEquals(BigDecimal.ZERO, b.values().get(26).j());
		assertEquals(BigDecimal.ZERO, b.values().get(26).k());
		assertEquals(BigDecimal.ZERO, b.values().get(26).l());
		assertEquals(BigDecimal.ZERO, b.values().get(26).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(26).k0());
		
		TensorStringRepresentation c = new TensorStringRepresentation("[[[{1,2},{3,4},{5,6}][{7,8},{9,10},{11,12}][{13,14},{15,16},{17,18}]][[{19,20},{21,22},{23,24}][{25,26},{27,28},{29,30}][{31,32},{33,34},{35,36}]][[{37,38},{39,40},{41,42}][{43,44},{45,46},{47,48}][{49,50},{51,52},{53,54}]]]");
		assertArrayEquals(new long[] {3,3,3}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(25), c.values().get(12).r());
		assertEquals(BigDecimal.valueOf(26), c.values().get(12).i());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k());
		assertEquals(BigDecimal.ZERO, c.values().get(12).l());
		assertEquals(BigDecimal.ZERO, c.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(27), c.values().get(13).r());
		assertEquals(BigDecimal.valueOf(28), c.values().get(13).i());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k());
		assertEquals(BigDecimal.ZERO, c.values().get(13).l());
		assertEquals(BigDecimal.ZERO, c.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(29), c.values().get(14).r());
		assertEquals(BigDecimal.valueOf(30), c.values().get(14).i());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k());
		assertEquals(BigDecimal.ZERO, c.values().get(14).l());
		assertEquals(BigDecimal.ZERO, c.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(31), c.values().get(15).r());
		assertEquals(BigDecimal.valueOf(32), c.values().get(15).i());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k());
		assertEquals(BigDecimal.ZERO, c.values().get(15).l());
		assertEquals(BigDecimal.ZERO, c.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(33), c.values().get(16).r());
		assertEquals(BigDecimal.valueOf(34), c.values().get(16).i());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k());
		assertEquals(BigDecimal.ZERO, c.values().get(16).l());
		assertEquals(BigDecimal.ZERO, c.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(35), c.values().get(17).r());
		assertEquals(BigDecimal.valueOf(36), c.values().get(17).i());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k());
		assertEquals(BigDecimal.ZERO, c.values().get(17).l());
		assertEquals(BigDecimal.ZERO, c.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(37), c.values().get(18).r());
		assertEquals(BigDecimal.valueOf(38), c.values().get(18).i());
		assertEquals(BigDecimal.ZERO, c.values().get(18).j());
		assertEquals(BigDecimal.ZERO, c.values().get(18).k());
		assertEquals(BigDecimal.ZERO, c.values().get(18).l());
		assertEquals(BigDecimal.ZERO, c.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(39), c.values().get(19).r());
		assertEquals(BigDecimal.valueOf(40), c.values().get(19).i());
		assertEquals(BigDecimal.ZERO, c.values().get(19).j());
		assertEquals(BigDecimal.ZERO, c.values().get(19).k());
		assertEquals(BigDecimal.ZERO, c.values().get(19).l());
		assertEquals(BigDecimal.ZERO, c.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(41), c.values().get(20).r());
		assertEquals(BigDecimal.valueOf(42), c.values().get(20).i());
		assertEquals(BigDecimal.ZERO, c.values().get(20).j());
		assertEquals(BigDecimal.ZERO, c.values().get(20).k());
		assertEquals(BigDecimal.ZERO, c.values().get(20).l());
		assertEquals(BigDecimal.ZERO, c.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(43), c.values().get(21).r());
		assertEquals(BigDecimal.valueOf(44), c.values().get(21).i());
		assertEquals(BigDecimal.ZERO, c.values().get(21).j());
		assertEquals(BigDecimal.ZERO, c.values().get(21).k());
		assertEquals(BigDecimal.ZERO, c.values().get(21).l());
		assertEquals(BigDecimal.ZERO, c.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(45), c.values().get(22).r());
		assertEquals(BigDecimal.valueOf(46), c.values().get(22).i());
		assertEquals(BigDecimal.ZERO, c.values().get(22).j());
		assertEquals(BigDecimal.ZERO, c.values().get(22).k());
		assertEquals(BigDecimal.ZERO, c.values().get(22).l());
		assertEquals(BigDecimal.ZERO, c.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(47), c.values().get(23).r());
		assertEquals(BigDecimal.valueOf(48), c.values().get(23).i());
		assertEquals(BigDecimal.ZERO, c.values().get(23).j());
		assertEquals(BigDecimal.ZERO, c.values().get(23).k());
		assertEquals(BigDecimal.ZERO, c.values().get(23).l());
		assertEquals(BigDecimal.ZERO, c.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(49), c.values().get(24).r());
		assertEquals(BigDecimal.valueOf(50), c.values().get(24).i());
		assertEquals(BigDecimal.ZERO, c.values().get(24).j());
		assertEquals(BigDecimal.ZERO, c.values().get(24).k());
		assertEquals(BigDecimal.ZERO, c.values().get(24).l());
		assertEquals(BigDecimal.ZERO, c.values().get(24).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(51), c.values().get(25).r());
		assertEquals(BigDecimal.valueOf(52), c.values().get(25).i());
		assertEquals(BigDecimal.ZERO, c.values().get(25).j());
		assertEquals(BigDecimal.ZERO, c.values().get(25).k());
		assertEquals(BigDecimal.ZERO, c.values().get(25).l());
		assertEquals(BigDecimal.ZERO, c.values().get(25).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(53), c.values().get(26).r());
		assertEquals(BigDecimal.valueOf(54), c.values().get(26).i());
		assertEquals(BigDecimal.ZERO, c.values().get(26).j());
		assertEquals(BigDecimal.ZERO, c.values().get(26).k());
		assertEquals(BigDecimal.ZERO, c.values().get(26).l());
		assertEquals(BigDecimal.ZERO, c.values().get(26).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(26).k0());
		
		TensorStringRepresentation d = new TensorStringRepresentation("[[[{1,2,3},{4,5,6},{7,8,9}][{10,11,12},{13,14,15},{16,17,18}][{19,20,21},{22,23,24},{25,26,27}]][[{28,29,30},{31,32,33},{34,35,36}][{37,38,39},{40,41,42},{43,44,45}][{46,47,48},{49,50,51},{52,53,54}]][[{55,56,57},{58,59,60},{61,62,63}][{64,65,66},{67,68,69},{70,71,72}][{73,74,75},{76,77,78},{79,80,81}]]]");
		assertArrayEquals(new long[] {3,3,3}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(37), d.values().get(12).r());
		assertEquals(BigDecimal.valueOf(38), d.values().get(12).i());
		assertEquals(BigDecimal.valueOf(39), d.values().get(12).j());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k());
		assertEquals(BigDecimal.ZERO, d.values().get(12).l());
		assertEquals(BigDecimal.ZERO, d.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(40), d.values().get(13).r());
		assertEquals(BigDecimal.valueOf(41), d.values().get(13).i());
		assertEquals(BigDecimal.valueOf(42), d.values().get(13).j());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k());
		assertEquals(BigDecimal.ZERO, d.values().get(13).l());
		assertEquals(BigDecimal.ZERO, d.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(43), d.values().get(14).r());
		assertEquals(BigDecimal.valueOf(44), d.values().get(14).i());
		assertEquals(BigDecimal.valueOf(45), d.values().get(14).j());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k());
		assertEquals(BigDecimal.ZERO, d.values().get(14).l());
		assertEquals(BigDecimal.ZERO, d.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(46), d.values().get(15).r());
		assertEquals(BigDecimal.valueOf(47), d.values().get(15).i());
		assertEquals(BigDecimal.valueOf(48), d.values().get(15).j());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k());
		assertEquals(BigDecimal.ZERO, d.values().get(15).l());
		assertEquals(BigDecimal.ZERO, d.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(49), d.values().get(16).r());
		assertEquals(BigDecimal.valueOf(50), d.values().get(16).i());
		assertEquals(BigDecimal.valueOf(51), d.values().get(16).j());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k());
		assertEquals(BigDecimal.ZERO, d.values().get(16).l());
		assertEquals(BigDecimal.ZERO, d.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(52), d.values().get(17).r());
		assertEquals(BigDecimal.valueOf(53), d.values().get(17).i());
		assertEquals(BigDecimal.valueOf(54), d.values().get(17).j());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k());
		assertEquals(BigDecimal.ZERO, d.values().get(17).l());
		assertEquals(BigDecimal.ZERO, d.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(55), d.values().get(18).r());
		assertEquals(BigDecimal.valueOf(56), d.values().get(18).i());
		assertEquals(BigDecimal.valueOf(57), d.values().get(18).j());
		assertEquals(BigDecimal.ZERO, d.values().get(18).k());
		assertEquals(BigDecimal.ZERO, d.values().get(18).l());
		assertEquals(BigDecimal.ZERO, d.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(58), d.values().get(19).r());
		assertEquals(BigDecimal.valueOf(59), d.values().get(19).i());
		assertEquals(BigDecimal.valueOf(60), d.values().get(19).j());
		assertEquals(BigDecimal.ZERO, d.values().get(19).k());
		assertEquals(BigDecimal.ZERO, d.values().get(19).l());
		assertEquals(BigDecimal.ZERO, d.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(61), d.values().get(20).r());
		assertEquals(BigDecimal.valueOf(62), d.values().get(20).i());
		assertEquals(BigDecimal.valueOf(63), d.values().get(20).j());
		assertEquals(BigDecimal.ZERO, d.values().get(20).k());
		assertEquals(BigDecimal.ZERO, d.values().get(20).l());
		assertEquals(BigDecimal.ZERO, d.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(64), d.values().get(21).r());
		assertEquals(BigDecimal.valueOf(65), d.values().get(21).i());
		assertEquals(BigDecimal.valueOf(66), d.values().get(21).j());
		assertEquals(BigDecimal.ZERO, d.values().get(21).k());
		assertEquals(BigDecimal.ZERO, d.values().get(21).l());
		assertEquals(BigDecimal.ZERO, d.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(67), d.values().get(22).r());
		assertEquals(BigDecimal.valueOf(68), d.values().get(22).i());
		assertEquals(BigDecimal.valueOf(69), d.values().get(22).j());
		assertEquals(BigDecimal.ZERO, d.values().get(22).k());
		assertEquals(BigDecimal.ZERO, d.values().get(22).l());
		assertEquals(BigDecimal.ZERO, d.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(70), d.values().get(23).r());
		assertEquals(BigDecimal.valueOf(71), d.values().get(23).i());
		assertEquals(BigDecimal.valueOf(72), d.values().get(23).j());
		assertEquals(BigDecimal.ZERO, d.values().get(23).k());
		assertEquals(BigDecimal.ZERO, d.values().get(23).l());
		assertEquals(BigDecimal.ZERO, d.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(73), d.values().get(24).r());
		assertEquals(BigDecimal.valueOf(74), d.values().get(24).i());
		assertEquals(BigDecimal.valueOf(75), d.values().get(24).j());
		assertEquals(BigDecimal.ZERO, d.values().get(24).k());
		assertEquals(BigDecimal.ZERO, d.values().get(24).l());
		assertEquals(BigDecimal.ZERO, d.values().get(24).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(76), d.values().get(25).r());
		assertEquals(BigDecimal.valueOf(77), d.values().get(25).i());
		assertEquals(BigDecimal.valueOf(78), d.values().get(25).j());
		assertEquals(BigDecimal.ZERO, d.values().get(25).k());
		assertEquals(BigDecimal.ZERO, d.values().get(25).l());
		assertEquals(BigDecimal.ZERO, d.values().get(25).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(79), d.values().get(26).r());
		assertEquals(BigDecimal.valueOf(80), d.values().get(26).i());
		assertEquals(BigDecimal.valueOf(81), d.values().get(26).j());
		assertEquals(BigDecimal.ZERO, d.values().get(26).k());
		assertEquals(BigDecimal.ZERO, d.values().get(26).l());
		assertEquals(BigDecimal.ZERO, d.values().get(26).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(26).k0());
		
		TensorStringRepresentation e = new TensorStringRepresentation("[[[{1,2,3,4},{5,6,7,8},{9,10,11,12}][{13,14,15,16},{17,18,19,20},{21,22,23,24}][{25,26,27,28},{29,30,31,32},{33,34,35,36}]][[{37,38,39,40},{41,42,43,44},{45,46,47,48}][{49,50,51,52},{53,54,55,56},{57,58,59,60}][{61,62,63,64},{65,66,67,68},{69,70,71,72}]][[{73,74,75,76},{77,78,79,80},{81,82,83,84}][{85,86,87,88},{89,90,91,92},{93,94,95,96}][{97,98,99,100},{101,102,103,104},{105,106,107,108}]]]");
		assertArrayEquals(new long[] {3,3,3}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(49), e.values().get(12).r());
		assertEquals(BigDecimal.valueOf(50), e.values().get(12).i());
		assertEquals(BigDecimal.valueOf(51), e.values().get(12).j());
		assertEquals(BigDecimal.valueOf(52), e.values().get(12).k());
		assertEquals(BigDecimal.ZERO, e.values().get(12).l());
		assertEquals(BigDecimal.ZERO, e.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(53), e.values().get(13).r());
		assertEquals(BigDecimal.valueOf(54), e.values().get(13).i());
		assertEquals(BigDecimal.valueOf(55), e.values().get(13).j());
		assertEquals(BigDecimal.valueOf(56), e.values().get(13).k());
		assertEquals(BigDecimal.ZERO, e.values().get(13).l());
		assertEquals(BigDecimal.ZERO, e.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(57), e.values().get(14).r());
		assertEquals(BigDecimal.valueOf(58), e.values().get(14).i());
		assertEquals(BigDecimal.valueOf(59), e.values().get(14).j());
		assertEquals(BigDecimal.valueOf(60), e.values().get(14).k());
		assertEquals(BigDecimal.ZERO, e.values().get(14).l());
		assertEquals(BigDecimal.ZERO, e.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(61), e.values().get(15).r());
		assertEquals(BigDecimal.valueOf(62), e.values().get(15).i());
		assertEquals(BigDecimal.valueOf(63), e.values().get(15).j());
		assertEquals(BigDecimal.valueOf(64), e.values().get(15).k());
		assertEquals(BigDecimal.ZERO, e.values().get(15).l());
		assertEquals(BigDecimal.ZERO, e.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(65), e.values().get(16).r());
		assertEquals(BigDecimal.valueOf(66), e.values().get(16).i());
		assertEquals(BigDecimal.valueOf(67), e.values().get(16).j());
		assertEquals(BigDecimal.valueOf(68), e.values().get(16).k());
		assertEquals(BigDecimal.ZERO, e.values().get(16).l());
		assertEquals(BigDecimal.ZERO, e.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(69), e.values().get(17).r());
		assertEquals(BigDecimal.valueOf(70), e.values().get(17).i());
		assertEquals(BigDecimal.valueOf(71), e.values().get(17).j());
		assertEquals(BigDecimal.valueOf(72), e.values().get(17).k());
		assertEquals(BigDecimal.ZERO, e.values().get(17).l());
		assertEquals(BigDecimal.ZERO, e.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(73), e.values().get(18).r());
		assertEquals(BigDecimal.valueOf(74), e.values().get(18).i());
		assertEquals(BigDecimal.valueOf(75), e.values().get(18).j());
		assertEquals(BigDecimal.valueOf(76), e.values().get(18).k());
		assertEquals(BigDecimal.ZERO, e.values().get(18).l());
		assertEquals(BigDecimal.ZERO, e.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(77), e.values().get(19).r());
		assertEquals(BigDecimal.valueOf(78), e.values().get(19).i());
		assertEquals(BigDecimal.valueOf(79), e.values().get(19).j());
		assertEquals(BigDecimal.valueOf(80), e.values().get(19).k());
		assertEquals(BigDecimal.ZERO, e.values().get(19).l());
		assertEquals(BigDecimal.ZERO, e.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(81), e.values().get(20).r());
		assertEquals(BigDecimal.valueOf(82), e.values().get(20).i());
		assertEquals(BigDecimal.valueOf(83), e.values().get(20).j());
		assertEquals(BigDecimal.valueOf(84), e.values().get(20).k());
		assertEquals(BigDecimal.ZERO, e.values().get(20).l());
		assertEquals(BigDecimal.ZERO, e.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(85), e.values().get(21).r());
		assertEquals(BigDecimal.valueOf(86), e.values().get(21).i());
		assertEquals(BigDecimal.valueOf(87), e.values().get(21).j());
		assertEquals(BigDecimal.valueOf(88), e.values().get(21).k());
		assertEquals(BigDecimal.ZERO, e.values().get(21).l());
		assertEquals(BigDecimal.ZERO, e.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(89), e.values().get(22).r());
		assertEquals(BigDecimal.valueOf(90), e.values().get(22).i());
		assertEquals(BigDecimal.valueOf(91), e.values().get(22).j());
		assertEquals(BigDecimal.valueOf(92), e.values().get(22).k());
		assertEquals(BigDecimal.ZERO, e.values().get(22).l());
		assertEquals(BigDecimal.ZERO, e.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(93), e.values().get(23).r());
		assertEquals(BigDecimal.valueOf(94), e.values().get(23).i());
		assertEquals(BigDecimal.valueOf(95), e.values().get(23).j());
		assertEquals(BigDecimal.valueOf(96), e.values().get(23).k());
		assertEquals(BigDecimal.ZERO, e.values().get(23).l());
		assertEquals(BigDecimal.ZERO, e.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(97), e.values().get(24).r());
		assertEquals(BigDecimal.valueOf(98), e.values().get(24).i());
		assertEquals(BigDecimal.valueOf(99), e.values().get(24).j());
		assertEquals(BigDecimal.valueOf(100), e.values().get(24).k());
		assertEquals(BigDecimal.ZERO, e.values().get(24).l());
		assertEquals(BigDecimal.ZERO, e.values().get(24).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(101), e.values().get(25).r());
		assertEquals(BigDecimal.valueOf(102), e.values().get(25).i());
		assertEquals(BigDecimal.valueOf(103), e.values().get(25).j());
		assertEquals(BigDecimal.valueOf(104), e.values().get(25).k());
		assertEquals(BigDecimal.ZERO, e.values().get(25).l());
		assertEquals(BigDecimal.ZERO, e.values().get(25).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(105), e.values().get(26).r());
		assertEquals(BigDecimal.valueOf(106), e.values().get(26).i());
		assertEquals(BigDecimal.valueOf(107), e.values().get(26).j());
		assertEquals(BigDecimal.valueOf(108), e.values().get(26).k());
		assertEquals(BigDecimal.ZERO, e.values().get(26).l());
		assertEquals(BigDecimal.ZERO, e.values().get(26).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(26).k0());
	
		TensorStringRepresentation f = new TensorStringRepresentation("[[[{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15}][{16,17,18,19,20},{21,22,23,24,25},{26,27,28,29,30}][{31,32,33,34,35},{36,37,38,39,40},{41,42,43,44,45}]][[{46,47,48,49,50},{51,52,53,54,55},{56,57,58,59,60}][{61,62,63,64,65},{66,67,68,69,70},{71,72,73,74,75}][{76,77,78,79,80},{81,82,83,84,85},{86,87,88,89,90}]][[{91,92,93,94,95},{96,97,98,99,100},{101,102,103,104,105}][{106,107,108,109,110},{111,112,113,114,115},{116,117,118,119,120}][{121,122,123,124,125},{126,127,128,129,130},{131,132,133,134,135}]]]");
		assertArrayEquals(new long[] {3,3,3}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(61), f.values().get(12).r());
		assertEquals(BigDecimal.valueOf(62), f.values().get(12).i());
		assertEquals(BigDecimal.valueOf(63), f.values().get(12).j());
		assertEquals(BigDecimal.valueOf(64), f.values().get(12).k());
		assertEquals(BigDecimal.valueOf(65), f.values().get(12).l());
		assertEquals(BigDecimal.ZERO, f.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(66), f.values().get(13).r());
		assertEquals(BigDecimal.valueOf(67), f.values().get(13).i());
		assertEquals(BigDecimal.valueOf(68), f.values().get(13).j());
		assertEquals(BigDecimal.valueOf(69), f.values().get(13).k());
		assertEquals(BigDecimal.valueOf(70), f.values().get(13).l());
		assertEquals(BigDecimal.ZERO, f.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(71), f.values().get(14).r());
		assertEquals(BigDecimal.valueOf(72), f.values().get(14).i());
		assertEquals(BigDecimal.valueOf(73), f.values().get(14).j());
		assertEquals(BigDecimal.valueOf(74), f.values().get(14).k());
		assertEquals(BigDecimal.valueOf(75), f.values().get(14).l());
		assertEquals(BigDecimal.ZERO, f.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(76), f.values().get(15).r());
		assertEquals(BigDecimal.valueOf(77), f.values().get(15).i());
		assertEquals(BigDecimal.valueOf(78), f.values().get(15).j());
		assertEquals(BigDecimal.valueOf(79), f.values().get(15).k());
		assertEquals(BigDecimal.valueOf(80), f.values().get(15).l());
		assertEquals(BigDecimal.ZERO, f.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(81), f.values().get(16).r());
		assertEquals(BigDecimal.valueOf(82), f.values().get(16).i());
		assertEquals(BigDecimal.valueOf(83), f.values().get(16).j());
		assertEquals(BigDecimal.valueOf(84), f.values().get(16).k());
		assertEquals(BigDecimal.valueOf(85), f.values().get(16).l());
		assertEquals(BigDecimal.ZERO, f.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(86), f.values().get(17).r());
		assertEquals(BigDecimal.valueOf(87), f.values().get(17).i());
		assertEquals(BigDecimal.valueOf(88), f.values().get(17).j());
		assertEquals(BigDecimal.valueOf(89), f.values().get(17).k());
		assertEquals(BigDecimal.valueOf(90), f.values().get(17).l());
		assertEquals(BigDecimal.ZERO, f.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(91), f.values().get(18).r());
		assertEquals(BigDecimal.valueOf(92), f.values().get(18).i());
		assertEquals(BigDecimal.valueOf(93), f.values().get(18).j());
		assertEquals(BigDecimal.valueOf(94), f.values().get(18).k());
		assertEquals(BigDecimal.valueOf(95), f.values().get(18).l());
		assertEquals(BigDecimal.ZERO, f.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(96), f.values().get(19).r());
		assertEquals(BigDecimal.valueOf(97), f.values().get(19).i());
		assertEquals(BigDecimal.valueOf(98), f.values().get(19).j());
		assertEquals(BigDecimal.valueOf(99), f.values().get(19).k());
		assertEquals(BigDecimal.valueOf(100), f.values().get(19).l());
		assertEquals(BigDecimal.ZERO, f.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(101), f.values().get(20).r());
		assertEquals(BigDecimal.valueOf(102), f.values().get(20).i());
		assertEquals(BigDecimal.valueOf(103), f.values().get(20).j());
		assertEquals(BigDecimal.valueOf(104), f.values().get(20).k());
		assertEquals(BigDecimal.valueOf(105), f.values().get(20).l());
		assertEquals(BigDecimal.ZERO, f.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(106), f.values().get(21).r());
		assertEquals(BigDecimal.valueOf(107), f.values().get(21).i());
		assertEquals(BigDecimal.valueOf(108), f.values().get(21).j());
		assertEquals(BigDecimal.valueOf(109), f.values().get(21).k());
		assertEquals(BigDecimal.valueOf(110), f.values().get(21).l());
		assertEquals(BigDecimal.ZERO, f.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(111), f.values().get(22).r());
		assertEquals(BigDecimal.valueOf(112), f.values().get(22).i());
		assertEquals(BigDecimal.valueOf(113), f.values().get(22).j());
		assertEquals(BigDecimal.valueOf(114), f.values().get(22).k());
		assertEquals(BigDecimal.valueOf(115), f.values().get(22).l());
		assertEquals(BigDecimal.ZERO, f.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(116), f.values().get(23).r());
		assertEquals(BigDecimal.valueOf(117), f.values().get(23).i());
		assertEquals(BigDecimal.valueOf(118), f.values().get(23).j());
		assertEquals(BigDecimal.valueOf(119), f.values().get(23).k());
		assertEquals(BigDecimal.valueOf(120), f.values().get(23).l());
		assertEquals(BigDecimal.ZERO, f.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(121), f.values().get(24).r());
		assertEquals(BigDecimal.valueOf(122), f.values().get(24).i());
		assertEquals(BigDecimal.valueOf(123), f.values().get(24).j());
		assertEquals(BigDecimal.valueOf(124), f.values().get(24).k());
		assertEquals(BigDecimal.valueOf(125), f.values().get(24).l());
		assertEquals(BigDecimal.ZERO, f.values().get(24).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(126), f.values().get(25).r());
		assertEquals(BigDecimal.valueOf(127), f.values().get(25).i());
		assertEquals(BigDecimal.valueOf(128), f.values().get(25).j());
		assertEquals(BigDecimal.valueOf(129), f.values().get(25).k());
		assertEquals(BigDecimal.valueOf(130), f.values().get(25).l());
		assertEquals(BigDecimal.ZERO, f.values().get(25).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(131), f.values().get(26).r());
		assertEquals(BigDecimal.valueOf(132), f.values().get(26).i());
		assertEquals(BigDecimal.valueOf(133), f.values().get(26).j());
		assertEquals(BigDecimal.valueOf(134), f.values().get(26).k());
		assertEquals(BigDecimal.valueOf(135), f.values().get(26).l());
		assertEquals(BigDecimal.ZERO, f.values().get(26).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(26).k0());
	
		TensorStringRepresentation g = new TensorStringRepresentation("[[[{1,2,3,4,5,6},{7,8,9,10,11,12},{13,14,15,16,17,18}][{19,20,21,22,23,24},{25,26,27,28,29,30},{31,32,33,34,35,36}][{37,38,39,40,41,42},{43,44,45,46,47,48},{49,50,51,52,53,54}]][[{55,56,57,58,59,60},{61,62,63,64,65,66},{67,68,69,70,71,72}][{73,74,75,76,77,78},{79,80,81,82,83,84},{85,86,87,88,89,90}][{91,92,93,94,95,96},{97,98,99,100,101,102},{103,104,105,106,107,108}]][[{109,110,111,112,113,114},{115,116,117,118,119,120},{121,122,123,124,125,126}][{127,128,129,130,131,132},{133,134,135,136,137,138},{139,140,141,142,143,144}][{145,146,147,148,149,150},{151,152,153,154,155,156},{157,158,159,160,161,162}]]]");
		assertArrayEquals(new long[] {3,3,3}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(73), g.values().get(12).r());
		assertEquals(BigDecimal.valueOf(74), g.values().get(12).i());
		assertEquals(BigDecimal.valueOf(75), g.values().get(12).j());
		assertEquals(BigDecimal.valueOf(76), g.values().get(12).k());
		assertEquals(BigDecimal.valueOf(77), g.values().get(12).l());
		assertEquals(BigDecimal.valueOf(78), g.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(79), g.values().get(13).r());
		assertEquals(BigDecimal.valueOf(80), g.values().get(13).i());
		assertEquals(BigDecimal.valueOf(81), g.values().get(13).j());
		assertEquals(BigDecimal.valueOf(82), g.values().get(13).k());
		assertEquals(BigDecimal.valueOf(83), g.values().get(13).l());
		assertEquals(BigDecimal.valueOf(84), g.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(85), g.values().get(14).r());
		assertEquals(BigDecimal.valueOf(86), g.values().get(14).i());
		assertEquals(BigDecimal.valueOf(87), g.values().get(14).j());
		assertEquals(BigDecimal.valueOf(88), g.values().get(14).k());
		assertEquals(BigDecimal.valueOf(89), g.values().get(14).l());
		assertEquals(BigDecimal.valueOf(90), g.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(91), g.values().get(15).r());
		assertEquals(BigDecimal.valueOf(92), g.values().get(15).i());
		assertEquals(BigDecimal.valueOf(93), g.values().get(15).j());
		assertEquals(BigDecimal.valueOf(94), g.values().get(15).k());
		assertEquals(BigDecimal.valueOf(95), g.values().get(15).l());
		assertEquals(BigDecimal.valueOf(96), g.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(97), g.values().get(16).r());
		assertEquals(BigDecimal.valueOf(98), g.values().get(16).i());
		assertEquals(BigDecimal.valueOf(99), g.values().get(16).j());
		assertEquals(BigDecimal.valueOf(100), g.values().get(16).k());
		assertEquals(BigDecimal.valueOf(101), g.values().get(16).l());
		assertEquals(BigDecimal.valueOf(102), g.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(103), g.values().get(17).r());
		assertEquals(BigDecimal.valueOf(104), g.values().get(17).i());
		assertEquals(BigDecimal.valueOf(105), g.values().get(17).j());
		assertEquals(BigDecimal.valueOf(106), g.values().get(17).k());
		assertEquals(BigDecimal.valueOf(107), g.values().get(17).l());
		assertEquals(BigDecimal.valueOf(108), g.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(109), g.values().get(18).r());
		assertEquals(BigDecimal.valueOf(110), g.values().get(18).i());
		assertEquals(BigDecimal.valueOf(111), g.values().get(18).j());
		assertEquals(BigDecimal.valueOf(112), g.values().get(18).k());
		assertEquals(BigDecimal.valueOf(113), g.values().get(18).l());
		assertEquals(BigDecimal.valueOf(114), g.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(115), g.values().get(19).r());
		assertEquals(BigDecimal.valueOf(116), g.values().get(19).i());
		assertEquals(BigDecimal.valueOf(117), g.values().get(19).j());
		assertEquals(BigDecimal.valueOf(118), g.values().get(19).k());
		assertEquals(BigDecimal.valueOf(119), g.values().get(19).l());
		assertEquals(BigDecimal.valueOf(120), g.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(121), g.values().get(20).r());
		assertEquals(BigDecimal.valueOf(122), g.values().get(20).i());
		assertEquals(BigDecimal.valueOf(123), g.values().get(20).j());
		assertEquals(BigDecimal.valueOf(124), g.values().get(20).k());
		assertEquals(BigDecimal.valueOf(125), g.values().get(20).l());
		assertEquals(BigDecimal.valueOf(126), g.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(127), g.values().get(21).r());
		assertEquals(BigDecimal.valueOf(128), g.values().get(21).i());
		assertEquals(BigDecimal.valueOf(129), g.values().get(21).j());
		assertEquals(BigDecimal.valueOf(130), g.values().get(21).k());
		assertEquals(BigDecimal.valueOf(131), g.values().get(21).l());
		assertEquals(BigDecimal.valueOf(132), g.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(133), g.values().get(22).r());
		assertEquals(BigDecimal.valueOf(134), g.values().get(22).i());
		assertEquals(BigDecimal.valueOf(135), g.values().get(22).j());
		assertEquals(BigDecimal.valueOf(136), g.values().get(22).k());
		assertEquals(BigDecimal.valueOf(137), g.values().get(22).l());
		assertEquals(BigDecimal.valueOf(138), g.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(139), g.values().get(23).r());
		assertEquals(BigDecimal.valueOf(140), g.values().get(23).i());
		assertEquals(BigDecimal.valueOf(141), g.values().get(23).j());
		assertEquals(BigDecimal.valueOf(142), g.values().get(23).k());
		assertEquals(BigDecimal.valueOf(143), g.values().get(23).l());
		assertEquals(BigDecimal.valueOf(144), g.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(145), g.values().get(24).r());
		assertEquals(BigDecimal.valueOf(146), g.values().get(24).i());
		assertEquals(BigDecimal.valueOf(147), g.values().get(24).j());
		assertEquals(BigDecimal.valueOf(148), g.values().get(24).k());
		assertEquals(BigDecimal.valueOf(149), g.values().get(24).l());
		assertEquals(BigDecimal.valueOf(150), g.values().get(24).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(151), g.values().get(25).r());
		assertEquals(BigDecimal.valueOf(152), g.values().get(25).i());
		assertEquals(BigDecimal.valueOf(153), g.values().get(25).j());
		assertEquals(BigDecimal.valueOf(154), g.values().get(25).k());
		assertEquals(BigDecimal.valueOf(155), g.values().get(25).l());
		assertEquals(BigDecimal.valueOf(156), g.values().get(25).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(157), g.values().get(26).r());
		assertEquals(BigDecimal.valueOf(158), g.values().get(26).i());
		assertEquals(BigDecimal.valueOf(159), g.values().get(26).j());
		assertEquals(BigDecimal.valueOf(160), g.values().get(26).k());
		assertEquals(BigDecimal.valueOf(161), g.values().get(26).l());
		assertEquals(BigDecimal.valueOf(162), g.values().get(26).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(26).k0());
	
		TensorStringRepresentation h = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7},{8,9,10,11,12,13,14},{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28},{29,30,31,32,33,34,35},{36,37,38,39,40,41,42}][{43,44,45,46,47,48,49},{50,51,52,53,54,55,56},{57,58,59,60,61,62,63}]][[{64,65,66,67,68,69,70},{71,72,73,74,75,76,77},{78,79,80,81,82,83,84}][{85,86,87,88,89,90,91},{92,93,94,95,96,97,98},{99,100,101,102,103,104,105}][{106,107,108,109,110,111,112},{113,114,115,116,117,118,119},{120,121,122,123,124,125,126}]][[{127,128,129,130,131,132,133},{134,135,136,137,138,139,140},{141,142,143,144,145,146,147}][{148,149,150,151,152,153,154},{155,156,157,158,159,160,161},{162,163,164,165,166,167,168}][{169,170,171,172,173,174,175},{176,177,178,179,180,181,182},{183,184,185,186,187,188,189}]]]");
		assertArrayEquals(new long[] {3,3,3}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(85), h.values().get(12).r());
		assertEquals(BigDecimal.valueOf(86), h.values().get(12).i());
		assertEquals(BigDecimal.valueOf(87), h.values().get(12).j());
		assertEquals(BigDecimal.valueOf(88), h.values().get(12).k());
		assertEquals(BigDecimal.valueOf(89), h.values().get(12).l());
		assertEquals(BigDecimal.valueOf(90), h.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(91), h.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(92), h.values().get(13).r());
		assertEquals(BigDecimal.valueOf(93), h.values().get(13).i());
		assertEquals(BigDecimal.valueOf(94), h.values().get(13).j());
		assertEquals(BigDecimal.valueOf(95), h.values().get(13).k());
		assertEquals(BigDecimal.valueOf(96), h.values().get(13).l());
		assertEquals(BigDecimal.valueOf(97), h.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(98), h.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(99), h.values().get(14).r());
		assertEquals(BigDecimal.valueOf(100), h.values().get(14).i());
		assertEquals(BigDecimal.valueOf(101), h.values().get(14).j());
		assertEquals(BigDecimal.valueOf(102), h.values().get(14).k());
		assertEquals(BigDecimal.valueOf(103), h.values().get(14).l());
		assertEquals(BigDecimal.valueOf(104), h.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(105), h.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(106), h.values().get(15).r());
		assertEquals(BigDecimal.valueOf(107), h.values().get(15).i());
		assertEquals(BigDecimal.valueOf(108), h.values().get(15).j());
		assertEquals(BigDecimal.valueOf(109), h.values().get(15).k());
		assertEquals(BigDecimal.valueOf(110), h.values().get(15).l());
		assertEquals(BigDecimal.valueOf(111), h.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(112), h.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(113), h.values().get(16).r());
		assertEquals(BigDecimal.valueOf(114), h.values().get(16).i());
		assertEquals(BigDecimal.valueOf(115), h.values().get(16).j());
		assertEquals(BigDecimal.valueOf(116), h.values().get(16).k());
		assertEquals(BigDecimal.valueOf(117), h.values().get(16).l());
		assertEquals(BigDecimal.valueOf(118), h.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(119), h.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(120), h.values().get(17).r());
		assertEquals(BigDecimal.valueOf(121), h.values().get(17).i());
		assertEquals(BigDecimal.valueOf(122), h.values().get(17).j());
		assertEquals(BigDecimal.valueOf(123), h.values().get(17).k());
		assertEquals(BigDecimal.valueOf(124), h.values().get(17).l());
		assertEquals(BigDecimal.valueOf(125), h.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(126), h.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(127), h.values().get(18).r());
		assertEquals(BigDecimal.valueOf(128), h.values().get(18).i());
		assertEquals(BigDecimal.valueOf(129), h.values().get(18).j());
		assertEquals(BigDecimal.valueOf(130), h.values().get(18).k());
		assertEquals(BigDecimal.valueOf(131), h.values().get(18).l());
		assertEquals(BigDecimal.valueOf(132), h.values().get(18).i0());
		assertEquals(BigDecimal.valueOf(133), h.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(134), h.values().get(19).r());
		assertEquals(BigDecimal.valueOf(135), h.values().get(19).i());
		assertEquals(BigDecimal.valueOf(136), h.values().get(19).j());
		assertEquals(BigDecimal.valueOf(137), h.values().get(19).k());
		assertEquals(BigDecimal.valueOf(138), h.values().get(19).l());
		assertEquals(BigDecimal.valueOf(139), h.values().get(19).i0());
		assertEquals(BigDecimal.valueOf(140), h.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(141), h.values().get(20).r());
		assertEquals(BigDecimal.valueOf(142), h.values().get(20).i());
		assertEquals(BigDecimal.valueOf(143), h.values().get(20).j());
		assertEquals(BigDecimal.valueOf(144), h.values().get(20).k());
		assertEquals(BigDecimal.valueOf(145), h.values().get(20).l());
		assertEquals(BigDecimal.valueOf(146), h.values().get(20).i0());
		assertEquals(BigDecimal.valueOf(147), h.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(148), h.values().get(21).r());
		assertEquals(BigDecimal.valueOf(149), h.values().get(21).i());
		assertEquals(BigDecimal.valueOf(150), h.values().get(21).j());
		assertEquals(BigDecimal.valueOf(151), h.values().get(21).k());
		assertEquals(BigDecimal.valueOf(152), h.values().get(21).l());
		assertEquals(BigDecimal.valueOf(153), h.values().get(21).i0());
		assertEquals(BigDecimal.valueOf(154), h.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(155), h.values().get(22).r());
		assertEquals(BigDecimal.valueOf(156), h.values().get(22).i());
		assertEquals(BigDecimal.valueOf(157), h.values().get(22).j());
		assertEquals(BigDecimal.valueOf(158), h.values().get(22).k());
		assertEquals(BigDecimal.valueOf(159), h.values().get(22).l());
		assertEquals(BigDecimal.valueOf(160), h.values().get(22).i0());
		assertEquals(BigDecimal.valueOf(161), h.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(162), h.values().get(23).r());
		assertEquals(BigDecimal.valueOf(163), h.values().get(23).i());
		assertEquals(BigDecimal.valueOf(164), h.values().get(23).j());
		assertEquals(BigDecimal.valueOf(165), h.values().get(23).k());
		assertEquals(BigDecimal.valueOf(166), h.values().get(23).l());
		assertEquals(BigDecimal.valueOf(167), h.values().get(23).i0());
		assertEquals(BigDecimal.valueOf(168), h.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(169), h.values().get(24).r());
		assertEquals(BigDecimal.valueOf(170), h.values().get(24).i());
		assertEquals(BigDecimal.valueOf(171), h.values().get(24).j());
		assertEquals(BigDecimal.valueOf(172), h.values().get(24).k());
		assertEquals(BigDecimal.valueOf(173), h.values().get(24).l());
		assertEquals(BigDecimal.valueOf(174), h.values().get(24).i0());
		assertEquals(BigDecimal.valueOf(175), h.values().get(24).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(176), h.values().get(25).r());
		assertEquals(BigDecimal.valueOf(177), h.values().get(25).i());
		assertEquals(BigDecimal.valueOf(178), h.values().get(25).j());
		assertEquals(BigDecimal.valueOf(179), h.values().get(25).k());
		assertEquals(BigDecimal.valueOf(180), h.values().get(25).l());
		assertEquals(BigDecimal.valueOf(181), h.values().get(25).i0());
		assertEquals(BigDecimal.valueOf(182), h.values().get(25).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(183), h.values().get(26).r());
		assertEquals(BigDecimal.valueOf(184), h.values().get(26).i());
		assertEquals(BigDecimal.valueOf(185), h.values().get(26).j());
		assertEquals(BigDecimal.valueOf(186), h.values().get(26).k());
		assertEquals(BigDecimal.valueOf(187), h.values().get(26).l());
		assertEquals(BigDecimal.valueOf(188), h.values().get(26).i0());
		assertEquals(BigDecimal.valueOf(189), h.values().get(26).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(26).k0());
	
		TensorStringRepresentation i = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8},{9,10,11,12,13,14,15,16},{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32},{33,34,35,36,37,38,39,40},{41,42,43,44,45,46,47,48}][{49,50,51,52,53,54,55,56},{57,58,59,60,61,62,63,64},{65,66,67,68,69,70,71,72}]][[{73,74,75,76,77,78,79,80},{81,82,83,84,85,86,87,88},{89,90,91,92,93,94,95,96}][{97,98,99,100,101,102,103,104},{105,106,107,108,109,110,111,112},{113,114,115,116,117,118,119,120}][{121,122,123,124,125,126,127,128},{129,130,131,132,133,134,135,136},{137,138,139,140,141,142,143,144}]][[{145,146,147,148,149,150,151,152},{153,154,155,156,157,158,159,160},{161,162,163,164,165,166,167,168}][{169,170,171,172,173,174,175,176},{177,178,179,180,181,182,183,184},{185,186,187,188,189,190,191,192}][{193,194,195,196,197,198,199,200},{201,202,203,204,205,206,207,208},{209,210,211,212,213,214,215,216}]]]");
		assertArrayEquals(new long[] {3,3,3}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(97), i.values().get(12).r());
		assertEquals(BigDecimal.valueOf(98), i.values().get(12).i());
		assertEquals(BigDecimal.valueOf(99), i.values().get(12).j());
		assertEquals(BigDecimal.valueOf(100), i.values().get(12).k());
		assertEquals(BigDecimal.valueOf(101), i.values().get(12).l());
		assertEquals(BigDecimal.valueOf(102), i.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(103), i.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(104), i.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(105), i.values().get(13).r());
		assertEquals(BigDecimal.valueOf(106), i.values().get(13).i());
		assertEquals(BigDecimal.valueOf(107), i.values().get(13).j());
		assertEquals(BigDecimal.valueOf(108), i.values().get(13).k());
		assertEquals(BigDecimal.valueOf(109), i.values().get(13).l());
		assertEquals(BigDecimal.valueOf(110), i.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(111), i.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(112), i.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(113), i.values().get(14).r());
		assertEquals(BigDecimal.valueOf(114), i.values().get(14).i());
		assertEquals(BigDecimal.valueOf(115), i.values().get(14).j());
		assertEquals(BigDecimal.valueOf(116), i.values().get(14).k());
		assertEquals(BigDecimal.valueOf(117), i.values().get(14).l());
		assertEquals(BigDecimal.valueOf(118), i.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(119), i.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(120), i.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(121), i.values().get(15).r());
		assertEquals(BigDecimal.valueOf(122), i.values().get(15).i());
		assertEquals(BigDecimal.valueOf(123), i.values().get(15).j());
		assertEquals(BigDecimal.valueOf(124), i.values().get(15).k());
		assertEquals(BigDecimal.valueOf(125), i.values().get(15).l());
		assertEquals(BigDecimal.valueOf(126), i.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(127), i.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(128), i.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(129), i.values().get(16).r());
		assertEquals(BigDecimal.valueOf(130), i.values().get(16).i());
		assertEquals(BigDecimal.valueOf(131), i.values().get(16).j());
		assertEquals(BigDecimal.valueOf(132), i.values().get(16).k());
		assertEquals(BigDecimal.valueOf(133), i.values().get(16).l());
		assertEquals(BigDecimal.valueOf(134), i.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(135), i.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(136), i.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(137), i.values().get(17).r());
		assertEquals(BigDecimal.valueOf(138), i.values().get(17).i());
		assertEquals(BigDecimal.valueOf(139), i.values().get(17).j());
		assertEquals(BigDecimal.valueOf(140), i.values().get(17).k());
		assertEquals(BigDecimal.valueOf(141), i.values().get(17).l());
		assertEquals(BigDecimal.valueOf(142), i.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(143), i.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(144), i.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(145), i.values().get(18).r());
		assertEquals(BigDecimal.valueOf(146), i.values().get(18).i());
		assertEquals(BigDecimal.valueOf(147), i.values().get(18).j());
		assertEquals(BigDecimal.valueOf(148), i.values().get(18).k());
		assertEquals(BigDecimal.valueOf(149), i.values().get(18).l());
		assertEquals(BigDecimal.valueOf(150), i.values().get(18).i0());
		assertEquals(BigDecimal.valueOf(151), i.values().get(18).j0());
		assertEquals(BigDecimal.valueOf(152), i.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(153), i.values().get(19).r());
		assertEquals(BigDecimal.valueOf(154), i.values().get(19).i());
		assertEquals(BigDecimal.valueOf(155), i.values().get(19).j());
		assertEquals(BigDecimal.valueOf(156), i.values().get(19).k());
		assertEquals(BigDecimal.valueOf(157), i.values().get(19).l());
		assertEquals(BigDecimal.valueOf(158), i.values().get(19).i0());
		assertEquals(BigDecimal.valueOf(159), i.values().get(19).j0());
		assertEquals(BigDecimal.valueOf(160), i.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(161), i.values().get(20).r());
		assertEquals(BigDecimal.valueOf(162), i.values().get(20).i());
		assertEquals(BigDecimal.valueOf(163), i.values().get(20).j());
		assertEquals(BigDecimal.valueOf(164), i.values().get(20).k());
		assertEquals(BigDecimal.valueOf(165), i.values().get(20).l());
		assertEquals(BigDecimal.valueOf(166), i.values().get(20).i0());
		assertEquals(BigDecimal.valueOf(167), i.values().get(20).j0());
		assertEquals(BigDecimal.valueOf(168), i.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(169), i.values().get(21).r());
		assertEquals(BigDecimal.valueOf(170), i.values().get(21).i());
		assertEquals(BigDecimal.valueOf(171), i.values().get(21).j());
		assertEquals(BigDecimal.valueOf(172), i.values().get(21).k());
		assertEquals(BigDecimal.valueOf(173), i.values().get(21).l());
		assertEquals(BigDecimal.valueOf(174), i.values().get(21).i0());
		assertEquals(BigDecimal.valueOf(175), i.values().get(21).j0());
		assertEquals(BigDecimal.valueOf(176), i.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(177), i.values().get(22).r());
		assertEquals(BigDecimal.valueOf(178), i.values().get(22).i());
		assertEquals(BigDecimal.valueOf(179), i.values().get(22).j());
		assertEquals(BigDecimal.valueOf(180), i.values().get(22).k());
		assertEquals(BigDecimal.valueOf(181), i.values().get(22).l());
		assertEquals(BigDecimal.valueOf(182), i.values().get(22).i0());
		assertEquals(BigDecimal.valueOf(183), i.values().get(22).j0());
		assertEquals(BigDecimal.valueOf(184), i.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(185), i.values().get(23).r());
		assertEquals(BigDecimal.valueOf(186), i.values().get(23).i());
		assertEquals(BigDecimal.valueOf(187), i.values().get(23).j());
		assertEquals(BigDecimal.valueOf(188), i.values().get(23).k());
		assertEquals(BigDecimal.valueOf(189), i.values().get(23).l());
		assertEquals(BigDecimal.valueOf(190), i.values().get(23).i0());
		assertEquals(BigDecimal.valueOf(191), i.values().get(23).j0());
		assertEquals(BigDecimal.valueOf(192), i.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(193), i.values().get(24).r());
		assertEquals(BigDecimal.valueOf(194), i.values().get(24).i());
		assertEquals(BigDecimal.valueOf(195), i.values().get(24).j());
		assertEquals(BigDecimal.valueOf(196), i.values().get(24).k());
		assertEquals(BigDecimal.valueOf(197), i.values().get(24).l());
		assertEquals(BigDecimal.valueOf(198), i.values().get(24).i0());
		assertEquals(BigDecimal.valueOf(199), i.values().get(24).j0());
		assertEquals(BigDecimal.valueOf(200), i.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(201), i.values().get(25).r());
		assertEquals(BigDecimal.valueOf(202), i.values().get(25).i());
		assertEquals(BigDecimal.valueOf(203), i.values().get(25).j());
		assertEquals(BigDecimal.valueOf(204), i.values().get(25).k());
		assertEquals(BigDecimal.valueOf(205), i.values().get(25).l());
		assertEquals(BigDecimal.valueOf(206), i.values().get(25).i0());
		assertEquals(BigDecimal.valueOf(207), i.values().get(25).j0());
		assertEquals(BigDecimal.valueOf(208), i.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(209), i.values().get(26).r());
		assertEquals(BigDecimal.valueOf(210), i.values().get(26).i());
		assertEquals(BigDecimal.valueOf(211), i.values().get(26).j());
		assertEquals(BigDecimal.valueOf(212), i.values().get(26).k());
		assertEquals(BigDecimal.valueOf(213), i.values().get(26).l());
		assertEquals(BigDecimal.valueOf(214), i.values().get(26).i0());
		assertEquals(BigDecimal.valueOf(215), i.values().get(26).j0());
		assertEquals(BigDecimal.valueOf(216), i.values().get(26).k0());
	
		TensorStringRepresentation j = new TensorStringRepresentation("[[[{1,2,3,4,5,6,7,8,9},{10,11,12,13,14,15,16,17,18},{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36},{37,38,39,40,41,42,43,44,45},{46,47,48,49,50,51,52,53,54}][{55,56,57,58,59,60,61,62,63},{64,65,66,67,68,69,70,71,72},{73,74,75,76,77,78,79,80,81}]][[{82,83,84,85,86,87,88,89,90},{91,92,93,94,95,96,97,98,99},{100,101,102,103,104,105,106,107,108}][{109,110,111,112,113,114,115,116,117},{118,119,120,121,122,123,124,125,126},{127,128,129,130,131,132,133,134,135}][{136,137,138,139,140,141,142,143,144},{145,146,147,148,149,150,151,152,153},{154,155,156,157,158,159,160,161,162}]][[{163,164,165,166,167,168,169,170,171},{172,173,174,175,176,177,178,179,180},{181,182,183,184,185,186,187,188,189}][{190,191,192,193,194,195,196,197,198},{199,200,201,202,203,204,205,206,207},{208,209,210,211,212,213,214,215,216}][{217,218,219,220,221,222,223,224,225},{226,227,228,229,230,231,232,233,234},{235,236,237,238,239,240,241,242,243}]]]");
		assertArrayEquals(new long[] {3,3,3}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(109), j.values().get(12).r());
		assertEquals(BigDecimal.valueOf(110), j.values().get(12).i());
		assertEquals(BigDecimal.valueOf(111), j.values().get(12).j());
		assertEquals(BigDecimal.valueOf(112), j.values().get(12).k());
		assertEquals(BigDecimal.valueOf(113), j.values().get(12).l());
		assertEquals(BigDecimal.valueOf(114), j.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(115), j.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(116), j.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(118), j.values().get(13).r());
		assertEquals(BigDecimal.valueOf(119), j.values().get(13).i());
		assertEquals(BigDecimal.valueOf(120), j.values().get(13).j());
		assertEquals(BigDecimal.valueOf(121), j.values().get(13).k());
		assertEquals(BigDecimal.valueOf(122), j.values().get(13).l());
		assertEquals(BigDecimal.valueOf(123), j.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(124), j.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(125), j.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(127), j.values().get(14).r());
		assertEquals(BigDecimal.valueOf(128), j.values().get(14).i());
		assertEquals(BigDecimal.valueOf(129), j.values().get(14).j());
		assertEquals(BigDecimal.valueOf(130), j.values().get(14).k());
		assertEquals(BigDecimal.valueOf(131), j.values().get(14).l());
		assertEquals(BigDecimal.valueOf(132), j.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(133), j.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(134), j.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(136), j.values().get(15).r());
		assertEquals(BigDecimal.valueOf(137), j.values().get(15).i());
		assertEquals(BigDecimal.valueOf(138), j.values().get(15).j());
		assertEquals(BigDecimal.valueOf(139), j.values().get(15).k());
		assertEquals(BigDecimal.valueOf(140), j.values().get(15).l());
		assertEquals(BigDecimal.valueOf(141), j.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(142), j.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(143), j.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(145), j.values().get(16).r());
		assertEquals(BigDecimal.valueOf(146), j.values().get(16).i());
		assertEquals(BigDecimal.valueOf(147), j.values().get(16).j());
		assertEquals(BigDecimal.valueOf(148), j.values().get(16).k());
		assertEquals(BigDecimal.valueOf(149), j.values().get(16).l());
		assertEquals(BigDecimal.valueOf(150), j.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(151), j.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(152), j.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(154), j.values().get(17).r());
		assertEquals(BigDecimal.valueOf(155), j.values().get(17).i());
		assertEquals(BigDecimal.valueOf(156), j.values().get(17).j());
		assertEquals(BigDecimal.valueOf(157), j.values().get(17).k());
		assertEquals(BigDecimal.valueOf(158), j.values().get(17).l());
		assertEquals(BigDecimal.valueOf(159), j.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(160), j.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(161), j.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(163), j.values().get(18).r());
		assertEquals(BigDecimal.valueOf(164), j.values().get(18).i());
		assertEquals(BigDecimal.valueOf(165), j.values().get(18).j());
		assertEquals(BigDecimal.valueOf(166), j.values().get(18).k());
		assertEquals(BigDecimal.valueOf(167), j.values().get(18).l());
		assertEquals(BigDecimal.valueOf(168), j.values().get(18).i0());
		assertEquals(BigDecimal.valueOf(169), j.values().get(18).j0());
		assertEquals(BigDecimal.valueOf(170), j.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(172), j.values().get(19).r());
		assertEquals(BigDecimal.valueOf(173), j.values().get(19).i());
		assertEquals(BigDecimal.valueOf(174), j.values().get(19).j());
		assertEquals(BigDecimal.valueOf(175), j.values().get(19).k());
		assertEquals(BigDecimal.valueOf(176), j.values().get(19).l());
		assertEquals(BigDecimal.valueOf(177), j.values().get(19).i0());
		assertEquals(BigDecimal.valueOf(178), j.values().get(19).j0());
		assertEquals(BigDecimal.valueOf(179), j.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(181), j.values().get(20).r());
		assertEquals(BigDecimal.valueOf(182), j.values().get(20).i());
		assertEquals(BigDecimal.valueOf(183), j.values().get(20).j());
		assertEquals(BigDecimal.valueOf(184), j.values().get(20).k());
		assertEquals(BigDecimal.valueOf(185), j.values().get(20).l());
		assertEquals(BigDecimal.valueOf(186), j.values().get(20).i0());
		assertEquals(BigDecimal.valueOf(187), j.values().get(20).j0());
		assertEquals(BigDecimal.valueOf(188), j.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(190), j.values().get(21).r());
		assertEquals(BigDecimal.valueOf(191), j.values().get(21).i());
		assertEquals(BigDecimal.valueOf(192), j.values().get(21).j());
		assertEquals(BigDecimal.valueOf(193), j.values().get(21).k());
		assertEquals(BigDecimal.valueOf(194), j.values().get(21).l());
		assertEquals(BigDecimal.valueOf(195), j.values().get(21).i0());
		assertEquals(BigDecimal.valueOf(196), j.values().get(21).j0());
		assertEquals(BigDecimal.valueOf(197), j.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(199), j.values().get(22).r());
		assertEquals(BigDecimal.valueOf(200), j.values().get(22).i());
		assertEquals(BigDecimal.valueOf(201), j.values().get(22).j());
		assertEquals(BigDecimal.valueOf(202), j.values().get(22).k());
		assertEquals(BigDecimal.valueOf(203), j.values().get(22).l());
		assertEquals(BigDecimal.valueOf(204), j.values().get(22).i0());
		assertEquals(BigDecimal.valueOf(205), j.values().get(22).j0());
		assertEquals(BigDecimal.valueOf(206), j.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(208), j.values().get(23).r());
		assertEquals(BigDecimal.valueOf(209), j.values().get(23).i());
		assertEquals(BigDecimal.valueOf(210), j.values().get(23).j());
		assertEquals(BigDecimal.valueOf(211), j.values().get(23).k());
		assertEquals(BigDecimal.valueOf(212), j.values().get(23).l());
		assertEquals(BigDecimal.valueOf(213), j.values().get(23).i0());
		assertEquals(BigDecimal.valueOf(214), j.values().get(23).j0());
		assertEquals(BigDecimal.valueOf(215), j.values().get(23).k0());
		assertEquals(BigDecimal.valueOf(217), j.values().get(24).r());
		assertEquals(BigDecimal.valueOf(218), j.values().get(24).i());
		assertEquals(BigDecimal.valueOf(219), j.values().get(24).j());
		assertEquals(BigDecimal.valueOf(220), j.values().get(24).k());
		assertEquals(BigDecimal.valueOf(221), j.values().get(24).l());
		assertEquals(BigDecimal.valueOf(222), j.values().get(24).i0());
		assertEquals(BigDecimal.valueOf(223), j.values().get(24).j0());
		assertEquals(BigDecimal.valueOf(224), j.values().get(24).k0());
		assertEquals(BigDecimal.valueOf(226), j.values().get(25).r());
		assertEquals(BigDecimal.valueOf(227), j.values().get(25).i());
		assertEquals(BigDecimal.valueOf(228), j.values().get(25).j());
		assertEquals(BigDecimal.valueOf(229), j.values().get(25).k());
		assertEquals(BigDecimal.valueOf(230), j.values().get(25).l());
		assertEquals(BigDecimal.valueOf(231), j.values().get(25).i0());
		assertEquals(BigDecimal.valueOf(232), j.values().get(25).j0());
		assertEquals(BigDecimal.valueOf(233), j.values().get(25).k0());
		assertEquals(BigDecimal.valueOf(235), j.values().get(26).r());
		assertEquals(BigDecimal.valueOf(236), j.values().get(26).i());
		assertEquals(BigDecimal.valueOf(237), j.values().get(26).j());
		assertEquals(BigDecimal.valueOf(238), j.values().get(26).k());
		assertEquals(BigDecimal.valueOf(239), j.values().get(26).l());
		assertEquals(BigDecimal.valueOf(240), j.values().get(26).i0());
		assertEquals(BigDecimal.valueOf(241), j.values().get(26).j0());
		assertEquals(BigDecimal.valueOf(242), j.values().get(26).k0());
	}

	@Test
	public void test4d2x3x4x1() {
		TensorStringRepresentation a = new TensorStringRepresentation("[[[[1][2][3][4]][[5][6][7][8]][[9][10][11][12]]][[[13][14][15][16]][[17][18][19][20]][[21][22][23][24]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, a.dimensions());
		assertEquals(BigDecimal.valueOf(1), a.values().get(0).r());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k());
		assertEquals(BigDecimal.ZERO, a.values().get(0).l());
		assertEquals(BigDecimal.ZERO, a.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), a.values().get(1).r());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k());
		assertEquals(BigDecimal.ZERO, a.values().get(1).l());
		assertEquals(BigDecimal.ZERO, a.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), a.values().get(2).r());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k());
		assertEquals(BigDecimal.ZERO, a.values().get(2).l());
		assertEquals(BigDecimal.ZERO, a.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), a.values().get(3).r());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k());
		assertEquals(BigDecimal.ZERO, a.values().get(3).l());
		assertEquals(BigDecimal.ZERO, a.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), a.values().get(4).r());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k());
		assertEquals(BigDecimal.ZERO, a.values().get(4).l());
		assertEquals(BigDecimal.ZERO, a.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), a.values().get(5).r());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k());
		assertEquals(BigDecimal.ZERO, a.values().get(5).l());
		assertEquals(BigDecimal.ZERO, a.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), a.values().get(6).r());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k());
		assertEquals(BigDecimal.ZERO, a.values().get(6).l());
		assertEquals(BigDecimal.ZERO, a.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), a.values().get(7).r());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k());
		assertEquals(BigDecimal.ZERO, a.values().get(7).l());
		assertEquals(BigDecimal.ZERO, a.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), a.values().get(8).r());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k());
		assertEquals(BigDecimal.ZERO, a.values().get(8).l());
		assertEquals(BigDecimal.ZERO, a.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), a.values().get(9).r());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k());
		assertEquals(BigDecimal.ZERO, a.values().get(9).l());
		assertEquals(BigDecimal.ZERO, a.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), a.values().get(10).r());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k());
		assertEquals(BigDecimal.ZERO, a.values().get(10).l());
		assertEquals(BigDecimal.ZERO, a.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), a.values().get(11).r());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k());
		assertEquals(BigDecimal.ZERO, a.values().get(11).l());
		assertEquals(BigDecimal.ZERO, a.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), a.values().get(12).r());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k());
		assertEquals(BigDecimal.ZERO, a.values().get(12).l());
		assertEquals(BigDecimal.ZERO, a.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), a.values().get(13).r());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k());
		assertEquals(BigDecimal.ZERO, a.values().get(13).l());
		assertEquals(BigDecimal.ZERO, a.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), a.values().get(14).r());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k());
		assertEquals(BigDecimal.ZERO, a.values().get(14).l());
		assertEquals(BigDecimal.ZERO, a.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), a.values().get(15).r());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k());
		assertEquals(BigDecimal.ZERO, a.values().get(15).l());
		assertEquals(BigDecimal.ZERO, a.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), a.values().get(16).r());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k());
		assertEquals(BigDecimal.ZERO, a.values().get(16).l());
		assertEquals(BigDecimal.ZERO, a.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), a.values().get(17).r());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k());
		assertEquals(BigDecimal.ZERO, a.values().get(17).l());
		assertEquals(BigDecimal.ZERO, a.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(19), a.values().get(18).r());
		assertEquals(BigDecimal.ZERO, a.values().get(18).i());
		assertEquals(BigDecimal.ZERO, a.values().get(18).j());
		assertEquals(BigDecimal.ZERO, a.values().get(18).k());
		assertEquals(BigDecimal.ZERO, a.values().get(18).l());
		assertEquals(BigDecimal.ZERO, a.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(20), a.values().get(19).r());
		assertEquals(BigDecimal.ZERO, a.values().get(19).i());
		assertEquals(BigDecimal.ZERO, a.values().get(19).j());
		assertEquals(BigDecimal.ZERO, a.values().get(19).k());
		assertEquals(BigDecimal.ZERO, a.values().get(19).l());
		assertEquals(BigDecimal.ZERO, a.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(21), a.values().get(20).r());
		assertEquals(BigDecimal.ZERO, a.values().get(20).i());
		assertEquals(BigDecimal.ZERO, a.values().get(20).j());
		assertEquals(BigDecimal.ZERO, a.values().get(20).k());
		assertEquals(BigDecimal.ZERO, a.values().get(20).l());
		assertEquals(BigDecimal.ZERO, a.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(22), a.values().get(21).r());
		assertEquals(BigDecimal.ZERO, a.values().get(21).i());
		assertEquals(BigDecimal.ZERO, a.values().get(21).j());
		assertEquals(BigDecimal.ZERO, a.values().get(21).k());
		assertEquals(BigDecimal.ZERO, a.values().get(21).l());
		assertEquals(BigDecimal.ZERO, a.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(23), a.values().get(22).r());
		assertEquals(BigDecimal.ZERO, a.values().get(22).i());
		assertEquals(BigDecimal.ZERO, a.values().get(22).j());
		assertEquals(BigDecimal.ZERO, a.values().get(22).k());
		assertEquals(BigDecimal.ZERO, a.values().get(22).l());
		assertEquals(BigDecimal.ZERO, a.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(24), a.values().get(23).r());
		assertEquals(BigDecimal.ZERO, a.values().get(23).i());
		assertEquals(BigDecimal.ZERO, a.values().get(23).j());
		assertEquals(BigDecimal.ZERO, a.values().get(23).k());
		assertEquals(BigDecimal.ZERO, a.values().get(23).l());
		assertEquals(BigDecimal.ZERO, a.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, a.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, a.values().get(23).k0());
		
		TensorStringRepresentation b = new TensorStringRepresentation("[[[[{1}][{2}][{3}][{4}]][[{5}][{6}][{7}][{8}]][[{9}][{10}][{11}][{12}]]][[[{13}][{14}][{15}][{16}]][[{17}][{18}][{19}][{20}]][[{21}][{22}][{23}][{24}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, b.dimensions());
		assertEquals(BigDecimal.valueOf(1), b.values().get(0).r());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k());
		assertEquals(BigDecimal.ZERO, b.values().get(0).l());
		assertEquals(BigDecimal.ZERO, b.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(2), b.values().get(1).r());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k());
		assertEquals(BigDecimal.ZERO, b.values().get(1).l());
		assertEquals(BigDecimal.ZERO, b.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(3), b.values().get(2).r());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k());
		assertEquals(BigDecimal.ZERO, b.values().get(2).l());
		assertEquals(BigDecimal.ZERO, b.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(4), b.values().get(3).r());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k());
		assertEquals(BigDecimal.ZERO, b.values().get(3).l());
		assertEquals(BigDecimal.ZERO, b.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(5), b.values().get(4).r());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k());
		assertEquals(BigDecimal.ZERO, b.values().get(4).l());
		assertEquals(BigDecimal.ZERO, b.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(6), b.values().get(5).r());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k());
		assertEquals(BigDecimal.ZERO, b.values().get(5).l());
		assertEquals(BigDecimal.ZERO, b.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(7), b.values().get(6).r());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k());
		assertEquals(BigDecimal.ZERO, b.values().get(6).l());
		assertEquals(BigDecimal.ZERO, b.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(8), b.values().get(7).r());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k());
		assertEquals(BigDecimal.ZERO, b.values().get(7).l());
		assertEquals(BigDecimal.ZERO, b.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(9), b.values().get(8).r());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k());
		assertEquals(BigDecimal.ZERO, b.values().get(8).l());
		assertEquals(BigDecimal.ZERO, b.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(10), b.values().get(9).r());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k());
		assertEquals(BigDecimal.ZERO, b.values().get(9).l());
		assertEquals(BigDecimal.ZERO, b.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(11), b.values().get(10).r());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k());
		assertEquals(BigDecimal.ZERO, b.values().get(10).l());
		assertEquals(BigDecimal.ZERO, b.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(12), b.values().get(11).r());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k());
		assertEquals(BigDecimal.ZERO, b.values().get(11).l());
		assertEquals(BigDecimal.ZERO, b.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(13), b.values().get(12).r());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k());
		assertEquals(BigDecimal.ZERO, b.values().get(12).l());
		assertEquals(BigDecimal.ZERO, b.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(14), b.values().get(13).r());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k());
		assertEquals(BigDecimal.ZERO, b.values().get(13).l());
		assertEquals(BigDecimal.ZERO, b.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(15), b.values().get(14).r());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k());
		assertEquals(BigDecimal.ZERO, b.values().get(14).l());
		assertEquals(BigDecimal.ZERO, b.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(16), b.values().get(15).r());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k());
		assertEquals(BigDecimal.ZERO, b.values().get(15).l());
		assertEquals(BigDecimal.ZERO, b.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(17), b.values().get(16).r());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k());
		assertEquals(BigDecimal.ZERO, b.values().get(16).l());
		assertEquals(BigDecimal.ZERO, b.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(18), b.values().get(17).r());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k());
		assertEquals(BigDecimal.ZERO, b.values().get(17).l());
		assertEquals(BigDecimal.ZERO, b.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(19), b.values().get(18).r());
		assertEquals(BigDecimal.ZERO, b.values().get(18).i());
		assertEquals(BigDecimal.ZERO, b.values().get(18).j());
		assertEquals(BigDecimal.ZERO, b.values().get(18).k());
		assertEquals(BigDecimal.ZERO, b.values().get(18).l());
		assertEquals(BigDecimal.ZERO, b.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(20), b.values().get(19).r());
		assertEquals(BigDecimal.ZERO, b.values().get(19).i());
		assertEquals(BigDecimal.ZERO, b.values().get(19).j());
		assertEquals(BigDecimal.ZERO, b.values().get(19).k());
		assertEquals(BigDecimal.ZERO, b.values().get(19).l());
		assertEquals(BigDecimal.ZERO, b.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(21), b.values().get(20).r());
		assertEquals(BigDecimal.ZERO, b.values().get(20).i());
		assertEquals(BigDecimal.ZERO, b.values().get(20).j());
		assertEquals(BigDecimal.ZERO, b.values().get(20).k());
		assertEquals(BigDecimal.ZERO, b.values().get(20).l());
		assertEquals(BigDecimal.ZERO, b.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(22), b.values().get(21).r());
		assertEquals(BigDecimal.ZERO, b.values().get(21).i());
		assertEquals(BigDecimal.ZERO, b.values().get(21).j());
		assertEquals(BigDecimal.ZERO, b.values().get(21).k());
		assertEquals(BigDecimal.ZERO, b.values().get(21).l());
		assertEquals(BigDecimal.ZERO, b.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(23), b.values().get(22).r());
		assertEquals(BigDecimal.ZERO, b.values().get(22).i());
		assertEquals(BigDecimal.ZERO, b.values().get(22).j());
		assertEquals(BigDecimal.ZERO, b.values().get(22).k());
		assertEquals(BigDecimal.ZERO, b.values().get(22).l());
		assertEquals(BigDecimal.ZERO, b.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(24), b.values().get(23).r());
		assertEquals(BigDecimal.ZERO, b.values().get(23).i());
		assertEquals(BigDecimal.ZERO, b.values().get(23).j());
		assertEquals(BigDecimal.ZERO, b.values().get(23).k());
		assertEquals(BigDecimal.ZERO, b.values().get(23).l());
		assertEquals(BigDecimal.ZERO, b.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, b.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, b.values().get(23).k0());

		TensorStringRepresentation c = new TensorStringRepresentation("[[[[{1,2}][{3,4}][{5,6}][{7,8}]][[{9,10}][{11,12}][{13,14}][{15,16}]][[{17,18}][{19,20}][{21,22}][{23,24}]]][[[{25,26}][{27,28}][{29,30}][{31,32}]][[{33,34}][{35,36}][{37,38}][{39,40}]][[{41,42}][{43,44}][{45,46}][{47,48}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, c.dimensions());
		assertEquals(BigDecimal.valueOf(1), c.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), c.values().get(0).i());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k());
		assertEquals(BigDecimal.ZERO, c.values().get(0).l());
		assertEquals(BigDecimal.ZERO, c.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(3), c.values().get(1).r());
		assertEquals(BigDecimal.valueOf(4), c.values().get(1).i());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k());
		assertEquals(BigDecimal.ZERO, c.values().get(1).l());
		assertEquals(BigDecimal.ZERO, c.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(5), c.values().get(2).r());
		assertEquals(BigDecimal.valueOf(6), c.values().get(2).i());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k());
		assertEquals(BigDecimal.ZERO, c.values().get(2).l());
		assertEquals(BigDecimal.ZERO, c.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(7), c.values().get(3).r());
		assertEquals(BigDecimal.valueOf(8), c.values().get(3).i());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k());
		assertEquals(BigDecimal.ZERO, c.values().get(3).l());
		assertEquals(BigDecimal.ZERO, c.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(9), c.values().get(4).r());
		assertEquals(BigDecimal.valueOf(10), c.values().get(4).i());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k());
		assertEquals(BigDecimal.ZERO, c.values().get(4).l());
		assertEquals(BigDecimal.ZERO, c.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(11), c.values().get(5).r());
		assertEquals(BigDecimal.valueOf(12), c.values().get(5).i());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k());
		assertEquals(BigDecimal.ZERO, c.values().get(5).l());
		assertEquals(BigDecimal.ZERO, c.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(13), c.values().get(6).r());
		assertEquals(BigDecimal.valueOf(14), c.values().get(6).i());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k());
		assertEquals(BigDecimal.ZERO, c.values().get(6).l());
		assertEquals(BigDecimal.ZERO, c.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(15), c.values().get(7).r());
		assertEquals(BigDecimal.valueOf(16), c.values().get(7).i());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k());
		assertEquals(BigDecimal.ZERO, c.values().get(7).l());
		assertEquals(BigDecimal.ZERO, c.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(17), c.values().get(8).r());
		assertEquals(BigDecimal.valueOf(18), c.values().get(8).i());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k());
		assertEquals(BigDecimal.ZERO, c.values().get(8).l());
		assertEquals(BigDecimal.ZERO, c.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(19), c.values().get(9).r());
		assertEquals(BigDecimal.valueOf(20), c.values().get(9).i());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k());
		assertEquals(BigDecimal.ZERO, c.values().get(9).l());
		assertEquals(BigDecimal.ZERO, c.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(21), c.values().get(10).r());
		assertEquals(BigDecimal.valueOf(22), c.values().get(10).i());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k());
		assertEquals(BigDecimal.ZERO, c.values().get(10).l());
		assertEquals(BigDecimal.ZERO, c.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(23), c.values().get(11).r());
		assertEquals(BigDecimal.valueOf(24), c.values().get(11).i());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k());
		assertEquals(BigDecimal.ZERO, c.values().get(11).l());
		assertEquals(BigDecimal.ZERO, c.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(25), c.values().get(12).r());
		assertEquals(BigDecimal.valueOf(26), c.values().get(12).i());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k());
		assertEquals(BigDecimal.ZERO, c.values().get(12).l());
		assertEquals(BigDecimal.ZERO, c.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(27), c.values().get(13).r());
		assertEquals(BigDecimal.valueOf(28), c.values().get(13).i());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k());
		assertEquals(BigDecimal.ZERO, c.values().get(13).l());
		assertEquals(BigDecimal.ZERO, c.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(29), c.values().get(14).r());
		assertEquals(BigDecimal.valueOf(30), c.values().get(14).i());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k());
		assertEquals(BigDecimal.ZERO, c.values().get(14).l());
		assertEquals(BigDecimal.ZERO, c.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(31), c.values().get(15).r());
		assertEquals(BigDecimal.valueOf(32), c.values().get(15).i());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k());
		assertEquals(BigDecimal.ZERO, c.values().get(15).l());
		assertEquals(BigDecimal.ZERO, c.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(33), c.values().get(16).r());
		assertEquals(BigDecimal.valueOf(34), c.values().get(16).i());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k());
		assertEquals(BigDecimal.ZERO, c.values().get(16).l());
		assertEquals(BigDecimal.ZERO, c.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(35), c.values().get(17).r());
		assertEquals(BigDecimal.valueOf(36), c.values().get(17).i());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k());
		assertEquals(BigDecimal.ZERO, c.values().get(17).l());
		assertEquals(BigDecimal.ZERO, c.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(37), c.values().get(18).r());
		assertEquals(BigDecimal.valueOf(38), c.values().get(18).i());
		assertEquals(BigDecimal.ZERO, c.values().get(18).j());
		assertEquals(BigDecimal.ZERO, c.values().get(18).k());
		assertEquals(BigDecimal.ZERO, c.values().get(18).l());
		assertEquals(BigDecimal.ZERO, c.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(39), c.values().get(19).r());
		assertEquals(BigDecimal.valueOf(40), c.values().get(19).i());
		assertEquals(BigDecimal.ZERO, c.values().get(19).j());
		assertEquals(BigDecimal.ZERO, c.values().get(19).k());
		assertEquals(BigDecimal.ZERO, c.values().get(19).l());
		assertEquals(BigDecimal.ZERO, c.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(41), c.values().get(20).r());
		assertEquals(BigDecimal.valueOf(42), c.values().get(20).i());
		assertEquals(BigDecimal.ZERO, c.values().get(20).j());
		assertEquals(BigDecimal.ZERO, c.values().get(20).k());
		assertEquals(BigDecimal.ZERO, c.values().get(20).l());
		assertEquals(BigDecimal.ZERO, c.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(43), c.values().get(21).r());
		assertEquals(BigDecimal.valueOf(44), c.values().get(21).i());
		assertEquals(BigDecimal.ZERO, c.values().get(21).j());
		assertEquals(BigDecimal.ZERO, c.values().get(21).k());
		assertEquals(BigDecimal.ZERO, c.values().get(21).l());
		assertEquals(BigDecimal.ZERO, c.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(45), c.values().get(22).r());
		assertEquals(BigDecimal.valueOf(46), c.values().get(22).i());
		assertEquals(BigDecimal.ZERO, c.values().get(22).j());
		assertEquals(BigDecimal.ZERO, c.values().get(22).k());
		assertEquals(BigDecimal.ZERO, c.values().get(22).l());
		assertEquals(BigDecimal.ZERO, c.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(47), c.values().get(23).r());
		assertEquals(BigDecimal.valueOf(48), c.values().get(23).i());
		assertEquals(BigDecimal.ZERO, c.values().get(23).j());
		assertEquals(BigDecimal.ZERO, c.values().get(23).k());
		assertEquals(BigDecimal.ZERO, c.values().get(23).l());
		assertEquals(BigDecimal.ZERO, c.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, c.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, c.values().get(23).k0());

		TensorStringRepresentation d = new TensorStringRepresentation("[[[[{1,2,3}][{4,5,6}][{7,8,9}][{10,11,12}]][[{13,14,15}][{16,17,18}][{19,20,21}][{22,23,24}]][[{25,26,27}][{28,29,30}][{31,32,33}][{34,35,36}]]][[[{37,38,39}][{40,41,42}][{43,44,45}][{46,47,48}]][[{49,50,51}][{52,53,54}][{55,56,57}][{58,59,60}]][[{61,62,63}][{64,65,66}][{67,68,69}][{70,71,72}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, d.dimensions());
		assertEquals(BigDecimal.valueOf(1), d.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), d.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), d.values().get(0).j());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k());
		assertEquals(BigDecimal.ZERO, d.values().get(0).l());
		assertEquals(BigDecimal.ZERO, d.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(4), d.values().get(1).r());
		assertEquals(BigDecimal.valueOf(5), d.values().get(1).i());
		assertEquals(BigDecimal.valueOf(6), d.values().get(1).j());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k());
		assertEquals(BigDecimal.ZERO, d.values().get(1).l());
		assertEquals(BigDecimal.ZERO, d.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(7), d.values().get(2).r());
		assertEquals(BigDecimal.valueOf(8), d.values().get(2).i());
		assertEquals(BigDecimal.valueOf(9), d.values().get(2).j());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k());
		assertEquals(BigDecimal.ZERO, d.values().get(2).l());
		assertEquals(BigDecimal.ZERO, d.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(10), d.values().get(3).r());
		assertEquals(BigDecimal.valueOf(11), d.values().get(3).i());
		assertEquals(BigDecimal.valueOf(12), d.values().get(3).j());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k());
		assertEquals(BigDecimal.ZERO, d.values().get(3).l());
		assertEquals(BigDecimal.ZERO, d.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(13), d.values().get(4).r());
		assertEquals(BigDecimal.valueOf(14), d.values().get(4).i());
		assertEquals(BigDecimal.valueOf(15), d.values().get(4).j());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k());
		assertEquals(BigDecimal.ZERO, d.values().get(4).l());
		assertEquals(BigDecimal.ZERO, d.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(16), d.values().get(5).r());
		assertEquals(BigDecimal.valueOf(17), d.values().get(5).i());
		assertEquals(BigDecimal.valueOf(18), d.values().get(5).j());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k());
		assertEquals(BigDecimal.ZERO, d.values().get(5).l());
		assertEquals(BigDecimal.ZERO, d.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(19), d.values().get(6).r());
		assertEquals(BigDecimal.valueOf(20), d.values().get(6).i());
		assertEquals(BigDecimal.valueOf(21), d.values().get(6).j());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k());
		assertEquals(BigDecimal.ZERO, d.values().get(6).l());
		assertEquals(BigDecimal.ZERO, d.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(22), d.values().get(7).r());
		assertEquals(BigDecimal.valueOf(23), d.values().get(7).i());
		assertEquals(BigDecimal.valueOf(24), d.values().get(7).j());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k());
		assertEquals(BigDecimal.ZERO, d.values().get(7).l());
		assertEquals(BigDecimal.ZERO, d.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(25), d.values().get(8).r());
		assertEquals(BigDecimal.valueOf(26), d.values().get(8).i());
		assertEquals(BigDecimal.valueOf(27), d.values().get(8).j());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k());
		assertEquals(BigDecimal.ZERO, d.values().get(8).l());
		assertEquals(BigDecimal.ZERO, d.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(28), d.values().get(9).r());
		assertEquals(BigDecimal.valueOf(29), d.values().get(9).i());
		assertEquals(BigDecimal.valueOf(30), d.values().get(9).j());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k());
		assertEquals(BigDecimal.ZERO, d.values().get(9).l());
		assertEquals(BigDecimal.ZERO, d.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(31), d.values().get(10).r());
		assertEquals(BigDecimal.valueOf(32), d.values().get(10).i());
		assertEquals(BigDecimal.valueOf(33), d.values().get(10).j());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k());
		assertEquals(BigDecimal.ZERO, d.values().get(10).l());
		assertEquals(BigDecimal.ZERO, d.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(34), d.values().get(11).r());
		assertEquals(BigDecimal.valueOf(35), d.values().get(11).i());
		assertEquals(BigDecimal.valueOf(36), d.values().get(11).j());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k());
		assertEquals(BigDecimal.ZERO, d.values().get(11).l());
		assertEquals(BigDecimal.ZERO, d.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(37), d.values().get(12).r());
		assertEquals(BigDecimal.valueOf(38), d.values().get(12).i());
		assertEquals(BigDecimal.valueOf(39), d.values().get(12).j());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k());
		assertEquals(BigDecimal.ZERO, d.values().get(12).l());
		assertEquals(BigDecimal.ZERO, d.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(40), d.values().get(13).r());
		assertEquals(BigDecimal.valueOf(41), d.values().get(13).i());
		assertEquals(BigDecimal.valueOf(42), d.values().get(13).j());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k());
		assertEquals(BigDecimal.ZERO, d.values().get(13).l());
		assertEquals(BigDecimal.ZERO, d.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(43), d.values().get(14).r());
		assertEquals(BigDecimal.valueOf(44), d.values().get(14).i());
		assertEquals(BigDecimal.valueOf(45), d.values().get(14).j());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k());
		assertEquals(BigDecimal.ZERO, d.values().get(14).l());
		assertEquals(BigDecimal.ZERO, d.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(46), d.values().get(15).r());
		assertEquals(BigDecimal.valueOf(47), d.values().get(15).i());
		assertEquals(BigDecimal.valueOf(48), d.values().get(15).j());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k());
		assertEquals(BigDecimal.ZERO, d.values().get(15).l());
		assertEquals(BigDecimal.ZERO, d.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(49), d.values().get(16).r());
		assertEquals(BigDecimal.valueOf(50), d.values().get(16).i());
		assertEquals(BigDecimal.valueOf(51), d.values().get(16).j());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k());
		assertEquals(BigDecimal.ZERO, d.values().get(16).l());
		assertEquals(BigDecimal.ZERO, d.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(52), d.values().get(17).r());
		assertEquals(BigDecimal.valueOf(53), d.values().get(17).i());
		assertEquals(BigDecimal.valueOf(54), d.values().get(17).j());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k());
		assertEquals(BigDecimal.ZERO, d.values().get(17).l());
		assertEquals(BigDecimal.ZERO, d.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(55), d.values().get(18).r());
		assertEquals(BigDecimal.valueOf(56), d.values().get(18).i());
		assertEquals(BigDecimal.valueOf(57), d.values().get(18).j());
		assertEquals(BigDecimal.ZERO, d.values().get(18).k());
		assertEquals(BigDecimal.ZERO, d.values().get(18).l());
		assertEquals(BigDecimal.ZERO, d.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(58), d.values().get(19).r());
		assertEquals(BigDecimal.valueOf(59), d.values().get(19).i());
		assertEquals(BigDecimal.valueOf(60), d.values().get(19).j());
		assertEquals(BigDecimal.ZERO, d.values().get(19).k());
		assertEquals(BigDecimal.ZERO, d.values().get(19).l());
		assertEquals(BigDecimal.ZERO, d.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(61), d.values().get(20).r());
		assertEquals(BigDecimal.valueOf(62), d.values().get(20).i());
		assertEquals(BigDecimal.valueOf(63), d.values().get(20).j());
		assertEquals(BigDecimal.ZERO, d.values().get(20).k());
		assertEquals(BigDecimal.ZERO, d.values().get(20).l());
		assertEquals(BigDecimal.ZERO, d.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(64), d.values().get(21).r());
		assertEquals(BigDecimal.valueOf(65), d.values().get(21).i());
		assertEquals(BigDecimal.valueOf(66), d.values().get(21).j());
		assertEquals(BigDecimal.ZERO, d.values().get(21).k());
		assertEquals(BigDecimal.ZERO, d.values().get(21).l());
		assertEquals(BigDecimal.ZERO, d.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(67), d.values().get(22).r());
		assertEquals(BigDecimal.valueOf(68), d.values().get(22).i());
		assertEquals(BigDecimal.valueOf(69), d.values().get(22).j());
		assertEquals(BigDecimal.ZERO, d.values().get(22).k());
		assertEquals(BigDecimal.ZERO, d.values().get(22).l());
		assertEquals(BigDecimal.ZERO, d.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(70), d.values().get(23).r());
		assertEquals(BigDecimal.valueOf(71), d.values().get(23).i());
		assertEquals(BigDecimal.valueOf(72), d.values().get(23).j());
		assertEquals(BigDecimal.ZERO, d.values().get(23).k());
		assertEquals(BigDecimal.ZERO, d.values().get(23).l());
		assertEquals(BigDecimal.ZERO, d.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, d.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, d.values().get(23).k0());

		TensorStringRepresentation e = new TensorStringRepresentation("[[[[{1,2,3,4}][{5,6,7,8}][{9,10,11,12}][{13,14,15,16}]][[{17,18,19,20}][{21,22,23,24}][{25,26,27,28}][{29,30,31,32}]][[{33,34,35,36}][{37,38,39,40}][{41,42,43,44}][{45,46,47,48}]]][[[{49,50,51,52}][{53,54,55,56}][{57,58,59,60}][{61,62,63,64}]][[{65,66,67,68}][{69,70,71,72}][{73,74,75,76}][{77,78,79,80}]][[{81,82,83,84}][{85,86,87,88}][{89,90,91,92}][{93,94,95,96}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, e.dimensions());
		assertEquals(BigDecimal.valueOf(1), e.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), e.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), e.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), e.values().get(0).k());
		assertEquals(BigDecimal.ZERO, e.values().get(0).l());
		assertEquals(BigDecimal.ZERO, e.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(5), e.values().get(1).r());
		assertEquals(BigDecimal.valueOf(6), e.values().get(1).i());
		assertEquals(BigDecimal.valueOf(7), e.values().get(1).j());
		assertEquals(BigDecimal.valueOf(8), e.values().get(1).k());
		assertEquals(BigDecimal.ZERO, e.values().get(1).l());
		assertEquals(BigDecimal.ZERO, e.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(9), e.values().get(2).r());
		assertEquals(BigDecimal.valueOf(10), e.values().get(2).i());
		assertEquals(BigDecimal.valueOf(11), e.values().get(2).j());
		assertEquals(BigDecimal.valueOf(12), e.values().get(2).k());
		assertEquals(BigDecimal.ZERO, e.values().get(2).l());
		assertEquals(BigDecimal.ZERO, e.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(13), e.values().get(3).r());
		assertEquals(BigDecimal.valueOf(14), e.values().get(3).i());
		assertEquals(BigDecimal.valueOf(15), e.values().get(3).j());
		assertEquals(BigDecimal.valueOf(16), e.values().get(3).k());
		assertEquals(BigDecimal.ZERO, e.values().get(3).l());
		assertEquals(BigDecimal.ZERO, e.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(17), e.values().get(4).r());
		assertEquals(BigDecimal.valueOf(18), e.values().get(4).i());
		assertEquals(BigDecimal.valueOf(19), e.values().get(4).j());
		assertEquals(BigDecimal.valueOf(20), e.values().get(4).k());
		assertEquals(BigDecimal.ZERO, e.values().get(4).l());
		assertEquals(BigDecimal.ZERO, e.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(21), e.values().get(5).r());
		assertEquals(BigDecimal.valueOf(22), e.values().get(5).i());
		assertEquals(BigDecimal.valueOf(23), e.values().get(5).j());
		assertEquals(BigDecimal.valueOf(24), e.values().get(5).k());
		assertEquals(BigDecimal.ZERO, e.values().get(5).l());
		assertEquals(BigDecimal.ZERO, e.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(25), e.values().get(6).r());
		assertEquals(BigDecimal.valueOf(26), e.values().get(6).i());
		assertEquals(BigDecimal.valueOf(27), e.values().get(6).j());
		assertEquals(BigDecimal.valueOf(28), e.values().get(6).k());
		assertEquals(BigDecimal.ZERO, e.values().get(6).l());
		assertEquals(BigDecimal.ZERO, e.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(29), e.values().get(7).r());
		assertEquals(BigDecimal.valueOf(30), e.values().get(7).i());
		assertEquals(BigDecimal.valueOf(31), e.values().get(7).j());
		assertEquals(BigDecimal.valueOf(32), e.values().get(7).k());
		assertEquals(BigDecimal.ZERO, e.values().get(7).l());
		assertEquals(BigDecimal.ZERO, e.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(33), e.values().get(8).r());
		assertEquals(BigDecimal.valueOf(34), e.values().get(8).i());
		assertEquals(BigDecimal.valueOf(35), e.values().get(8).j());
		assertEquals(BigDecimal.valueOf(36), e.values().get(8).k());
		assertEquals(BigDecimal.ZERO, e.values().get(8).l());
		assertEquals(BigDecimal.ZERO, e.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(37), e.values().get(9).r());
		assertEquals(BigDecimal.valueOf(38), e.values().get(9).i());
		assertEquals(BigDecimal.valueOf(39), e.values().get(9).j());
		assertEquals(BigDecimal.valueOf(40), e.values().get(9).k());
		assertEquals(BigDecimal.ZERO, e.values().get(9).l());
		assertEquals(BigDecimal.ZERO, e.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(41), e.values().get(10).r());
		assertEquals(BigDecimal.valueOf(42), e.values().get(10).i());
		assertEquals(BigDecimal.valueOf(43), e.values().get(10).j());
		assertEquals(BigDecimal.valueOf(44), e.values().get(10).k());
		assertEquals(BigDecimal.ZERO, e.values().get(10).l());
		assertEquals(BigDecimal.ZERO, e.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(45), e.values().get(11).r());
		assertEquals(BigDecimal.valueOf(46), e.values().get(11).i());
		assertEquals(BigDecimal.valueOf(47), e.values().get(11).j());
		assertEquals(BigDecimal.valueOf(48), e.values().get(11).k());
		assertEquals(BigDecimal.ZERO, e.values().get(11).l());
		assertEquals(BigDecimal.ZERO, e.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(49), e.values().get(12).r());
		assertEquals(BigDecimal.valueOf(50), e.values().get(12).i());
		assertEquals(BigDecimal.valueOf(51), e.values().get(12).j());
		assertEquals(BigDecimal.valueOf(52), e.values().get(12).k());
		assertEquals(BigDecimal.ZERO, e.values().get(12).l());
		assertEquals(BigDecimal.ZERO, e.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(53), e.values().get(13).r());
		assertEquals(BigDecimal.valueOf(54), e.values().get(13).i());
		assertEquals(BigDecimal.valueOf(55), e.values().get(13).j());
		assertEquals(BigDecimal.valueOf(56), e.values().get(13).k());
		assertEquals(BigDecimal.ZERO, e.values().get(13).l());
		assertEquals(BigDecimal.ZERO, e.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(57), e.values().get(14).r());
		assertEquals(BigDecimal.valueOf(58), e.values().get(14).i());
		assertEquals(BigDecimal.valueOf(59), e.values().get(14).j());
		assertEquals(BigDecimal.valueOf(60), e.values().get(14).k());
		assertEquals(BigDecimal.ZERO, e.values().get(14).l());
		assertEquals(BigDecimal.ZERO, e.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(61), e.values().get(15).r());
		assertEquals(BigDecimal.valueOf(62), e.values().get(15).i());
		assertEquals(BigDecimal.valueOf(63), e.values().get(15).j());
		assertEquals(BigDecimal.valueOf(64), e.values().get(15).k());
		assertEquals(BigDecimal.ZERO, e.values().get(15).l());
		assertEquals(BigDecimal.ZERO, e.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(65), e.values().get(16).r());
		assertEquals(BigDecimal.valueOf(66), e.values().get(16).i());
		assertEquals(BigDecimal.valueOf(67), e.values().get(16).j());
		assertEquals(BigDecimal.valueOf(68), e.values().get(16).k());
		assertEquals(BigDecimal.ZERO, e.values().get(16).l());
		assertEquals(BigDecimal.ZERO, e.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(69), e.values().get(17).r());
		assertEquals(BigDecimal.valueOf(70), e.values().get(17).i());
		assertEquals(BigDecimal.valueOf(71), e.values().get(17).j());
		assertEquals(BigDecimal.valueOf(72), e.values().get(17).k());
		assertEquals(BigDecimal.ZERO, e.values().get(17).l());
		assertEquals(BigDecimal.ZERO, e.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(73), e.values().get(18).r());
		assertEquals(BigDecimal.valueOf(74), e.values().get(18).i());
		assertEquals(BigDecimal.valueOf(75), e.values().get(18).j());
		assertEquals(BigDecimal.valueOf(76), e.values().get(18).k());
		assertEquals(BigDecimal.ZERO, e.values().get(18).l());
		assertEquals(BigDecimal.ZERO, e.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(77), e.values().get(19).r());
		assertEquals(BigDecimal.valueOf(78), e.values().get(19).i());
		assertEquals(BigDecimal.valueOf(79), e.values().get(19).j());
		assertEquals(BigDecimal.valueOf(80), e.values().get(19).k());
		assertEquals(BigDecimal.ZERO, e.values().get(19).l());
		assertEquals(BigDecimal.ZERO, e.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(81), e.values().get(20).r());
		assertEquals(BigDecimal.valueOf(82), e.values().get(20).i());
		assertEquals(BigDecimal.valueOf(83), e.values().get(20).j());
		assertEquals(BigDecimal.valueOf(84), e.values().get(20).k());
		assertEquals(BigDecimal.ZERO, e.values().get(20).l());
		assertEquals(BigDecimal.ZERO, e.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(85), e.values().get(21).r());
		assertEquals(BigDecimal.valueOf(86), e.values().get(21).i());
		assertEquals(BigDecimal.valueOf(87), e.values().get(21).j());
		assertEquals(BigDecimal.valueOf(88), e.values().get(21).k());
		assertEquals(BigDecimal.ZERO, e.values().get(21).l());
		assertEquals(BigDecimal.ZERO, e.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(89), e.values().get(22).r());
		assertEquals(BigDecimal.valueOf(90), e.values().get(22).i());
		assertEquals(BigDecimal.valueOf(91), e.values().get(22).j());
		assertEquals(BigDecimal.valueOf(92), e.values().get(22).k());
		assertEquals(BigDecimal.ZERO, e.values().get(22).l());
		assertEquals(BigDecimal.ZERO, e.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(93), e.values().get(23).r());
		assertEquals(BigDecimal.valueOf(94), e.values().get(23).i());
		assertEquals(BigDecimal.valueOf(95), e.values().get(23).j());
		assertEquals(BigDecimal.valueOf(96), e.values().get(23).k());
		assertEquals(BigDecimal.ZERO, e.values().get(23).l());
		assertEquals(BigDecimal.ZERO, e.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, e.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, e.values().get(23).k0());

		TensorStringRepresentation f = new TensorStringRepresentation("[[[[{1,2,3,4,5}][{6,7,8,9,10}][{11,12,13,14,15}][{16,17,18,19,20}]][[{21,22,23,24,25}][{26,27,28,29,30}][{31,32,33,34,35}][{36,37,38,39,40}]][[{41,42,43,44,45}][{46,47,48,49,50}][{51,52,53,54,55}][{56,57,58,59,60}]]][[[{61,62,63,64,65}][{66,67,68,69,70}][{71,72,73,74,75}][{76,77,78,79,80}]][[{81,82,83,84,85}][{86,87,88,89,90}][{91,92,93,94,95}][{96,97,98,99,100}]][[{101,102,103,104,105}][{106,107,108,109,110}][{111,112,113,114,115}][{116,117,118,119,120}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, f.dimensions());
		assertEquals(BigDecimal.valueOf(1), f.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), f.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), f.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), f.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), f.values().get(0).l());
		assertEquals(BigDecimal.ZERO, f.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(6), f.values().get(1).r());
		assertEquals(BigDecimal.valueOf(7), f.values().get(1).i());
		assertEquals(BigDecimal.valueOf(8), f.values().get(1).j());
		assertEquals(BigDecimal.valueOf(9), f.values().get(1).k());
		assertEquals(BigDecimal.valueOf(10), f.values().get(1).l());
		assertEquals(BigDecimal.ZERO, f.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(11), f.values().get(2).r());
		assertEquals(BigDecimal.valueOf(12), f.values().get(2).i());
		assertEquals(BigDecimal.valueOf(13), f.values().get(2).j());
		assertEquals(BigDecimal.valueOf(14), f.values().get(2).k());
		assertEquals(BigDecimal.valueOf(15), f.values().get(2).l());
		assertEquals(BigDecimal.ZERO, f.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(16), f.values().get(3).r());
		assertEquals(BigDecimal.valueOf(17), f.values().get(3).i());
		assertEquals(BigDecimal.valueOf(18), f.values().get(3).j());
		assertEquals(BigDecimal.valueOf(19), f.values().get(3).k());
		assertEquals(BigDecimal.valueOf(20), f.values().get(3).l());
		assertEquals(BigDecimal.ZERO, f.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(21), f.values().get(4).r());
		assertEquals(BigDecimal.valueOf(22), f.values().get(4).i());
		assertEquals(BigDecimal.valueOf(23), f.values().get(4).j());
		assertEquals(BigDecimal.valueOf(24), f.values().get(4).k());
		assertEquals(BigDecimal.valueOf(25), f.values().get(4).l());
		assertEquals(BigDecimal.ZERO, f.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(26), f.values().get(5).r());
		assertEquals(BigDecimal.valueOf(27), f.values().get(5).i());
		assertEquals(BigDecimal.valueOf(28), f.values().get(5).j());
		assertEquals(BigDecimal.valueOf(29), f.values().get(5).k());
		assertEquals(BigDecimal.valueOf(30), f.values().get(5).l());
		assertEquals(BigDecimal.ZERO, f.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(31), f.values().get(6).r());
		assertEquals(BigDecimal.valueOf(32), f.values().get(6).i());
		assertEquals(BigDecimal.valueOf(33), f.values().get(6).j());
		assertEquals(BigDecimal.valueOf(34), f.values().get(6).k());
		assertEquals(BigDecimal.valueOf(35), f.values().get(6).l());
		assertEquals(BigDecimal.ZERO, f.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(36), f.values().get(7).r());
		assertEquals(BigDecimal.valueOf(37), f.values().get(7).i());
		assertEquals(BigDecimal.valueOf(38), f.values().get(7).j());
		assertEquals(BigDecimal.valueOf(39), f.values().get(7).k());
		assertEquals(BigDecimal.valueOf(40), f.values().get(7).l());
		assertEquals(BigDecimal.ZERO, f.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(41), f.values().get(8).r());
		assertEquals(BigDecimal.valueOf(42), f.values().get(8).i());
		assertEquals(BigDecimal.valueOf(43), f.values().get(8).j());
		assertEquals(BigDecimal.valueOf(44), f.values().get(8).k());
		assertEquals(BigDecimal.valueOf(45), f.values().get(8).l());
		assertEquals(BigDecimal.ZERO, f.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(46), f.values().get(9).r());
		assertEquals(BigDecimal.valueOf(47), f.values().get(9).i());
		assertEquals(BigDecimal.valueOf(48), f.values().get(9).j());
		assertEquals(BigDecimal.valueOf(49), f.values().get(9).k());
		assertEquals(BigDecimal.valueOf(50), f.values().get(9).l());
		assertEquals(BigDecimal.ZERO, f.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(51), f.values().get(10).r());
		assertEquals(BigDecimal.valueOf(52), f.values().get(10).i());
		assertEquals(BigDecimal.valueOf(53), f.values().get(10).j());
		assertEquals(BigDecimal.valueOf(54), f.values().get(10).k());
		assertEquals(BigDecimal.valueOf(55), f.values().get(10).l());
		assertEquals(BigDecimal.ZERO, f.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(56), f.values().get(11).r());
		assertEquals(BigDecimal.valueOf(57), f.values().get(11).i());
		assertEquals(BigDecimal.valueOf(58), f.values().get(11).j());
		assertEquals(BigDecimal.valueOf(59), f.values().get(11).k());
		assertEquals(BigDecimal.valueOf(60), f.values().get(11).l());
		assertEquals(BigDecimal.ZERO, f.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(61), f.values().get(12).r());
		assertEquals(BigDecimal.valueOf(62), f.values().get(12).i());
		assertEquals(BigDecimal.valueOf(63), f.values().get(12).j());
		assertEquals(BigDecimal.valueOf(64), f.values().get(12).k());
		assertEquals(BigDecimal.valueOf(65), f.values().get(12).l());
		assertEquals(BigDecimal.ZERO, f.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(66), f.values().get(13).r());
		assertEquals(BigDecimal.valueOf(67), f.values().get(13).i());
		assertEquals(BigDecimal.valueOf(68), f.values().get(13).j());
		assertEquals(BigDecimal.valueOf(69), f.values().get(13).k());
		assertEquals(BigDecimal.valueOf(70), f.values().get(13).l());
		assertEquals(BigDecimal.ZERO, f.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(71), f.values().get(14).r());
		assertEquals(BigDecimal.valueOf(72), f.values().get(14).i());
		assertEquals(BigDecimal.valueOf(73), f.values().get(14).j());
		assertEquals(BigDecimal.valueOf(74), f.values().get(14).k());
		assertEquals(BigDecimal.valueOf(75), f.values().get(14).l());
		assertEquals(BigDecimal.ZERO, f.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(76), f.values().get(15).r());
		assertEquals(BigDecimal.valueOf(77), f.values().get(15).i());
		assertEquals(BigDecimal.valueOf(78), f.values().get(15).j());
		assertEquals(BigDecimal.valueOf(79), f.values().get(15).k());
		assertEquals(BigDecimal.valueOf(80), f.values().get(15).l());
		assertEquals(BigDecimal.ZERO, f.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(81), f.values().get(16).r());
		assertEquals(BigDecimal.valueOf(82), f.values().get(16).i());
		assertEquals(BigDecimal.valueOf(83), f.values().get(16).j());
		assertEquals(BigDecimal.valueOf(84), f.values().get(16).k());
		assertEquals(BigDecimal.valueOf(85), f.values().get(16).l());
		assertEquals(BigDecimal.ZERO, f.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(86), f.values().get(17).r());
		assertEquals(BigDecimal.valueOf(87), f.values().get(17).i());
		assertEquals(BigDecimal.valueOf(88), f.values().get(17).j());
		assertEquals(BigDecimal.valueOf(89), f.values().get(17).k());
		assertEquals(BigDecimal.valueOf(90), f.values().get(17).l());
		assertEquals(BigDecimal.ZERO, f.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(91), f.values().get(18).r());
		assertEquals(BigDecimal.valueOf(92), f.values().get(18).i());
		assertEquals(BigDecimal.valueOf(93), f.values().get(18).j());
		assertEquals(BigDecimal.valueOf(94), f.values().get(18).k());
		assertEquals(BigDecimal.valueOf(95), f.values().get(18).l());
		assertEquals(BigDecimal.ZERO, f.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(96), f.values().get(19).r());
		assertEquals(BigDecimal.valueOf(97), f.values().get(19).i());
		assertEquals(BigDecimal.valueOf(98), f.values().get(19).j());
		assertEquals(BigDecimal.valueOf(99), f.values().get(19).k());
		assertEquals(BigDecimal.valueOf(100), f.values().get(19).l());
		assertEquals(BigDecimal.ZERO, f.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(101), f.values().get(20).r());
		assertEquals(BigDecimal.valueOf(102), f.values().get(20).i());
		assertEquals(BigDecimal.valueOf(103), f.values().get(20).j());
		assertEquals(BigDecimal.valueOf(104), f.values().get(20).k());
		assertEquals(BigDecimal.valueOf(105), f.values().get(20).l());
		assertEquals(BigDecimal.ZERO, f.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(106), f.values().get(21).r());
		assertEquals(BigDecimal.valueOf(107), f.values().get(21).i());
		assertEquals(BigDecimal.valueOf(108), f.values().get(21).j());
		assertEquals(BigDecimal.valueOf(109), f.values().get(21).k());
		assertEquals(BigDecimal.valueOf(110), f.values().get(21).l());
		assertEquals(BigDecimal.ZERO, f.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(111), f.values().get(22).r());
		assertEquals(BigDecimal.valueOf(112), f.values().get(22).i());
		assertEquals(BigDecimal.valueOf(113), f.values().get(22).j());
		assertEquals(BigDecimal.valueOf(114), f.values().get(22).k());
		assertEquals(BigDecimal.valueOf(115), f.values().get(22).l());
		assertEquals(BigDecimal.ZERO, f.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(116), f.values().get(23).r());
		assertEquals(BigDecimal.valueOf(117), f.values().get(23).i());
		assertEquals(BigDecimal.valueOf(118), f.values().get(23).j());
		assertEquals(BigDecimal.valueOf(119), f.values().get(23).k());
		assertEquals(BigDecimal.valueOf(120), f.values().get(23).l());
		assertEquals(BigDecimal.ZERO, f.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, f.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, f.values().get(23).k0());

		TensorStringRepresentation g = new TensorStringRepresentation("[[[[{1,2,3,4,5,6}][{7,8,9,10,11,12}][{13,14,15,16,17,18}][{19,20,21,22,23,24}]][[{25,26,27,28,29,30}][{31,32,33,34,35,36}][{37,38,39,40,41,42}][{43,44,45,46,47,48}]][[{49,50,51,52,53,54}][{55,56,57,58,59,60}][{61,62,63,64,65,66}][{67,68,69,70,71,72}]]][[[{73,74,75,76,77,78}][{79,80,81,82,83,84}][{85,86,87,88,89,90}][{91,92,93,94,95,96}]][[{97,98,99,100,101,102}][{103,104,105,106,107,108}][{109,110,111,112,113,114}][{115,116,117,118,119,120}]][[{121,122,123,124,125,126}][{127,128,129,130,131,132}][{133,134,135,136,137,138}][{139,140,141,142,143,144}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, g.dimensions());
		assertEquals(BigDecimal.valueOf(1), g.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), g.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), g.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), g.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), g.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), g.values().get(0).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(7), g.values().get(1).r());
		assertEquals(BigDecimal.valueOf(8), g.values().get(1).i());
		assertEquals(BigDecimal.valueOf(9), g.values().get(1).j());
		assertEquals(BigDecimal.valueOf(10), g.values().get(1).k());
		assertEquals(BigDecimal.valueOf(11), g.values().get(1).l());
		assertEquals(BigDecimal.valueOf(12), g.values().get(1).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(13), g.values().get(2).r());
		assertEquals(BigDecimal.valueOf(14), g.values().get(2).i());
		assertEquals(BigDecimal.valueOf(15), g.values().get(2).j());
		assertEquals(BigDecimal.valueOf(16), g.values().get(2).k());
		assertEquals(BigDecimal.valueOf(17), g.values().get(2).l());
		assertEquals(BigDecimal.valueOf(18), g.values().get(2).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(19), g.values().get(3).r());
		assertEquals(BigDecimal.valueOf(20), g.values().get(3).i());
		assertEquals(BigDecimal.valueOf(21), g.values().get(3).j());
		assertEquals(BigDecimal.valueOf(22), g.values().get(3).k());
		assertEquals(BigDecimal.valueOf(23), g.values().get(3).l());
		assertEquals(BigDecimal.valueOf(24), g.values().get(3).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(25), g.values().get(4).r());
		assertEquals(BigDecimal.valueOf(26), g.values().get(4).i());
		assertEquals(BigDecimal.valueOf(27), g.values().get(4).j());
		assertEquals(BigDecimal.valueOf(28), g.values().get(4).k());
		assertEquals(BigDecimal.valueOf(29), g.values().get(4).l());
		assertEquals(BigDecimal.valueOf(30), g.values().get(4).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(31), g.values().get(5).r());
		assertEquals(BigDecimal.valueOf(32), g.values().get(5).i());
		assertEquals(BigDecimal.valueOf(33), g.values().get(5).j());
		assertEquals(BigDecimal.valueOf(34), g.values().get(5).k());
		assertEquals(BigDecimal.valueOf(35), g.values().get(5).l());
		assertEquals(BigDecimal.valueOf(36), g.values().get(5).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(37), g.values().get(6).r());
		assertEquals(BigDecimal.valueOf(38), g.values().get(6).i());
		assertEquals(BigDecimal.valueOf(39), g.values().get(6).j());
		assertEquals(BigDecimal.valueOf(40), g.values().get(6).k());
		assertEquals(BigDecimal.valueOf(41), g.values().get(6).l());
		assertEquals(BigDecimal.valueOf(42), g.values().get(6).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(43), g.values().get(7).r());
		assertEquals(BigDecimal.valueOf(44), g.values().get(7).i());
		assertEquals(BigDecimal.valueOf(45), g.values().get(7).j());
		assertEquals(BigDecimal.valueOf(46), g.values().get(7).k());
		assertEquals(BigDecimal.valueOf(47), g.values().get(7).l());
		assertEquals(BigDecimal.valueOf(48), g.values().get(7).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(49), g.values().get(8).r());
		assertEquals(BigDecimal.valueOf(50), g.values().get(8).i());
		assertEquals(BigDecimal.valueOf(51), g.values().get(8).j());
		assertEquals(BigDecimal.valueOf(52), g.values().get(8).k());
		assertEquals(BigDecimal.valueOf(53), g.values().get(8).l());
		assertEquals(BigDecimal.valueOf(54), g.values().get(8).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(55), g.values().get(9).r());
		assertEquals(BigDecimal.valueOf(56), g.values().get(9).i());
		assertEquals(BigDecimal.valueOf(57), g.values().get(9).j());
		assertEquals(BigDecimal.valueOf(58), g.values().get(9).k());
		assertEquals(BigDecimal.valueOf(59), g.values().get(9).l());
		assertEquals(BigDecimal.valueOf(60), g.values().get(9).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(61), g.values().get(10).r());
		assertEquals(BigDecimal.valueOf(62), g.values().get(10).i());
		assertEquals(BigDecimal.valueOf(63), g.values().get(10).j());
		assertEquals(BigDecimal.valueOf(64), g.values().get(10).k());
		assertEquals(BigDecimal.valueOf(65), g.values().get(10).l());
		assertEquals(BigDecimal.valueOf(66), g.values().get(10).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(67), g.values().get(11).r());
		assertEquals(BigDecimal.valueOf(68), g.values().get(11).i());
		assertEquals(BigDecimal.valueOf(69), g.values().get(11).j());
		assertEquals(BigDecimal.valueOf(70), g.values().get(11).k());
		assertEquals(BigDecimal.valueOf(71), g.values().get(11).l());
		assertEquals(BigDecimal.valueOf(72), g.values().get(11).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(73), g.values().get(12).r());
		assertEquals(BigDecimal.valueOf(74), g.values().get(12).i());
		assertEquals(BigDecimal.valueOf(75), g.values().get(12).j());
		assertEquals(BigDecimal.valueOf(76), g.values().get(12).k());
		assertEquals(BigDecimal.valueOf(77), g.values().get(12).l());
		assertEquals(BigDecimal.valueOf(78), g.values().get(12).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(79), g.values().get(13).r());
		assertEquals(BigDecimal.valueOf(80), g.values().get(13).i());
		assertEquals(BigDecimal.valueOf(81), g.values().get(13).j());
		assertEquals(BigDecimal.valueOf(82), g.values().get(13).k());
		assertEquals(BigDecimal.valueOf(83), g.values().get(13).l());
		assertEquals(BigDecimal.valueOf(84), g.values().get(13).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(85), g.values().get(14).r());
		assertEquals(BigDecimal.valueOf(86), g.values().get(14).i());
		assertEquals(BigDecimal.valueOf(87), g.values().get(14).j());
		assertEquals(BigDecimal.valueOf(88), g.values().get(14).k());
		assertEquals(BigDecimal.valueOf(89), g.values().get(14).l());
		assertEquals(BigDecimal.valueOf(90), g.values().get(14).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(91), g.values().get(15).r());
		assertEquals(BigDecimal.valueOf(92), g.values().get(15).i());
		assertEquals(BigDecimal.valueOf(93), g.values().get(15).j());
		assertEquals(BigDecimal.valueOf(94), g.values().get(15).k());
		assertEquals(BigDecimal.valueOf(95), g.values().get(15).l());
		assertEquals(BigDecimal.valueOf(96), g.values().get(15).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(97), g.values().get(16).r());
		assertEquals(BigDecimal.valueOf(98), g.values().get(16).i());
		assertEquals(BigDecimal.valueOf(99), g.values().get(16).j());
		assertEquals(BigDecimal.valueOf(100), g.values().get(16).k());
		assertEquals(BigDecimal.valueOf(101), g.values().get(16).l());
		assertEquals(BigDecimal.valueOf(102), g.values().get(16).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(103), g.values().get(17).r());
		assertEquals(BigDecimal.valueOf(104), g.values().get(17).i());
		assertEquals(BigDecimal.valueOf(105), g.values().get(17).j());
		assertEquals(BigDecimal.valueOf(106), g.values().get(17).k());
		assertEquals(BigDecimal.valueOf(107), g.values().get(17).l());
		assertEquals(BigDecimal.valueOf(108), g.values().get(17).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(109), g.values().get(18).r());
		assertEquals(BigDecimal.valueOf(110), g.values().get(18).i());
		assertEquals(BigDecimal.valueOf(111), g.values().get(18).j());
		assertEquals(BigDecimal.valueOf(112), g.values().get(18).k());
		assertEquals(BigDecimal.valueOf(113), g.values().get(18).l());
		assertEquals(BigDecimal.valueOf(114), g.values().get(18).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(115), g.values().get(19).r());
		assertEquals(BigDecimal.valueOf(116), g.values().get(19).i());
		assertEquals(BigDecimal.valueOf(117), g.values().get(19).j());
		assertEquals(BigDecimal.valueOf(118), g.values().get(19).k());
		assertEquals(BigDecimal.valueOf(119), g.values().get(19).l());
		assertEquals(BigDecimal.valueOf(120), g.values().get(19).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(121), g.values().get(20).r());
		assertEquals(BigDecimal.valueOf(122), g.values().get(20).i());
		assertEquals(BigDecimal.valueOf(123), g.values().get(20).j());
		assertEquals(BigDecimal.valueOf(124), g.values().get(20).k());
		assertEquals(BigDecimal.valueOf(125), g.values().get(20).l());
		assertEquals(BigDecimal.valueOf(126), g.values().get(20).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(127), g.values().get(21).r());
		assertEquals(BigDecimal.valueOf(128), g.values().get(21).i());
		assertEquals(BigDecimal.valueOf(129), g.values().get(21).j());
		assertEquals(BigDecimal.valueOf(130), g.values().get(21).k());
		assertEquals(BigDecimal.valueOf(131), g.values().get(21).l());
		assertEquals(BigDecimal.valueOf(132), g.values().get(21).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(133), g.values().get(22).r());
		assertEquals(BigDecimal.valueOf(134), g.values().get(22).i());
		assertEquals(BigDecimal.valueOf(135), g.values().get(22).j());
		assertEquals(BigDecimal.valueOf(136), g.values().get(22).k());
		assertEquals(BigDecimal.valueOf(137), g.values().get(22).l());
		assertEquals(BigDecimal.valueOf(138), g.values().get(22).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(139), g.values().get(23).r());
		assertEquals(BigDecimal.valueOf(140), g.values().get(23).i());
		assertEquals(BigDecimal.valueOf(141), g.values().get(23).j());
		assertEquals(BigDecimal.valueOf(142), g.values().get(23).k());
		assertEquals(BigDecimal.valueOf(143), g.values().get(23).l());
		assertEquals(BigDecimal.valueOf(144), g.values().get(23).i0());
		assertEquals(BigDecimal.ZERO, g.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, g.values().get(23).k0());

		TensorStringRepresentation h = new TensorStringRepresentation("[[[[{1,2,3,4,5,6,7}][{8,9,10,11,12,13,14}][{15,16,17,18,19,20,21}][{22,23,24,25,26,27,28}]][[{29,30,31,32,33,34,35}][{36,37,38,39,40,41,42}][{43,44,45,46,47,48,49}][{50,51,52,53,54,55,56}]][[{57,58,59,60,61,62,63}][{64,65,66,67,68,69,70}][{71,72,73,74,75,76,77}][{78,79,80,81,82,83,84}]]][[[{85,86,87,88,89,90,91}][{92,93,94,95,96,97,98}][{99,100,101,102,103,104,105}][{106,107,108,109,110,111,112}]][[{113,114,115,116,117,118,119}][{120,121,122,123,124,125,126}][{127,128,129,130,131,132,133}][{134,135,136,137,138,139,140}]][[{141,142,143,144,145,146,147}][{148,149,150,151,152,153,154}][{155,156,157,158,159,160,161}][{162,163,164,165,166,167,168}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, h.dimensions());
		assertEquals(BigDecimal.valueOf(1), h.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), h.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), h.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), h.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), h.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), h.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), h.values().get(0).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(8), h.values().get(1).r());
		assertEquals(BigDecimal.valueOf(9), h.values().get(1).i());
		assertEquals(BigDecimal.valueOf(10), h.values().get(1).j());
		assertEquals(BigDecimal.valueOf(11), h.values().get(1).k());
		assertEquals(BigDecimal.valueOf(12), h.values().get(1).l());
		assertEquals(BigDecimal.valueOf(13), h.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(14), h.values().get(1).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(15), h.values().get(2).r());
		assertEquals(BigDecimal.valueOf(16), h.values().get(2).i());
		assertEquals(BigDecimal.valueOf(17), h.values().get(2).j());
		assertEquals(BigDecimal.valueOf(18), h.values().get(2).k());
		assertEquals(BigDecimal.valueOf(19), h.values().get(2).l());
		assertEquals(BigDecimal.valueOf(20), h.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(21), h.values().get(2).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(22), h.values().get(3).r());
		assertEquals(BigDecimal.valueOf(23), h.values().get(3).i());
		assertEquals(BigDecimal.valueOf(24), h.values().get(3).j());
		assertEquals(BigDecimal.valueOf(25), h.values().get(3).k());
		assertEquals(BigDecimal.valueOf(26), h.values().get(3).l());
		assertEquals(BigDecimal.valueOf(27), h.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(28), h.values().get(3).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(29), h.values().get(4).r());
		assertEquals(BigDecimal.valueOf(30), h.values().get(4).i());
		assertEquals(BigDecimal.valueOf(31), h.values().get(4).j());
		assertEquals(BigDecimal.valueOf(32), h.values().get(4).k());
		assertEquals(BigDecimal.valueOf(33), h.values().get(4).l());
		assertEquals(BigDecimal.valueOf(34), h.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(35), h.values().get(4).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(36), h.values().get(5).r());
		assertEquals(BigDecimal.valueOf(37), h.values().get(5).i());
		assertEquals(BigDecimal.valueOf(38), h.values().get(5).j());
		assertEquals(BigDecimal.valueOf(39), h.values().get(5).k());
		assertEquals(BigDecimal.valueOf(40), h.values().get(5).l());
		assertEquals(BigDecimal.valueOf(41), h.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(42), h.values().get(5).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(43), h.values().get(6).r());
		assertEquals(BigDecimal.valueOf(44), h.values().get(6).i());
		assertEquals(BigDecimal.valueOf(45), h.values().get(6).j());
		assertEquals(BigDecimal.valueOf(46), h.values().get(6).k());
		assertEquals(BigDecimal.valueOf(47), h.values().get(6).l());
		assertEquals(BigDecimal.valueOf(48), h.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(49), h.values().get(6).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(50), h.values().get(7).r());
		assertEquals(BigDecimal.valueOf(51), h.values().get(7).i());
		assertEquals(BigDecimal.valueOf(52), h.values().get(7).j());
		assertEquals(BigDecimal.valueOf(53), h.values().get(7).k());
		assertEquals(BigDecimal.valueOf(54), h.values().get(7).l());
		assertEquals(BigDecimal.valueOf(55), h.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(56), h.values().get(7).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(57), h.values().get(8).r());
		assertEquals(BigDecimal.valueOf(58), h.values().get(8).i());
		assertEquals(BigDecimal.valueOf(59), h.values().get(8).j());
		assertEquals(BigDecimal.valueOf(60), h.values().get(8).k());
		assertEquals(BigDecimal.valueOf(61), h.values().get(8).l());
		assertEquals(BigDecimal.valueOf(62), h.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(63), h.values().get(8).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(64), h.values().get(9).r());
		assertEquals(BigDecimal.valueOf(65), h.values().get(9).i());
		assertEquals(BigDecimal.valueOf(66), h.values().get(9).j());
		assertEquals(BigDecimal.valueOf(67), h.values().get(9).k());
		assertEquals(BigDecimal.valueOf(68), h.values().get(9).l());
		assertEquals(BigDecimal.valueOf(69), h.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(70), h.values().get(9).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(71), h.values().get(10).r());
		assertEquals(BigDecimal.valueOf(72), h.values().get(10).i());
		assertEquals(BigDecimal.valueOf(73), h.values().get(10).j());
		assertEquals(BigDecimal.valueOf(74), h.values().get(10).k());
		assertEquals(BigDecimal.valueOf(75), h.values().get(10).l());
		assertEquals(BigDecimal.valueOf(76), h.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(77), h.values().get(10).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(78), h.values().get(11).r());
		assertEquals(BigDecimal.valueOf(79), h.values().get(11).i());
		assertEquals(BigDecimal.valueOf(80), h.values().get(11).j());
		assertEquals(BigDecimal.valueOf(81), h.values().get(11).k());
		assertEquals(BigDecimal.valueOf(82), h.values().get(11).l());
		assertEquals(BigDecimal.valueOf(83), h.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(84), h.values().get(11).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(85), h.values().get(12).r());
		assertEquals(BigDecimal.valueOf(86), h.values().get(12).i());
		assertEquals(BigDecimal.valueOf(87), h.values().get(12).j());
		assertEquals(BigDecimal.valueOf(88), h.values().get(12).k());
		assertEquals(BigDecimal.valueOf(89), h.values().get(12).l());
		assertEquals(BigDecimal.valueOf(90), h.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(91), h.values().get(12).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(92), h.values().get(13).r());
		assertEquals(BigDecimal.valueOf(93), h.values().get(13).i());
		assertEquals(BigDecimal.valueOf(94), h.values().get(13).j());
		assertEquals(BigDecimal.valueOf(95), h.values().get(13).k());
		assertEquals(BigDecimal.valueOf(96), h.values().get(13).l());
		assertEquals(BigDecimal.valueOf(97), h.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(98), h.values().get(13).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(99), h.values().get(14).r());
		assertEquals(BigDecimal.valueOf(100), h.values().get(14).i());
		assertEquals(BigDecimal.valueOf(101), h.values().get(14).j());
		assertEquals(BigDecimal.valueOf(102), h.values().get(14).k());
		assertEquals(BigDecimal.valueOf(103), h.values().get(14).l());
		assertEquals(BigDecimal.valueOf(104), h.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(105), h.values().get(14).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(106), h.values().get(15).r());
		assertEquals(BigDecimal.valueOf(107), h.values().get(15).i());
		assertEquals(BigDecimal.valueOf(108), h.values().get(15).j());
		assertEquals(BigDecimal.valueOf(109), h.values().get(15).k());
		assertEquals(BigDecimal.valueOf(110), h.values().get(15).l());
		assertEquals(BigDecimal.valueOf(111), h.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(112), h.values().get(15).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(113), h.values().get(16).r());
		assertEquals(BigDecimal.valueOf(114), h.values().get(16).i());
		assertEquals(BigDecimal.valueOf(115), h.values().get(16).j());
		assertEquals(BigDecimal.valueOf(116), h.values().get(16).k());
		assertEquals(BigDecimal.valueOf(117), h.values().get(16).l());
		assertEquals(BigDecimal.valueOf(118), h.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(119), h.values().get(16).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(120), h.values().get(17).r());
		assertEquals(BigDecimal.valueOf(121), h.values().get(17).i());
		assertEquals(BigDecimal.valueOf(122), h.values().get(17).j());
		assertEquals(BigDecimal.valueOf(123), h.values().get(17).k());
		assertEquals(BigDecimal.valueOf(124), h.values().get(17).l());
		assertEquals(BigDecimal.valueOf(125), h.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(126), h.values().get(17).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(127), h.values().get(18).r());
		assertEquals(BigDecimal.valueOf(128), h.values().get(18).i());
		assertEquals(BigDecimal.valueOf(129), h.values().get(18).j());
		assertEquals(BigDecimal.valueOf(130), h.values().get(18).k());
		assertEquals(BigDecimal.valueOf(131), h.values().get(18).l());
		assertEquals(BigDecimal.valueOf(132), h.values().get(18).i0());
		assertEquals(BigDecimal.valueOf(133), h.values().get(18).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(134), h.values().get(19).r());
		assertEquals(BigDecimal.valueOf(135), h.values().get(19).i());
		assertEquals(BigDecimal.valueOf(136), h.values().get(19).j());
		assertEquals(BigDecimal.valueOf(137), h.values().get(19).k());
		assertEquals(BigDecimal.valueOf(138), h.values().get(19).l());
		assertEquals(BigDecimal.valueOf(139), h.values().get(19).i0());
		assertEquals(BigDecimal.valueOf(140), h.values().get(19).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(141), h.values().get(20).r());
		assertEquals(BigDecimal.valueOf(142), h.values().get(20).i());
		assertEquals(BigDecimal.valueOf(143), h.values().get(20).j());
		assertEquals(BigDecimal.valueOf(144), h.values().get(20).k());
		assertEquals(BigDecimal.valueOf(145), h.values().get(20).l());
		assertEquals(BigDecimal.valueOf(146), h.values().get(20).i0());
		assertEquals(BigDecimal.valueOf(147), h.values().get(20).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(148), h.values().get(21).r());
		assertEquals(BigDecimal.valueOf(149), h.values().get(21).i());
		assertEquals(BigDecimal.valueOf(150), h.values().get(21).j());
		assertEquals(BigDecimal.valueOf(151), h.values().get(21).k());
		assertEquals(BigDecimal.valueOf(152), h.values().get(21).l());
		assertEquals(BigDecimal.valueOf(153), h.values().get(21).i0());
		assertEquals(BigDecimal.valueOf(154), h.values().get(21).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(155), h.values().get(22).r());
		assertEquals(BigDecimal.valueOf(156), h.values().get(22).i());
		assertEquals(BigDecimal.valueOf(157), h.values().get(22).j());
		assertEquals(BigDecimal.valueOf(158), h.values().get(22).k());
		assertEquals(BigDecimal.valueOf(159), h.values().get(22).l());
		assertEquals(BigDecimal.valueOf(160), h.values().get(22).i0());
		assertEquals(BigDecimal.valueOf(161), h.values().get(22).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(162), h.values().get(23).r());
		assertEquals(BigDecimal.valueOf(163), h.values().get(23).i());
		assertEquals(BigDecimal.valueOf(164), h.values().get(23).j());
		assertEquals(BigDecimal.valueOf(165), h.values().get(23).k());
		assertEquals(BigDecimal.valueOf(166), h.values().get(23).l());
		assertEquals(BigDecimal.valueOf(167), h.values().get(23).i0());
		assertEquals(BigDecimal.valueOf(168), h.values().get(23).j0());
		assertEquals(BigDecimal.ZERO, h.values().get(23).k0());

		TensorStringRepresentation i = new TensorStringRepresentation("[[[[{1,2,3,4,5,6,7,8}][{9,10,11,12,13,14,15,16}][{17,18,19,20,21,22,23,24}][{25,26,27,28,29,30,31,32}]][[{33,34,35,36,37,38,39,40}][{41,42,43,44,45,46,47,48}][{49,50,51,52,53,54,55,56}][{57,58,59,60,61,62,63,64}]][[{65,66,67,68,69,70,71,72}][{73,74,75,76,77,78,79,80}][{81,82,83,84,85,86,87,88}][{89,90,91,92,93,94,95,96}]]][[[{97,98,99,100,101,102,103,104}][{105,106,107,108,109,110,111,112}][{113,114,115,116,117,118,119,120}][{121,122,123,124,125,126,127,128}]][[{129,130,131,132,133,134,135,136}][{137,138,139,140,141,142,143,144}][{145,146,147,148,149,150,151,152}][{153,154,155,156,157,158,159,160}]][[{161,162,163,164,165,166,167,168}][{169,170,171,172,173,174,175,176}][{177,178,179,180,181,182,183,184}][{185,186,187,188,189,190,191,192}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, i.dimensions());
		assertEquals(BigDecimal.valueOf(1), i.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), i.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), i.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), i.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), i.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), i.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), i.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), i.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(9), i.values().get(1).r());
		assertEquals(BigDecimal.valueOf(10), i.values().get(1).i());
		assertEquals(BigDecimal.valueOf(11), i.values().get(1).j());
		assertEquals(BigDecimal.valueOf(12), i.values().get(1).k());
		assertEquals(BigDecimal.valueOf(13), i.values().get(1).l());
		assertEquals(BigDecimal.valueOf(14), i.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(15), i.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(16), i.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(17), i.values().get(2).r());
		assertEquals(BigDecimal.valueOf(18), i.values().get(2).i());
		assertEquals(BigDecimal.valueOf(19), i.values().get(2).j());
		assertEquals(BigDecimal.valueOf(20), i.values().get(2).k());
		assertEquals(BigDecimal.valueOf(21), i.values().get(2).l());
		assertEquals(BigDecimal.valueOf(22), i.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(23), i.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(24), i.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(25), i.values().get(3).r());
		assertEquals(BigDecimal.valueOf(26), i.values().get(3).i());
		assertEquals(BigDecimal.valueOf(27), i.values().get(3).j());
		assertEquals(BigDecimal.valueOf(28), i.values().get(3).k());
		assertEquals(BigDecimal.valueOf(29), i.values().get(3).l());
		assertEquals(BigDecimal.valueOf(30), i.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(31), i.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(32), i.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(33), i.values().get(4).r());
		assertEquals(BigDecimal.valueOf(34), i.values().get(4).i());
		assertEquals(BigDecimal.valueOf(35), i.values().get(4).j());
		assertEquals(BigDecimal.valueOf(36), i.values().get(4).k());
		assertEquals(BigDecimal.valueOf(37), i.values().get(4).l());
		assertEquals(BigDecimal.valueOf(38), i.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(39), i.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(40), i.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(41), i.values().get(5).r());
		assertEquals(BigDecimal.valueOf(42), i.values().get(5).i());
		assertEquals(BigDecimal.valueOf(43), i.values().get(5).j());
		assertEquals(BigDecimal.valueOf(44), i.values().get(5).k());
		assertEquals(BigDecimal.valueOf(45), i.values().get(5).l());
		assertEquals(BigDecimal.valueOf(46), i.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(47), i.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(48), i.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(49), i.values().get(6).r());
		assertEquals(BigDecimal.valueOf(50), i.values().get(6).i());
		assertEquals(BigDecimal.valueOf(51), i.values().get(6).j());
		assertEquals(BigDecimal.valueOf(52), i.values().get(6).k());
		assertEquals(BigDecimal.valueOf(53), i.values().get(6).l());
		assertEquals(BigDecimal.valueOf(54), i.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(55), i.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(56), i.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(57), i.values().get(7).r());
		assertEquals(BigDecimal.valueOf(58), i.values().get(7).i());
		assertEquals(BigDecimal.valueOf(59), i.values().get(7).j());
		assertEquals(BigDecimal.valueOf(60), i.values().get(7).k());
		assertEquals(BigDecimal.valueOf(61), i.values().get(7).l());
		assertEquals(BigDecimal.valueOf(62), i.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(63), i.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(64), i.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(65), i.values().get(8).r());
		assertEquals(BigDecimal.valueOf(66), i.values().get(8).i());
		assertEquals(BigDecimal.valueOf(67), i.values().get(8).j());
		assertEquals(BigDecimal.valueOf(68), i.values().get(8).k());
		assertEquals(BigDecimal.valueOf(69), i.values().get(8).l());
		assertEquals(BigDecimal.valueOf(70), i.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(71), i.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(72), i.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(73), i.values().get(9).r());
		assertEquals(BigDecimal.valueOf(74), i.values().get(9).i());
		assertEquals(BigDecimal.valueOf(75), i.values().get(9).j());
		assertEquals(BigDecimal.valueOf(76), i.values().get(9).k());
		assertEquals(BigDecimal.valueOf(77), i.values().get(9).l());
		assertEquals(BigDecimal.valueOf(78), i.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(79), i.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(80), i.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(81), i.values().get(10).r());
		assertEquals(BigDecimal.valueOf(82), i.values().get(10).i());
		assertEquals(BigDecimal.valueOf(83), i.values().get(10).j());
		assertEquals(BigDecimal.valueOf(84), i.values().get(10).k());
		assertEquals(BigDecimal.valueOf(85), i.values().get(10).l());
		assertEquals(BigDecimal.valueOf(86), i.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(87), i.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(88), i.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(89), i.values().get(11).r());
		assertEquals(BigDecimal.valueOf(90), i.values().get(11).i());
		assertEquals(BigDecimal.valueOf(91), i.values().get(11).j());
		assertEquals(BigDecimal.valueOf(92), i.values().get(11).k());
		assertEquals(BigDecimal.valueOf(93), i.values().get(11).l());
		assertEquals(BigDecimal.valueOf(94), i.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(95), i.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(96), i.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(97), i.values().get(12).r());
		assertEquals(BigDecimal.valueOf(98), i.values().get(12).i());
		assertEquals(BigDecimal.valueOf(99), i.values().get(12).j());
		assertEquals(BigDecimal.valueOf(100), i.values().get(12).k());
		assertEquals(BigDecimal.valueOf(101), i.values().get(12).l());
		assertEquals(BigDecimal.valueOf(102), i.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(103), i.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(104), i.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(105), i.values().get(13).r());
		assertEquals(BigDecimal.valueOf(106), i.values().get(13).i());
		assertEquals(BigDecimal.valueOf(107), i.values().get(13).j());
		assertEquals(BigDecimal.valueOf(108), i.values().get(13).k());
		assertEquals(BigDecimal.valueOf(109), i.values().get(13).l());
		assertEquals(BigDecimal.valueOf(110), i.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(111), i.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(112), i.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(113), i.values().get(14).r());
		assertEquals(BigDecimal.valueOf(114), i.values().get(14).i());
		assertEquals(BigDecimal.valueOf(115), i.values().get(14).j());
		assertEquals(BigDecimal.valueOf(116), i.values().get(14).k());
		assertEquals(BigDecimal.valueOf(117), i.values().get(14).l());
		assertEquals(BigDecimal.valueOf(118), i.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(119), i.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(120), i.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(121), i.values().get(15).r());
		assertEquals(BigDecimal.valueOf(122), i.values().get(15).i());
		assertEquals(BigDecimal.valueOf(123), i.values().get(15).j());
		assertEquals(BigDecimal.valueOf(124), i.values().get(15).k());
		assertEquals(BigDecimal.valueOf(125), i.values().get(15).l());
		assertEquals(BigDecimal.valueOf(126), i.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(127), i.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(128), i.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(129), i.values().get(16).r());
		assertEquals(BigDecimal.valueOf(130), i.values().get(16).i());
		assertEquals(BigDecimal.valueOf(131), i.values().get(16).j());
		assertEquals(BigDecimal.valueOf(132), i.values().get(16).k());
		assertEquals(BigDecimal.valueOf(133), i.values().get(16).l());
		assertEquals(BigDecimal.valueOf(134), i.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(135), i.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(136), i.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(137), i.values().get(17).r());
		assertEquals(BigDecimal.valueOf(138), i.values().get(17).i());
		assertEquals(BigDecimal.valueOf(139), i.values().get(17).j());
		assertEquals(BigDecimal.valueOf(140), i.values().get(17).k());
		assertEquals(BigDecimal.valueOf(141), i.values().get(17).l());
		assertEquals(BigDecimal.valueOf(142), i.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(143), i.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(144), i.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(145), i.values().get(18).r());
		assertEquals(BigDecimal.valueOf(146), i.values().get(18).i());
		assertEquals(BigDecimal.valueOf(147), i.values().get(18).j());
		assertEquals(BigDecimal.valueOf(148), i.values().get(18).k());
		assertEquals(BigDecimal.valueOf(149), i.values().get(18).l());
		assertEquals(BigDecimal.valueOf(150), i.values().get(18).i0());
		assertEquals(BigDecimal.valueOf(151), i.values().get(18).j0());
		assertEquals(BigDecimal.valueOf(152), i.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(153), i.values().get(19).r());
		assertEquals(BigDecimal.valueOf(154), i.values().get(19).i());
		assertEquals(BigDecimal.valueOf(155), i.values().get(19).j());
		assertEquals(BigDecimal.valueOf(156), i.values().get(19).k());
		assertEquals(BigDecimal.valueOf(157), i.values().get(19).l());
		assertEquals(BigDecimal.valueOf(158), i.values().get(19).i0());
		assertEquals(BigDecimal.valueOf(159), i.values().get(19).j0());
		assertEquals(BigDecimal.valueOf(160), i.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(161), i.values().get(20).r());
		assertEquals(BigDecimal.valueOf(162), i.values().get(20).i());
		assertEquals(BigDecimal.valueOf(163), i.values().get(20).j());
		assertEquals(BigDecimal.valueOf(164), i.values().get(20).k());
		assertEquals(BigDecimal.valueOf(165), i.values().get(20).l());
		assertEquals(BigDecimal.valueOf(166), i.values().get(20).i0());
		assertEquals(BigDecimal.valueOf(167), i.values().get(20).j0());
		assertEquals(BigDecimal.valueOf(168), i.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(169), i.values().get(21).r());
		assertEquals(BigDecimal.valueOf(170), i.values().get(21).i());
		assertEquals(BigDecimal.valueOf(171), i.values().get(21).j());
		assertEquals(BigDecimal.valueOf(172), i.values().get(21).k());
		assertEquals(BigDecimal.valueOf(173), i.values().get(21).l());
		assertEquals(BigDecimal.valueOf(174), i.values().get(21).i0());
		assertEquals(BigDecimal.valueOf(175), i.values().get(21).j0());
		assertEquals(BigDecimal.valueOf(176), i.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(177), i.values().get(22).r());
		assertEquals(BigDecimal.valueOf(178), i.values().get(22).i());
		assertEquals(BigDecimal.valueOf(179), i.values().get(22).j());
		assertEquals(BigDecimal.valueOf(180), i.values().get(22).k());
		assertEquals(BigDecimal.valueOf(181), i.values().get(22).l());
		assertEquals(BigDecimal.valueOf(182), i.values().get(22).i0());
		assertEquals(BigDecimal.valueOf(183), i.values().get(22).j0());
		assertEquals(BigDecimal.valueOf(184), i.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(185), i.values().get(23).r());
		assertEquals(BigDecimal.valueOf(186), i.values().get(23).i());
		assertEquals(BigDecimal.valueOf(187), i.values().get(23).j());
		assertEquals(BigDecimal.valueOf(188), i.values().get(23).k());
		assertEquals(BigDecimal.valueOf(189), i.values().get(23).l());
		assertEquals(BigDecimal.valueOf(190), i.values().get(23).i0());
		assertEquals(BigDecimal.valueOf(191), i.values().get(23).j0());
		assertEquals(BigDecimal.valueOf(192), i.values().get(23).k0());

		TensorStringRepresentation j = new TensorStringRepresentation("[[[[{1,2,3,4,5,6,7,8,9}][{10,11,12,13,14,15,16,17,18}][{19,20,21,22,23,24,25,26,27}][{28,29,30,31,32,33,34,35,36}]][[{37,38,39,40,41,42,43,44,45}][{46,47,48,49,50,51,52,53,54}][{55,56,57,58,59,60,61,62,63}][{64,65,66,67,68,69,70,71,72}]][[{73,74,75,76,77,78,79,80,81}][{82,83,84,85,86,87,88,89,90}][{91,92,93,94,95,96,97,98,99}][{100,101,102,103,104,105,106,107,108}]]][[[{109,110,111,112,113,114,115,116,117}][{118,119,120,121,122,123,124,125,126}][{127,128,129,130,131,132,133,134,135}][{136,137,138,139,140,141,142,143,144}]][[{145,146,147,148,149,150,151,152,153}][{154,155,156,157,158,159,160,161,162}][{163,164,165,166,167,168,169,170,171}][{172,173,174,175,176,177,178,179,180}]][[{181,182,183,184,185,186,187,188,189}][{190,191,192,193,194,195,196,197,198}][{199,200,201,202,203,204,205,206,207}][{208,209,210,211,212,213,214,215,216}]]]]");
		assertArrayEquals(new long[] {1,4,3,2}, j.dimensions());
		assertEquals(BigDecimal.valueOf(1), j.values().get(0).r());
		assertEquals(BigDecimal.valueOf(2), j.values().get(0).i());
		assertEquals(BigDecimal.valueOf(3), j.values().get(0).j());
		assertEquals(BigDecimal.valueOf(4), j.values().get(0).k());
		assertEquals(BigDecimal.valueOf(5), j.values().get(0).l());
		assertEquals(BigDecimal.valueOf(6), j.values().get(0).i0());
		assertEquals(BigDecimal.valueOf(7), j.values().get(0).j0());
		assertEquals(BigDecimal.valueOf(8), j.values().get(0).k0());
		assertEquals(BigDecimal.valueOf(10), j.values().get(1).r());
		assertEquals(BigDecimal.valueOf(11), j.values().get(1).i());
		assertEquals(BigDecimal.valueOf(12), j.values().get(1).j());
		assertEquals(BigDecimal.valueOf(13), j.values().get(1).k());
		assertEquals(BigDecimal.valueOf(14), j.values().get(1).l());
		assertEquals(BigDecimal.valueOf(15), j.values().get(1).i0());
		assertEquals(BigDecimal.valueOf(16), j.values().get(1).j0());
		assertEquals(BigDecimal.valueOf(17), j.values().get(1).k0());
		assertEquals(BigDecimal.valueOf(19), j.values().get(2).r());
		assertEquals(BigDecimal.valueOf(20), j.values().get(2).i());
		assertEquals(BigDecimal.valueOf(21), j.values().get(2).j());
		assertEquals(BigDecimal.valueOf(22), j.values().get(2).k());
		assertEquals(BigDecimal.valueOf(23), j.values().get(2).l());
		assertEquals(BigDecimal.valueOf(24), j.values().get(2).i0());
		assertEquals(BigDecimal.valueOf(25), j.values().get(2).j0());
		assertEquals(BigDecimal.valueOf(26), j.values().get(2).k0());
		assertEquals(BigDecimal.valueOf(28), j.values().get(3).r());
		assertEquals(BigDecimal.valueOf(29), j.values().get(3).i());
		assertEquals(BigDecimal.valueOf(30), j.values().get(3).j());
		assertEquals(BigDecimal.valueOf(31), j.values().get(3).k());
		assertEquals(BigDecimal.valueOf(32), j.values().get(3).l());
		assertEquals(BigDecimal.valueOf(33), j.values().get(3).i0());
		assertEquals(BigDecimal.valueOf(34), j.values().get(3).j0());
		assertEquals(BigDecimal.valueOf(35), j.values().get(3).k0());
		assertEquals(BigDecimal.valueOf(37), j.values().get(4).r());
		assertEquals(BigDecimal.valueOf(38), j.values().get(4).i());
		assertEquals(BigDecimal.valueOf(39), j.values().get(4).j());
		assertEquals(BigDecimal.valueOf(40), j.values().get(4).k());
		assertEquals(BigDecimal.valueOf(41), j.values().get(4).l());
		assertEquals(BigDecimal.valueOf(42), j.values().get(4).i0());
		assertEquals(BigDecimal.valueOf(43), j.values().get(4).j0());
		assertEquals(BigDecimal.valueOf(44), j.values().get(4).k0());
		assertEquals(BigDecimal.valueOf(46), j.values().get(5).r());
		assertEquals(BigDecimal.valueOf(47), j.values().get(5).i());
		assertEquals(BigDecimal.valueOf(48), j.values().get(5).j());
		assertEquals(BigDecimal.valueOf(49), j.values().get(5).k());
		assertEquals(BigDecimal.valueOf(50), j.values().get(5).l());
		assertEquals(BigDecimal.valueOf(51), j.values().get(5).i0());
		assertEquals(BigDecimal.valueOf(52), j.values().get(5).j0());
		assertEquals(BigDecimal.valueOf(53), j.values().get(5).k0());
		assertEquals(BigDecimal.valueOf(55), j.values().get(6).r());
		assertEquals(BigDecimal.valueOf(56), j.values().get(6).i());
		assertEquals(BigDecimal.valueOf(57), j.values().get(6).j());
		assertEquals(BigDecimal.valueOf(58), j.values().get(6).k());
		assertEquals(BigDecimal.valueOf(59), j.values().get(6).l());
		assertEquals(BigDecimal.valueOf(60), j.values().get(6).i0());
		assertEquals(BigDecimal.valueOf(61), j.values().get(6).j0());
		assertEquals(BigDecimal.valueOf(62), j.values().get(6).k0());
		assertEquals(BigDecimal.valueOf(64), j.values().get(7).r());
		assertEquals(BigDecimal.valueOf(65), j.values().get(7).i());
		assertEquals(BigDecimal.valueOf(66), j.values().get(7).j());
		assertEquals(BigDecimal.valueOf(67), j.values().get(7).k());
		assertEquals(BigDecimal.valueOf(68), j.values().get(7).l());
		assertEquals(BigDecimal.valueOf(69), j.values().get(7).i0());
		assertEquals(BigDecimal.valueOf(70), j.values().get(7).j0());
		assertEquals(BigDecimal.valueOf(71), j.values().get(7).k0());
		assertEquals(BigDecimal.valueOf(73), j.values().get(8).r());
		assertEquals(BigDecimal.valueOf(74), j.values().get(8).i());
		assertEquals(BigDecimal.valueOf(75), j.values().get(8).j());
		assertEquals(BigDecimal.valueOf(76), j.values().get(8).k());
		assertEquals(BigDecimal.valueOf(77), j.values().get(8).l());
		assertEquals(BigDecimal.valueOf(78), j.values().get(8).i0());
		assertEquals(BigDecimal.valueOf(79), j.values().get(8).j0());
		assertEquals(BigDecimal.valueOf(80), j.values().get(8).k0());
		assertEquals(BigDecimal.valueOf(82), j.values().get(9).r());
		assertEquals(BigDecimal.valueOf(83), j.values().get(9).i());
		assertEquals(BigDecimal.valueOf(84), j.values().get(9).j());
		assertEquals(BigDecimal.valueOf(85), j.values().get(9).k());
		assertEquals(BigDecimal.valueOf(86), j.values().get(9).l());
		assertEquals(BigDecimal.valueOf(87), j.values().get(9).i0());
		assertEquals(BigDecimal.valueOf(88), j.values().get(9).j0());
		assertEquals(BigDecimal.valueOf(89), j.values().get(9).k0());
		assertEquals(BigDecimal.valueOf(91), j.values().get(10).r());
		assertEquals(BigDecimal.valueOf(92), j.values().get(10).i());
		assertEquals(BigDecimal.valueOf(93), j.values().get(10).j());
		assertEquals(BigDecimal.valueOf(94), j.values().get(10).k());
		assertEquals(BigDecimal.valueOf(95), j.values().get(10).l());
		assertEquals(BigDecimal.valueOf(96), j.values().get(10).i0());
		assertEquals(BigDecimal.valueOf(97), j.values().get(10).j0());
		assertEquals(BigDecimal.valueOf(98), j.values().get(10).k0());
		assertEquals(BigDecimal.valueOf(100), j.values().get(11).r());
		assertEquals(BigDecimal.valueOf(101), j.values().get(11).i());
		assertEquals(BigDecimal.valueOf(102), j.values().get(11).j());
		assertEquals(BigDecimal.valueOf(103), j.values().get(11).k());
		assertEquals(BigDecimal.valueOf(104), j.values().get(11).l());
		assertEquals(BigDecimal.valueOf(105), j.values().get(11).i0());
		assertEquals(BigDecimal.valueOf(106), j.values().get(11).j0());
		assertEquals(BigDecimal.valueOf(107), j.values().get(11).k0());
		assertEquals(BigDecimal.valueOf(109), j.values().get(12).r());
		assertEquals(BigDecimal.valueOf(110), j.values().get(12).i());
		assertEquals(BigDecimal.valueOf(111), j.values().get(12).j());
		assertEquals(BigDecimal.valueOf(112), j.values().get(12).k());
		assertEquals(BigDecimal.valueOf(113), j.values().get(12).l());
		assertEquals(BigDecimal.valueOf(114), j.values().get(12).i0());
		assertEquals(BigDecimal.valueOf(115), j.values().get(12).j0());
		assertEquals(BigDecimal.valueOf(116), j.values().get(12).k0());
		assertEquals(BigDecimal.valueOf(118), j.values().get(13).r());
		assertEquals(BigDecimal.valueOf(119), j.values().get(13).i());
		assertEquals(BigDecimal.valueOf(120), j.values().get(13).j());
		assertEquals(BigDecimal.valueOf(121), j.values().get(13).k());
		assertEquals(BigDecimal.valueOf(122), j.values().get(13).l());
		assertEquals(BigDecimal.valueOf(123), j.values().get(13).i0());
		assertEquals(BigDecimal.valueOf(124), j.values().get(13).j0());
		assertEquals(BigDecimal.valueOf(125), j.values().get(13).k0());
		assertEquals(BigDecimal.valueOf(127), j.values().get(14).r());
		assertEquals(BigDecimal.valueOf(128), j.values().get(14).i());
		assertEquals(BigDecimal.valueOf(129), j.values().get(14).j());
		assertEquals(BigDecimal.valueOf(130), j.values().get(14).k());
		assertEquals(BigDecimal.valueOf(131), j.values().get(14).l());
		assertEquals(BigDecimal.valueOf(132), j.values().get(14).i0());
		assertEquals(BigDecimal.valueOf(133), j.values().get(14).j0());
		assertEquals(BigDecimal.valueOf(134), j.values().get(14).k0());
		assertEquals(BigDecimal.valueOf(136), j.values().get(15).r());
		assertEquals(BigDecimal.valueOf(137), j.values().get(15).i());
		assertEquals(BigDecimal.valueOf(138), j.values().get(15).j());
		assertEquals(BigDecimal.valueOf(139), j.values().get(15).k());
		assertEquals(BigDecimal.valueOf(140), j.values().get(15).l());
		assertEquals(BigDecimal.valueOf(141), j.values().get(15).i0());
		assertEquals(BigDecimal.valueOf(142), j.values().get(15).j0());
		assertEquals(BigDecimal.valueOf(143), j.values().get(15).k0());
		assertEquals(BigDecimal.valueOf(145), j.values().get(16).r());
		assertEquals(BigDecimal.valueOf(146), j.values().get(16).i());
		assertEquals(BigDecimal.valueOf(147), j.values().get(16).j());
		assertEquals(BigDecimal.valueOf(148), j.values().get(16).k());
		assertEquals(BigDecimal.valueOf(149), j.values().get(16).l());
		assertEquals(BigDecimal.valueOf(150), j.values().get(16).i0());
		assertEquals(BigDecimal.valueOf(151), j.values().get(16).j0());
		assertEquals(BigDecimal.valueOf(152), j.values().get(16).k0());
		assertEquals(BigDecimal.valueOf(154), j.values().get(17).r());
		assertEquals(BigDecimal.valueOf(155), j.values().get(17).i());
		assertEquals(BigDecimal.valueOf(156), j.values().get(17).j());
		assertEquals(BigDecimal.valueOf(157), j.values().get(17).k());
		assertEquals(BigDecimal.valueOf(158), j.values().get(17).l());
		assertEquals(BigDecimal.valueOf(159), j.values().get(17).i0());
		assertEquals(BigDecimal.valueOf(160), j.values().get(17).j0());
		assertEquals(BigDecimal.valueOf(161), j.values().get(17).k0());
		assertEquals(BigDecimal.valueOf(163), j.values().get(18).r());
		assertEquals(BigDecimal.valueOf(164), j.values().get(18).i());
		assertEquals(BigDecimal.valueOf(165), j.values().get(18).j());
		assertEquals(BigDecimal.valueOf(166), j.values().get(18).k());
		assertEquals(BigDecimal.valueOf(167), j.values().get(18).l());
		assertEquals(BigDecimal.valueOf(168), j.values().get(18).i0());
		assertEquals(BigDecimal.valueOf(169), j.values().get(18).j0());
		assertEquals(BigDecimal.valueOf(170), j.values().get(18).k0());
		assertEquals(BigDecimal.valueOf(172), j.values().get(19).r());
		assertEquals(BigDecimal.valueOf(173), j.values().get(19).i());
		assertEquals(BigDecimal.valueOf(174), j.values().get(19).j());
		assertEquals(BigDecimal.valueOf(175), j.values().get(19).k());
		assertEquals(BigDecimal.valueOf(176), j.values().get(19).l());
		assertEquals(BigDecimal.valueOf(177), j.values().get(19).i0());
		assertEquals(BigDecimal.valueOf(178), j.values().get(19).j0());
		assertEquals(BigDecimal.valueOf(179), j.values().get(19).k0());
		assertEquals(BigDecimal.valueOf(181), j.values().get(20).r());
		assertEquals(BigDecimal.valueOf(182), j.values().get(20).i());
		assertEquals(BigDecimal.valueOf(183), j.values().get(20).j());
		assertEquals(BigDecimal.valueOf(184), j.values().get(20).k());
		assertEquals(BigDecimal.valueOf(185), j.values().get(20).l());
		assertEquals(BigDecimal.valueOf(186), j.values().get(20).i0());
		assertEquals(BigDecimal.valueOf(187), j.values().get(20).j0());
		assertEquals(BigDecimal.valueOf(188), j.values().get(20).k0());
		assertEquals(BigDecimal.valueOf(190), j.values().get(21).r());
		assertEquals(BigDecimal.valueOf(191), j.values().get(21).i());
		assertEquals(BigDecimal.valueOf(192), j.values().get(21).j());
		assertEquals(BigDecimal.valueOf(193), j.values().get(21).k());
		assertEquals(BigDecimal.valueOf(194), j.values().get(21).l());
		assertEquals(BigDecimal.valueOf(195), j.values().get(21).i0());
		assertEquals(BigDecimal.valueOf(196), j.values().get(21).j0());
		assertEquals(BigDecimal.valueOf(197), j.values().get(21).k0());
		assertEquals(BigDecimal.valueOf(199), j.values().get(22).r());
		assertEquals(BigDecimal.valueOf(200), j.values().get(22).i());
		assertEquals(BigDecimal.valueOf(201), j.values().get(22).j());
		assertEquals(BigDecimal.valueOf(202), j.values().get(22).k());
		assertEquals(BigDecimal.valueOf(203), j.values().get(22).l());
		assertEquals(BigDecimal.valueOf(204), j.values().get(22).i0());
		assertEquals(BigDecimal.valueOf(205), j.values().get(22).j0());
		assertEquals(BigDecimal.valueOf(206), j.values().get(22).k0());
		assertEquals(BigDecimal.valueOf(208), j.values().get(23).r());
		assertEquals(BigDecimal.valueOf(209), j.values().get(23).i());
		assertEquals(BigDecimal.valueOf(210), j.values().get(23).j());
		assertEquals(BigDecimal.valueOf(211), j.values().get(23).k());
		assertEquals(BigDecimal.valueOf(212), j.values().get(23).l());
		assertEquals(BigDecimal.valueOf(213), j.values().get(23).i0());
		assertEquals(BigDecimal.valueOf(214), j.values().get(23).j0());
		assertEquals(BigDecimal.valueOf(215), j.values().get(23).k0());
	}
}
