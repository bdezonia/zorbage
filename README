Zorbage: an algebraic data hierarchy for use in numeric processing

Goals:
  1) provide the framework for reusable numeric algorithms
  2) support numeric computing in Java in an efficient manner

Support for:
  1) integers, rationals, reals, complex numbers, quaternions, octonions
  2) numbers, vectors, matrices, and tensors
  3) various precisions: 1-bit to 128-bit to unbounded (signed and unsigned and float)
  4) very large datasets (arrays, virtual files, sparse structures, JDBC storage)
  5) generic programming
  6) algebraic/group-theoretic algorithms
  7) procedural, object oriented, and functional coding styles

What can I do with Zorbage?

  Use many different data types

    1-bit integers (signed and unsigned)
    2-bit integers (signed and unsigned)
    3-bit integers (signed and unsigned)
    4-bit integers (signed and unsigned)
    5-bit integers (signed and unsigned)
    6-bit integers (signed and unsigned)
    7-bit integers (signed and unsigned)
    8-bit integers (signed and unsigned)
    9-bit integers (signed and unsigned)
    10-bit integers (signed and unsigned)
    11-bit integers (signed and unsigned)
    12-bit integers (signed and unsigned)
    13-bit integers (signed and unsigned)
    14-bit integers (signed and unsigned)
    15-bit integers (signed and unsigned)
    16-bit integers (signed and unsigned)
    32-bit integers (signed and unsigned)
    64-bit integers (signed and unsigned)
    128-bit integers (signed and unsigned)
    Unbounded integers

    16-bit floats
    32-bit floats
    64-bit floats
    Unbounded floats
  
    Unbounded rational numbers
  
    Booleans
    
    n-dimensional Points
  
  A conversion api exists for moving between any two types accurately
    and efficiently.
  
  There are types that are compound: complex numbers, quaternions, and
    octonions based on any of the floating types.
    
  Types can be stored in arrays, files, sparse structures, and JDBC
    database tables.
    
  You can allocate and use huge (length Long.MAX_VAUE) data structures.
  
  Data access is standardized as if everything is an array. Arrays can
    be concatenated, trimmed, subsampled, masked, padded, readonly, as
    well as other abstractions.
      
  Array storage can be in native types (for speed of access) or for many
    integer types they can be bit encoded (to save space).
  
  You can use existing or write your own generic algorithms that work
    with all the types transparently. For instance Zorbage has one Sort
    algorithm that can sort a list made of any of the above defined types
    while doing no data conversions.
  
  You can use existing or write your own algorithms that work with numbers,
    vectors, matrices, and tensors.
  
  You can use a number of predefined STL-like algorithms plus predefined
    vector and matrix algorithms.
  
  You can use existing parallel algorithms for quickly processing data.
  
  Define multidimensional data sets with flexible out of bounds data
    handling procedures.
    
  Define complex data sampling algorithms from prebuilt sampling components.
  
  Use type safe first class Function and Procedure objects. Pass them as
    arguments to code that can transform your data quickly and generically.
  
  Parse and use equations made from any of the types
