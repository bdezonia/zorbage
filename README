Zorbage: algebraic data types and algorithms for use in numeric processing

Goals:
  1) provide the framework for reusable numeric algorithms
  2) support numeric computing in Java in an efficient manner

Support for:
  1) integers, rationals, reals, complex numbers, quaternions, octonions
  2) numbers, vectors, matrices, and tensors
  3) various precisions: 1-bit to 128-bit to unbounded (signed and unsigned and float)
  4) very large datasets (arrays, virtual files, sparse structures, JDBC storage)
  5) generic programming
  6) algebraic/group-theoretic algorithms
  7) procedural, object oriented, and functional coding styles

What can I do with Zorbage?

  Define multidimensional data sets with flexible out of bounds data
    handling procedures.
    
  Use many different data types

    1-bit integers (signed and unsigned)
    2-bit integers (signed and unsigned)
    3-bit integers (signed and unsigned)
    4-bit integers (signed and unsigned)
    5-bit integers (signed and unsigned)
    6-bit integers (signed and unsigned)
    7-bit integers (signed and unsigned)
    8-bit integers (signed and unsigned)
    9-bit integers (signed and unsigned)
    10-bit integers (signed and unsigned)
    11-bit integers (signed and unsigned)
    12-bit integers (signed and unsigned)
    13-bit integers (signed and unsigned)
    14-bit integers (signed and unsigned)
    15-bit integers (signed and unsigned)
    16-bit integers (signed and unsigned)
    32-bit integers (signed and unsigned)
    64-bit integers (signed and unsigned)
    128-bit integers (signed and unsigned)
    Unbounded integers

    16-bit floats
    32-bit floats
    64-bit floats
    Unbounded floats
  
    Unbounded rational numbers
  
    Booleans
    
    n-dimensional Points
    
    ARGB and RGB tuples
  
  A conversion api exists for moving between types accurately and efficiently.
  
  There are types that are compound: complex numbers, quaternions, and
    octonions based on any of the floating types.
    
  Types can be stored in arrays, files, sparse structures, and JDBC
    database tables.
    
  You can allocate and use huge (length Long.MAX_VAUE) data structures.
  
  Data access is standardized as if everything is an array. Arrays can be
    concatenated, trimmed, subsampled, masked, padded, readonly, as well as
    other abstractions.
      
  Array storage can be in native types (for speed of access) or for many
    integer types they can be bit encoded (to save space).
  
  You can use existing or write your own generic algorithms that work with
    all the types transparently. For instance Zorbage has one Sort algorithm
    that can sort a list made of any of the above defined types while doing
    no data conversions.
  
  You can use existing or write your own algorithms that work with numbers,
    vectors, matrices, and tensors.
  
  You can use a number of predefined STL-like algorithms plus predefined
    vector, matrix, and other numerical algorithms. There are approximately
    260 of them in total.
  
  You can use Zorbage's parallel algorithms for quickly processing data.
  
  Define complex data sampling algorithms from prebuilt sampling components.
  
  Use type safe first class Function and Procedure objects. Pass them as
    arguments to code that can transform your data quickly and generically.
    Zorbage can also find roots, find derivatives and solve differential
    equations numerically involving arbitrary scalar and vector Procedures.
    It also includes algorithms from linear algebra, signal processing,
    statistics, set theory, and analysis.
 
  Use parsers to create Procedures from strings. These Procedures represent
    equations that when fed values will compute a return value (the result of
    applying the inputs to the equation). Equations can return numbers, vectors,
    matrices, or tensors. The subcomponents of these can be reals, complexes,
    quaternions, or octonions. Equations can be built out of numbers, input
    variable references, constants (like E, PI, etc.) and typical functions
    like sin(), atan(), exp(), log(), etc. For more info see:
    https://github.com/bdezonia/zorbage/blob/master/EQUATION_LANGUAGE

Programming notes

  Java 8 info
    Zorbage has been compiled and tested using Maven with OpenJDK Java on Linux

  Java 7 info
    Zorbage has been compiled and tested using Maven with Oracle Java on MacOS

  Eclipse info
    Zorbage has also been compiled and tested within Eclipse versions Mars,
      Neon, Oxygen, and 2019-09 R

How to include zorbage in your Maven project

  Add the following dependency to your project's pom.xml:
  
  <dependency>
    <groupId>io.github.bdezonia</groupId>
    <artifactId>zorbage</artifactId>
    <version>0.3.0</version>
  </dependency>
  
How to include zorbage in a different build system

  See https://search.maven.org/artifact/io.github.bdezonia/zorbage/0.3.0/jar
  for instructions on how to reference zorbage in build systems such as
  Gradle or others.
